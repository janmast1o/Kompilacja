Grammar:

Rule 0     S' -> instructions
Rule 1     instructions -> instruction
Rule 2     instructions -> instructions instruction
Rule 3     instruction -> RETURN expression ;
Rule 4     instruction -> CONTINUE ;
Rule 5     instruction -> BREAK ;
Rule 6     instruction -> print_instruction
Rule 7     instruction -> assign_expression
Rule 8     instruction -> for_instruction
Rule 9     instruction -> while_instruction
Rule 10    instruction -> if_instruction
Rule 11    instruction -> { instructions }
Rule 12    if_instruction -> IF ( relation_expression ) instruction  [precedence=nonassoc, level=1]
Rule 13    if_instruction -> IF ( relation_expression ) instruction ELSE instruction  [precedence=nonassoc, level=2]
Rule 14    while_instruction -> WHILE ( relation_expression ) instruction
Rule 15    for_instruction -> FOR ID = id_int : id_int instruction
Rule 16    id_int -> INTNUM
Rule 17    id_int -> ID
Rule 18    print_instruction -> PRINT value ;
Rule 19    value -> STRING
Rule 20    value -> ID
Rule 21    value -> FLOATNUM
Rule 22    value -> INTNUM
Rule 23    expression -> expression DOTDIVIDE expression  [precedence=left, level=5]
Rule 24    expression -> expression DOTTIMES expression  [precedence=left, level=5]
Rule 25    expression -> expression DOTMINUS expression  [precedence=left, level=4]
Rule 26    expression -> expression DOTPLUS expression  [precedence=left, level=4]
Rule 27    expression -> expression / expression  [precedence=left, level=5]
Rule 28    expression -> expression * expression  [precedence=left, level=5]
Rule 29    expression -> expression - expression  [precedence=left, level=4]
Rule 30    expression -> expression + expression  [precedence=left, level=4]
Rule 31    expression -> expression '  [precedence=nonassoc, level=6]
Rule 32    expression -> ( expression )
Rule 33    expression -> UMINUS expression  [precedence=right, level=7]
Rule 34    expression -> matrix_ref
Rule 35    expression -> matrix_functions
Rule 36    expression -> relation_expression
Rule 37    expression -> assign_expression
Rule 38    expression -> value
Rule 39    expression -> [ vectors ]
Rule 40    expression -> unary_minus
Rule 41    unary_minus -> - expression  [precedence=right, level=7]
Rule 42    assign_expression -> id_ref DIVIDEASSIGN expression ;
Rule 43    assign_expression -> id_ref TIMESASSIGN expression ;
Rule 44    assign_expression -> id_ref MINUSASSIGN expression ;
Rule 45    assign_expression -> id_ref PLUSASSIGN expression ;
Rule 46    assign_expression -> id_ref = expression ;
Rule 47    matrix_ref -> ID [ list_of_ints ]
Rule 48    id_ref -> matrix_ref
Rule 49    id_ref -> ID
Rule 50    relation_expression -> expression NE expression  [precedence=nonassoc, level=3]
Rule 51    relation_expression -> expression EQ expression  [precedence=nonassoc, level=3]
Rule 52    relation_expression -> expression GE expression  [precedence=nonassoc, level=3]
Rule 53    relation_expression -> expression LE expression  [precedence=nonassoc, level=3]
Rule 54    relation_expression -> expression GT expression  [precedence=nonassoc, level=3]
Rule 55    relation_expression -> expression LT expression  [precedence=nonassoc, level=3]
Rule 56    matrix_functions -> EYE ( INTNUM )
Rule 57    matrix_functions -> ONES ( INTNUM )
Rule 58    matrix_functions -> ZEROS ( INTNUM )
Rule 59    vectors -> vectors , [ list_of_ints ]
Rule 60    vectors -> [ list_of_ints ]
Rule 61    list_of_ints -> list_of_ints , INTNUM
Rule 62    list_of_ints -> INTNUM

Terminals, with rules where they appear:

'                    : 31
(                    : 12 13 14 32 56 57 58
)                    : 12 13 14 32 56 57 58
*                    : 28
+                    : 30
,                    : 59 61
-                    : 29 41
/                    : 27
:                    : 15
;                    : 3 4 5 18 42 43 44 45 46
=                    : 15 46
BREAK                : 5
CONTINUE             : 4
DIVIDEASSIGN         : 42
DOTDIVIDE            : 23
DOTMINUS             : 25
DOTPLUS              : 26
DOTTIMES             : 24
ELSE                 : 13
EQ                   : 51
EYE                  : 56
FLOATNUM             : 21
FOR                  : 15
GE                   : 52
GT                   : 54
ID                   : 15 17 20 47 49
IF                   : 12 13
INTNUM               : 16 22 56 57 58 61 62
LE                   : 53
LT                   : 55
MINUSASSIGN          : 44
NE                   : 50
ONES                 : 57
PLUSASSIGN           : 45
PRINT                : 18
RETURN               : 3
STRING               : 19
TIMESASSIGN          : 43
UMINUS               : 33
WHILE                : 14
ZEROS                : 58
[                    : 39 47 59 60
]                    : 39 47 59 60
error                : 
{                    : 11
}                    : 11

Nonterminals, with rules where they appear:

assign_expression    : 7 37
expression           : 3 23 23 24 24 25 25 26 26 27 27 28 28 29 29 30 30 31 32 33 41 42 43 44 45 46 50 50 51 51 52 52 53 53 54 54 55 55
for_instruction      : 8
id_int               : 15 15
id_ref               : 42 43 44 45 46
if_instruction       : 10
instruction          : 1 2 12 13 13 14 15
instructions         : 2 11 0
list_of_ints         : 47 59 60 61
matrix_functions     : 35
matrix_ref           : 34 48
print_instruction    : 6
relation_expression  : 12 13 14 36
unary_minus          : 40
value                : 18 38
vectors              : 39 59
while_instruction    : 9


state 0

    (0) S' -> . instructions
    (1) instructions -> . instruction
    (2) instructions -> . instructions instruction
    (3) instruction -> . RETURN expression ;
    (4) instruction -> . CONTINUE ;
    (5) instruction -> . BREAK ;
    (6) instruction -> . print_instruction
    (7) instruction -> . assign_expression
    (8) instruction -> . for_instruction
    (9) instruction -> . while_instruction
    (10) instruction -> . if_instruction
    (11) instruction -> . { instructions }
    (18) print_instruction -> . PRINT value ;
    (42) assign_expression -> . id_ref DIVIDEASSIGN expression ;
    (43) assign_expression -> . id_ref TIMESASSIGN expression ;
    (44) assign_expression -> . id_ref MINUSASSIGN expression ;
    (45) assign_expression -> . id_ref PLUSASSIGN expression ;
    (46) assign_expression -> . id_ref = expression ;
    (15) for_instruction -> . FOR ID = id_int : id_int instruction
    (14) while_instruction -> . WHILE ( relation_expression ) instruction
    (12) if_instruction -> . IF ( relation_expression ) instruction
    (13) if_instruction -> . IF ( relation_expression ) instruction ELSE instruction
    (48) id_ref -> . matrix_ref
    (49) id_ref -> . ID
    (47) matrix_ref -> . ID [ list_of_ints ]
    RETURN          shift and go to state 3
    CONTINUE        shift and go to state 4
    BREAK           shift and go to state 5
    {               shift and go to state 11
    PRINT           shift and go to state 12
    FOR             shift and go to state 14
    WHILE           shift and go to state 16
    IF              shift and go to state 17
    ID              shift and go to state 15

    instructions                   shift and go to state 1
    instruction                    shift and go to state 2
    print_instruction              shift and go to state 6
    assign_expression              shift and go to state 7
    for_instruction                shift and go to state 8
    while_instruction              shift and go to state 9
    if_instruction                 shift and go to state 10
    id_ref                         shift and go to state 13
    matrix_ref                     shift and go to state 18

state 1

    (0) S' -> instructions .
    (2) instructions -> instructions . instruction
    (3) instruction -> . RETURN expression ;
    (4) instruction -> . CONTINUE ;
    (5) instruction -> . BREAK ;
    (6) instruction -> . print_instruction
    (7) instruction -> . assign_expression
    (8) instruction -> . for_instruction
    (9) instruction -> . while_instruction
    (10) instruction -> . if_instruction
    (11) instruction -> . { instructions }
    (18) print_instruction -> . PRINT value ;
    (42) assign_expression -> . id_ref DIVIDEASSIGN expression ;
    (43) assign_expression -> . id_ref TIMESASSIGN expression ;
    (44) assign_expression -> . id_ref MINUSASSIGN expression ;
    (45) assign_expression -> . id_ref PLUSASSIGN expression ;
    (46) assign_expression -> . id_ref = expression ;
    (15) for_instruction -> . FOR ID = id_int : id_int instruction
    (14) while_instruction -> . WHILE ( relation_expression ) instruction
    (12) if_instruction -> . IF ( relation_expression ) instruction
    (13) if_instruction -> . IF ( relation_expression ) instruction ELSE instruction
    (48) id_ref -> . matrix_ref
    (49) id_ref -> . ID
    (47) matrix_ref -> . ID [ list_of_ints ]
    RETURN          shift and go to state 3
    CONTINUE        shift and go to state 4
    BREAK           shift and go to state 5
    {               shift and go to state 11
    PRINT           shift and go to state 12
    FOR             shift and go to state 14
    WHILE           shift and go to state 16
    IF              shift and go to state 17
    ID              shift and go to state 15

    instruction                    shift and go to state 19
    print_instruction              shift and go to state 6
    assign_expression              shift and go to state 7
    for_instruction                shift and go to state 8
    while_instruction              shift and go to state 9
    if_instruction                 shift and go to state 10
    id_ref                         shift and go to state 13
    matrix_ref                     shift and go to state 18

state 2

    (1) instructions -> instruction .
    RETURN          reduce using rule 1 (instructions -> instruction .)
    CONTINUE        reduce using rule 1 (instructions -> instruction .)
    BREAK           reduce using rule 1 (instructions -> instruction .)
    {               reduce using rule 1 (instructions -> instruction .)
    PRINT           reduce using rule 1 (instructions -> instruction .)
    FOR             reduce using rule 1 (instructions -> instruction .)
    WHILE           reduce using rule 1 (instructions -> instruction .)
    IF              reduce using rule 1 (instructions -> instruction .)
    ID              reduce using rule 1 (instructions -> instruction .)
    $end            reduce using rule 1 (instructions -> instruction .)
    }               reduce using rule 1 (instructions -> instruction .)


state 3

    (3) instruction -> RETURN . expression ;
    (23) expression -> . expression DOTDIVIDE expression
    (24) expression -> . expression DOTTIMES expression
    (25) expression -> . expression DOTMINUS expression
    (26) expression -> . expression DOTPLUS expression
    (27) expression -> . expression / expression
    (28) expression -> . expression * expression
    (29) expression -> . expression - expression
    (30) expression -> . expression + expression
    (31) expression -> . expression '
    (32) expression -> . ( expression )
    (33) expression -> . UMINUS expression
    (34) expression -> . matrix_ref
    (35) expression -> . matrix_functions
    (36) expression -> . relation_expression
    (37) expression -> . assign_expression
    (38) expression -> . value
    (39) expression -> . [ vectors ]
    (40) expression -> . unary_minus
    (47) matrix_ref -> . ID [ list_of_ints ]
    (56) matrix_functions -> . EYE ( INTNUM )
    (57) matrix_functions -> . ONES ( INTNUM )
    (58) matrix_functions -> . ZEROS ( INTNUM )
    (50) relation_expression -> . expression NE expression
    (51) relation_expression -> . expression EQ expression
    (52) relation_expression -> . expression GE expression
    (53) relation_expression -> . expression LE expression
    (54) relation_expression -> . expression GT expression
    (55) relation_expression -> . expression LT expression
    (42) assign_expression -> . id_ref DIVIDEASSIGN expression ;
    (43) assign_expression -> . id_ref TIMESASSIGN expression ;
    (44) assign_expression -> . id_ref MINUSASSIGN expression ;
    (45) assign_expression -> . id_ref PLUSASSIGN expression ;
    (46) assign_expression -> . id_ref = expression ;
    (19) value -> . STRING
    (20) value -> . ID
    (21) value -> . FLOATNUM
    (22) value -> . INTNUM
    (41) unary_minus -> . - expression
    (48) id_ref -> . matrix_ref
    (49) id_ref -> . ID
    (               shift and go to state 22
    UMINUS          shift and go to state 23
    [               shift and go to state 29
    ID              shift and go to state 31
    EYE             shift and go to state 32
    ONES            shift and go to state 34
    ZEROS           shift and go to state 35
    STRING          shift and go to state 36
    FLOATNUM        shift and go to state 37
    INTNUM          shift and go to state 33
    -               shift and go to state 21

    expression                     shift and go to state 20
    matrix_ref                     shift and go to state 24
    matrix_functions               shift and go to state 25
    relation_expression            shift and go to state 26
    assign_expression              shift and go to state 27
    value                          shift and go to state 28
    unary_minus                    shift and go to state 30
    id_ref                         shift and go to state 13

state 4

    (4) instruction -> CONTINUE . ;
    ;               shift and go to state 38


state 5

    (5) instruction -> BREAK . ;
    ;               shift and go to state 39


state 6

    (6) instruction -> print_instruction .
    RETURN          reduce using rule 6 (instruction -> print_instruction .)
    CONTINUE        reduce using rule 6 (instruction -> print_instruction .)
    BREAK           reduce using rule 6 (instruction -> print_instruction .)
    {               reduce using rule 6 (instruction -> print_instruction .)
    PRINT           reduce using rule 6 (instruction -> print_instruction .)
    FOR             reduce using rule 6 (instruction -> print_instruction .)
    WHILE           reduce using rule 6 (instruction -> print_instruction .)
    IF              reduce using rule 6 (instruction -> print_instruction .)
    ID              reduce using rule 6 (instruction -> print_instruction .)
    $end            reduce using rule 6 (instruction -> print_instruction .)
    }               reduce using rule 6 (instruction -> print_instruction .)
    ELSE            reduce using rule 6 (instruction -> print_instruction .)


state 7

    (7) instruction -> assign_expression .
    RETURN          reduce using rule 7 (instruction -> assign_expression .)
    CONTINUE        reduce using rule 7 (instruction -> assign_expression .)
    BREAK           reduce using rule 7 (instruction -> assign_expression .)
    {               reduce using rule 7 (instruction -> assign_expression .)
    PRINT           reduce using rule 7 (instruction -> assign_expression .)
    FOR             reduce using rule 7 (instruction -> assign_expression .)
    WHILE           reduce using rule 7 (instruction -> assign_expression .)
    IF              reduce using rule 7 (instruction -> assign_expression .)
    ID              reduce using rule 7 (instruction -> assign_expression .)
    $end            reduce using rule 7 (instruction -> assign_expression .)
    }               reduce using rule 7 (instruction -> assign_expression .)
    ELSE            reduce using rule 7 (instruction -> assign_expression .)


state 8

    (8) instruction -> for_instruction .
    RETURN          reduce using rule 8 (instruction -> for_instruction .)
    CONTINUE        reduce using rule 8 (instruction -> for_instruction .)
    BREAK           reduce using rule 8 (instruction -> for_instruction .)
    {               reduce using rule 8 (instruction -> for_instruction .)
    PRINT           reduce using rule 8 (instruction -> for_instruction .)
    FOR             reduce using rule 8 (instruction -> for_instruction .)
    WHILE           reduce using rule 8 (instruction -> for_instruction .)
    IF              reduce using rule 8 (instruction -> for_instruction .)
    ID              reduce using rule 8 (instruction -> for_instruction .)
    $end            reduce using rule 8 (instruction -> for_instruction .)
    }               reduce using rule 8 (instruction -> for_instruction .)
    ELSE            reduce using rule 8 (instruction -> for_instruction .)


state 9

    (9) instruction -> while_instruction .
    RETURN          reduce using rule 9 (instruction -> while_instruction .)
    CONTINUE        reduce using rule 9 (instruction -> while_instruction .)
    BREAK           reduce using rule 9 (instruction -> while_instruction .)
    {               reduce using rule 9 (instruction -> while_instruction .)
    PRINT           reduce using rule 9 (instruction -> while_instruction .)
    FOR             reduce using rule 9 (instruction -> while_instruction .)
    WHILE           reduce using rule 9 (instruction -> while_instruction .)
    IF              reduce using rule 9 (instruction -> while_instruction .)
    ID              reduce using rule 9 (instruction -> while_instruction .)
    $end            reduce using rule 9 (instruction -> while_instruction .)
    }               reduce using rule 9 (instruction -> while_instruction .)
    ELSE            reduce using rule 9 (instruction -> while_instruction .)


state 10

    (10) instruction -> if_instruction .
    RETURN          reduce using rule 10 (instruction -> if_instruction .)
    CONTINUE        reduce using rule 10 (instruction -> if_instruction .)
    BREAK           reduce using rule 10 (instruction -> if_instruction .)
    {               reduce using rule 10 (instruction -> if_instruction .)
    PRINT           reduce using rule 10 (instruction -> if_instruction .)
    FOR             reduce using rule 10 (instruction -> if_instruction .)
    WHILE           reduce using rule 10 (instruction -> if_instruction .)
    IF              reduce using rule 10 (instruction -> if_instruction .)
    ID              reduce using rule 10 (instruction -> if_instruction .)
    $end            reduce using rule 10 (instruction -> if_instruction .)
    }               reduce using rule 10 (instruction -> if_instruction .)
    ELSE            reduce using rule 10 (instruction -> if_instruction .)


state 11

    (11) instruction -> { . instructions }
    (1) instructions -> . instruction
    (2) instructions -> . instructions instruction
    (3) instruction -> . RETURN expression ;
    (4) instruction -> . CONTINUE ;
    (5) instruction -> . BREAK ;
    (6) instruction -> . print_instruction
    (7) instruction -> . assign_expression
    (8) instruction -> . for_instruction
    (9) instruction -> . while_instruction
    (10) instruction -> . if_instruction
    (11) instruction -> . { instructions }
    (18) print_instruction -> . PRINT value ;
    (42) assign_expression -> . id_ref DIVIDEASSIGN expression ;
    (43) assign_expression -> . id_ref TIMESASSIGN expression ;
    (44) assign_expression -> . id_ref MINUSASSIGN expression ;
    (45) assign_expression -> . id_ref PLUSASSIGN expression ;
    (46) assign_expression -> . id_ref = expression ;
    (15) for_instruction -> . FOR ID = id_int : id_int instruction
    (14) while_instruction -> . WHILE ( relation_expression ) instruction
    (12) if_instruction -> . IF ( relation_expression ) instruction
    (13) if_instruction -> . IF ( relation_expression ) instruction ELSE instruction
    (48) id_ref -> . matrix_ref
    (49) id_ref -> . ID
    (47) matrix_ref -> . ID [ list_of_ints ]
    RETURN          shift and go to state 3
    CONTINUE        shift and go to state 4
    BREAK           shift and go to state 5
    {               shift and go to state 11
    PRINT           shift and go to state 12
    FOR             shift and go to state 14
    WHILE           shift and go to state 16
    IF              shift and go to state 17
    ID              shift and go to state 15

    instructions                   shift and go to state 40
    instruction                    shift and go to state 2
    print_instruction              shift and go to state 6
    assign_expression              shift and go to state 7
    for_instruction                shift and go to state 8
    while_instruction              shift and go to state 9
    if_instruction                 shift and go to state 10
    id_ref                         shift and go to state 13
    matrix_ref                     shift and go to state 18

state 12

    (18) print_instruction -> PRINT . value ;
    (19) value -> . STRING
    (20) value -> . ID
    (21) value -> . FLOATNUM
    (22) value -> . INTNUM
    STRING          shift and go to state 36
    ID              shift and go to state 42
    FLOATNUM        shift and go to state 37
    INTNUM          shift and go to state 33

    value                          shift and go to state 41

state 13

    (42) assign_expression -> id_ref . DIVIDEASSIGN expression ;
    (43) assign_expression -> id_ref . TIMESASSIGN expression ;
    (44) assign_expression -> id_ref . MINUSASSIGN expression ;
    (45) assign_expression -> id_ref . PLUSASSIGN expression ;
    (46) assign_expression -> id_ref . = expression ;
    DIVIDEASSIGN    shift and go to state 43
    TIMESASSIGN     shift and go to state 44
    MINUSASSIGN     shift and go to state 45
    PLUSASSIGN      shift and go to state 46
    =               shift and go to state 47


state 14

    (15) for_instruction -> FOR . ID = id_int : id_int instruction
    ID              shift and go to state 48


state 15

    (49) id_ref -> ID .
    (47) matrix_ref -> ID . [ list_of_ints ]
    DIVIDEASSIGN    reduce using rule 49 (id_ref -> ID .)
    TIMESASSIGN     reduce using rule 49 (id_ref -> ID .)
    MINUSASSIGN     reduce using rule 49 (id_ref -> ID .)
    PLUSASSIGN      reduce using rule 49 (id_ref -> ID .)
    =               reduce using rule 49 (id_ref -> ID .)
    [               shift and go to state 49


state 16

    (14) while_instruction -> WHILE . ( relation_expression ) instruction
    (               shift and go to state 50


state 17

    (12) if_instruction -> IF . ( relation_expression ) instruction
    (13) if_instruction -> IF . ( relation_expression ) instruction ELSE instruction
    (               shift and go to state 51


state 18

    (48) id_ref -> matrix_ref .
    DIVIDEASSIGN    reduce using rule 48 (id_ref -> matrix_ref .)
    TIMESASSIGN     reduce using rule 48 (id_ref -> matrix_ref .)
    MINUSASSIGN     reduce using rule 48 (id_ref -> matrix_ref .)
    PLUSASSIGN      reduce using rule 48 (id_ref -> matrix_ref .)
    =               reduce using rule 48 (id_ref -> matrix_ref .)


state 19

    (2) instructions -> instructions instruction .
    RETURN          reduce using rule 2 (instructions -> instructions instruction .)
    CONTINUE        reduce using rule 2 (instructions -> instructions instruction .)
    BREAK           reduce using rule 2 (instructions -> instructions instruction .)
    {               reduce using rule 2 (instructions -> instructions instruction .)
    PRINT           reduce using rule 2 (instructions -> instructions instruction .)
    FOR             reduce using rule 2 (instructions -> instructions instruction .)
    WHILE           reduce using rule 2 (instructions -> instructions instruction .)
    IF              reduce using rule 2 (instructions -> instructions instruction .)
    ID              reduce using rule 2 (instructions -> instructions instruction .)
    $end            reduce using rule 2 (instructions -> instructions instruction .)
    }               reduce using rule 2 (instructions -> instructions instruction .)


state 20

    (3) instruction -> RETURN expression . ;
    (23) expression -> expression . DOTDIVIDE expression
    (24) expression -> expression . DOTTIMES expression
    (25) expression -> expression . DOTMINUS expression
    (26) expression -> expression . DOTPLUS expression
    (27) expression -> expression . / expression
    (28) expression -> expression . * expression
    (29) expression -> expression . - expression
    (30) expression -> expression . + expression
    (31) expression -> expression . '
    (50) relation_expression -> expression . NE expression
    (51) relation_expression -> expression . EQ expression
    (52) relation_expression -> expression . GE expression
    (53) relation_expression -> expression . LE expression
    (54) relation_expression -> expression . GT expression
    (55) relation_expression -> expression . LT expression
    ;               shift and go to state 52
    DOTDIVIDE       shift and go to state 53
    DOTTIMES        shift and go to state 54
    DOTMINUS        shift and go to state 55
    DOTPLUS         shift and go to state 56
    /               shift and go to state 57
    *               shift and go to state 58
    -               shift and go to state 59
    +               shift and go to state 60
    '               shift and go to state 61
    NE              shift and go to state 62
    EQ              shift and go to state 63
    GE              shift and go to state 64
    LE              shift and go to state 65
    GT              shift and go to state 66
    LT              shift and go to state 67


state 21

    (41) unary_minus -> - . expression
    (23) expression -> . expression DOTDIVIDE expression
    (24) expression -> . expression DOTTIMES expression
    (25) expression -> . expression DOTMINUS expression
    (26) expression -> . expression DOTPLUS expression
    (27) expression -> . expression / expression
    (28) expression -> . expression * expression
    (29) expression -> . expression - expression
    (30) expression -> . expression + expression
    (31) expression -> . expression '
    (32) expression -> . ( expression )
    (33) expression -> . UMINUS expression
    (34) expression -> . matrix_ref
    (35) expression -> . matrix_functions
    (36) expression -> . relation_expression
    (37) expression -> . assign_expression
    (38) expression -> . value
    (39) expression -> . [ vectors ]
    (40) expression -> . unary_minus
    (47) matrix_ref -> . ID [ list_of_ints ]
    (56) matrix_functions -> . EYE ( INTNUM )
    (57) matrix_functions -> . ONES ( INTNUM )
    (58) matrix_functions -> . ZEROS ( INTNUM )
    (50) relation_expression -> . expression NE expression
    (51) relation_expression -> . expression EQ expression
    (52) relation_expression -> . expression GE expression
    (53) relation_expression -> . expression LE expression
    (54) relation_expression -> . expression GT expression
    (55) relation_expression -> . expression LT expression
    (42) assign_expression -> . id_ref DIVIDEASSIGN expression ;
    (43) assign_expression -> . id_ref TIMESASSIGN expression ;
    (44) assign_expression -> . id_ref MINUSASSIGN expression ;
    (45) assign_expression -> . id_ref PLUSASSIGN expression ;
    (46) assign_expression -> . id_ref = expression ;
    (19) value -> . STRING
    (20) value -> . ID
    (21) value -> . FLOATNUM
    (22) value -> . INTNUM
    (41) unary_minus -> . - expression
    (48) id_ref -> . matrix_ref
    (49) id_ref -> . ID
    (               shift and go to state 22
    UMINUS          shift and go to state 23
    [               shift and go to state 29
    ID              shift and go to state 31
    EYE             shift and go to state 32
    ONES            shift and go to state 34
    ZEROS           shift and go to state 35
    STRING          shift and go to state 36
    FLOATNUM        shift and go to state 37
    INTNUM          shift and go to state 33
    -               shift and go to state 21

    expression                     shift and go to state 68
    matrix_ref                     shift and go to state 24
    matrix_functions               shift and go to state 25
    relation_expression            shift and go to state 26
    assign_expression              shift and go to state 27
    value                          shift and go to state 28
    unary_minus                    shift and go to state 30
    id_ref                         shift and go to state 13

state 22

    (32) expression -> ( . expression )
    (23) expression -> . expression DOTDIVIDE expression
    (24) expression -> . expression DOTTIMES expression
    (25) expression -> . expression DOTMINUS expression
    (26) expression -> . expression DOTPLUS expression
    (27) expression -> . expression / expression
    (28) expression -> . expression * expression
    (29) expression -> . expression - expression
    (30) expression -> . expression + expression
    (31) expression -> . expression '
    (32) expression -> . ( expression )
    (33) expression -> . UMINUS expression
    (34) expression -> . matrix_ref
    (35) expression -> . matrix_functions
    (36) expression -> . relation_expression
    (37) expression -> . assign_expression
    (38) expression -> . value
    (39) expression -> . [ vectors ]
    (40) expression -> . unary_minus
    (47) matrix_ref -> . ID [ list_of_ints ]
    (56) matrix_functions -> . EYE ( INTNUM )
    (57) matrix_functions -> . ONES ( INTNUM )
    (58) matrix_functions -> . ZEROS ( INTNUM )
    (50) relation_expression -> . expression NE expression
    (51) relation_expression -> . expression EQ expression
    (52) relation_expression -> . expression GE expression
    (53) relation_expression -> . expression LE expression
    (54) relation_expression -> . expression GT expression
    (55) relation_expression -> . expression LT expression
    (42) assign_expression -> . id_ref DIVIDEASSIGN expression ;
    (43) assign_expression -> . id_ref TIMESASSIGN expression ;
    (44) assign_expression -> . id_ref MINUSASSIGN expression ;
    (45) assign_expression -> . id_ref PLUSASSIGN expression ;
    (46) assign_expression -> . id_ref = expression ;
    (19) value -> . STRING
    (20) value -> . ID
    (21) value -> . FLOATNUM
    (22) value -> . INTNUM
    (41) unary_minus -> . - expression
    (48) id_ref -> . matrix_ref
    (49) id_ref -> . ID
    (               shift and go to state 22
    UMINUS          shift and go to state 23
    [               shift and go to state 29
    ID              shift and go to state 31
    EYE             shift and go to state 32
    ONES            shift and go to state 34
    ZEROS           shift and go to state 35
    STRING          shift and go to state 36
    FLOATNUM        shift and go to state 37
    INTNUM          shift and go to state 33
    -               shift and go to state 21

    expression                     shift and go to state 69
    matrix_ref                     shift and go to state 24
    matrix_functions               shift and go to state 25
    relation_expression            shift and go to state 26
    assign_expression              shift and go to state 27
    value                          shift and go to state 28
    unary_minus                    shift and go to state 30
    id_ref                         shift and go to state 13

state 23

    (33) expression -> UMINUS . expression
    (23) expression -> . expression DOTDIVIDE expression
    (24) expression -> . expression DOTTIMES expression
    (25) expression -> . expression DOTMINUS expression
    (26) expression -> . expression DOTPLUS expression
    (27) expression -> . expression / expression
    (28) expression -> . expression * expression
    (29) expression -> . expression - expression
    (30) expression -> . expression + expression
    (31) expression -> . expression '
    (32) expression -> . ( expression )
    (33) expression -> . UMINUS expression
    (34) expression -> . matrix_ref
    (35) expression -> . matrix_functions
    (36) expression -> . relation_expression
    (37) expression -> . assign_expression
    (38) expression -> . value
    (39) expression -> . [ vectors ]
    (40) expression -> . unary_minus
    (47) matrix_ref -> . ID [ list_of_ints ]
    (56) matrix_functions -> . EYE ( INTNUM )
    (57) matrix_functions -> . ONES ( INTNUM )
    (58) matrix_functions -> . ZEROS ( INTNUM )
    (50) relation_expression -> . expression NE expression
    (51) relation_expression -> . expression EQ expression
    (52) relation_expression -> . expression GE expression
    (53) relation_expression -> . expression LE expression
    (54) relation_expression -> . expression GT expression
    (55) relation_expression -> . expression LT expression
    (42) assign_expression -> . id_ref DIVIDEASSIGN expression ;
    (43) assign_expression -> . id_ref TIMESASSIGN expression ;
    (44) assign_expression -> . id_ref MINUSASSIGN expression ;
    (45) assign_expression -> . id_ref PLUSASSIGN expression ;
    (46) assign_expression -> . id_ref = expression ;
    (19) value -> . STRING
    (20) value -> . ID
    (21) value -> . FLOATNUM
    (22) value -> . INTNUM
    (41) unary_minus -> . - expression
    (48) id_ref -> . matrix_ref
    (49) id_ref -> . ID
    (               shift and go to state 22
    UMINUS          shift and go to state 23
    [               shift and go to state 29
    ID              shift and go to state 31
    EYE             shift and go to state 32
    ONES            shift and go to state 34
    ZEROS           shift and go to state 35
    STRING          shift and go to state 36
    FLOATNUM        shift and go to state 37
    INTNUM          shift and go to state 33
    -               shift and go to state 21

    expression                     shift and go to state 70
    matrix_ref                     shift and go to state 24
    matrix_functions               shift and go to state 25
    relation_expression            shift and go to state 26
    assign_expression              shift and go to state 27
    value                          shift and go to state 28
    unary_minus                    shift and go to state 30
    id_ref                         shift and go to state 13

state 24

    (34) expression -> matrix_ref .
    (48) id_ref -> matrix_ref .
    ;               reduce using rule 34 (expression -> matrix_ref .)
    DOTDIVIDE       reduce using rule 34 (expression -> matrix_ref .)
    DOTTIMES        reduce using rule 34 (expression -> matrix_ref .)
    DOTMINUS        reduce using rule 34 (expression -> matrix_ref .)
    DOTPLUS         reduce using rule 34 (expression -> matrix_ref .)
    /               reduce using rule 34 (expression -> matrix_ref .)
    *               reduce using rule 34 (expression -> matrix_ref .)
    -               reduce using rule 34 (expression -> matrix_ref .)
    +               reduce using rule 34 (expression -> matrix_ref .)
    '               reduce using rule 34 (expression -> matrix_ref .)
    NE              reduce using rule 34 (expression -> matrix_ref .)
    EQ              reduce using rule 34 (expression -> matrix_ref .)
    GE              reduce using rule 34 (expression -> matrix_ref .)
    LE              reduce using rule 34 (expression -> matrix_ref .)
    GT              reduce using rule 34 (expression -> matrix_ref .)
    LT              reduce using rule 34 (expression -> matrix_ref .)
    )               reduce using rule 34 (expression -> matrix_ref .)
    DIVIDEASSIGN    reduce using rule 48 (id_ref -> matrix_ref .)
    TIMESASSIGN     reduce using rule 48 (id_ref -> matrix_ref .)
    MINUSASSIGN     reduce using rule 48 (id_ref -> matrix_ref .)
    PLUSASSIGN      reduce using rule 48 (id_ref -> matrix_ref .)
    =               reduce using rule 48 (id_ref -> matrix_ref .)


state 25

    (35) expression -> matrix_functions .
    ;               reduce using rule 35 (expression -> matrix_functions .)
    DOTDIVIDE       reduce using rule 35 (expression -> matrix_functions .)
    DOTTIMES        reduce using rule 35 (expression -> matrix_functions .)
    DOTMINUS        reduce using rule 35 (expression -> matrix_functions .)
    DOTPLUS         reduce using rule 35 (expression -> matrix_functions .)
    /               reduce using rule 35 (expression -> matrix_functions .)
    *               reduce using rule 35 (expression -> matrix_functions .)
    -               reduce using rule 35 (expression -> matrix_functions .)
    +               reduce using rule 35 (expression -> matrix_functions .)
    '               reduce using rule 35 (expression -> matrix_functions .)
    NE              reduce using rule 35 (expression -> matrix_functions .)
    EQ              reduce using rule 35 (expression -> matrix_functions .)
    GE              reduce using rule 35 (expression -> matrix_functions .)
    LE              reduce using rule 35 (expression -> matrix_functions .)
    GT              reduce using rule 35 (expression -> matrix_functions .)
    LT              reduce using rule 35 (expression -> matrix_functions .)
    )               reduce using rule 35 (expression -> matrix_functions .)


state 26

    (36) expression -> relation_expression .
    ;               reduce using rule 36 (expression -> relation_expression .)
    DOTDIVIDE       reduce using rule 36 (expression -> relation_expression .)
    DOTTIMES        reduce using rule 36 (expression -> relation_expression .)
    DOTMINUS        reduce using rule 36 (expression -> relation_expression .)
    DOTPLUS         reduce using rule 36 (expression -> relation_expression .)
    /               reduce using rule 36 (expression -> relation_expression .)
    *               reduce using rule 36 (expression -> relation_expression .)
    -               reduce using rule 36 (expression -> relation_expression .)
    +               reduce using rule 36 (expression -> relation_expression .)
    '               reduce using rule 36 (expression -> relation_expression .)
    NE              reduce using rule 36 (expression -> relation_expression .)
    EQ              reduce using rule 36 (expression -> relation_expression .)
    GE              reduce using rule 36 (expression -> relation_expression .)
    LE              reduce using rule 36 (expression -> relation_expression .)
    GT              reduce using rule 36 (expression -> relation_expression .)
    LT              reduce using rule 36 (expression -> relation_expression .)
    )               reduce using rule 36 (expression -> relation_expression .)


state 27

    (37) expression -> assign_expression .
    ;               reduce using rule 37 (expression -> assign_expression .)
    DOTDIVIDE       reduce using rule 37 (expression -> assign_expression .)
    DOTTIMES        reduce using rule 37 (expression -> assign_expression .)
    DOTMINUS        reduce using rule 37 (expression -> assign_expression .)
    DOTPLUS         reduce using rule 37 (expression -> assign_expression .)
    /               reduce using rule 37 (expression -> assign_expression .)
    *               reduce using rule 37 (expression -> assign_expression .)
    -               reduce using rule 37 (expression -> assign_expression .)
    +               reduce using rule 37 (expression -> assign_expression .)
    '               reduce using rule 37 (expression -> assign_expression .)
    NE              reduce using rule 37 (expression -> assign_expression .)
    EQ              reduce using rule 37 (expression -> assign_expression .)
    GE              reduce using rule 37 (expression -> assign_expression .)
    LE              reduce using rule 37 (expression -> assign_expression .)
    GT              reduce using rule 37 (expression -> assign_expression .)
    LT              reduce using rule 37 (expression -> assign_expression .)
    )               reduce using rule 37 (expression -> assign_expression .)


state 28

    (38) expression -> value .
    ;               reduce using rule 38 (expression -> value .)
    DOTDIVIDE       reduce using rule 38 (expression -> value .)
    DOTTIMES        reduce using rule 38 (expression -> value .)
    DOTMINUS        reduce using rule 38 (expression -> value .)
    DOTPLUS         reduce using rule 38 (expression -> value .)
    /               reduce using rule 38 (expression -> value .)
    *               reduce using rule 38 (expression -> value .)
    -               reduce using rule 38 (expression -> value .)
    +               reduce using rule 38 (expression -> value .)
    '               reduce using rule 38 (expression -> value .)
    NE              reduce using rule 38 (expression -> value .)
    EQ              reduce using rule 38 (expression -> value .)
    GE              reduce using rule 38 (expression -> value .)
    LE              reduce using rule 38 (expression -> value .)
    GT              reduce using rule 38 (expression -> value .)
    LT              reduce using rule 38 (expression -> value .)
    )               reduce using rule 38 (expression -> value .)


state 29

    (39) expression -> [ . vectors ]
    (59) vectors -> . vectors , [ list_of_ints ]
    (60) vectors -> . [ list_of_ints ]
    [               shift and go to state 71

    vectors                        shift and go to state 72

state 30

    (40) expression -> unary_minus .
    ;               reduce using rule 40 (expression -> unary_minus .)
    DOTDIVIDE       reduce using rule 40 (expression -> unary_minus .)
    DOTTIMES        reduce using rule 40 (expression -> unary_minus .)
    DOTMINUS        reduce using rule 40 (expression -> unary_minus .)
    DOTPLUS         reduce using rule 40 (expression -> unary_minus .)
    /               reduce using rule 40 (expression -> unary_minus .)
    *               reduce using rule 40 (expression -> unary_minus .)
    -               reduce using rule 40 (expression -> unary_minus .)
    +               reduce using rule 40 (expression -> unary_minus .)
    '               reduce using rule 40 (expression -> unary_minus .)
    NE              reduce using rule 40 (expression -> unary_minus .)
    EQ              reduce using rule 40 (expression -> unary_minus .)
    GE              reduce using rule 40 (expression -> unary_minus .)
    LE              reduce using rule 40 (expression -> unary_minus .)
    GT              reduce using rule 40 (expression -> unary_minus .)
    LT              reduce using rule 40 (expression -> unary_minus .)
    )               reduce using rule 40 (expression -> unary_minus .)


state 31

    (47) matrix_ref -> ID . [ list_of_ints ]
    (20) value -> ID .
    (49) id_ref -> ID .
    [               shift and go to state 49
    ;               reduce using rule 20 (value -> ID .)
    DOTDIVIDE       reduce using rule 20 (value -> ID .)
    DOTTIMES        reduce using rule 20 (value -> ID .)
    DOTMINUS        reduce using rule 20 (value -> ID .)
    DOTPLUS         reduce using rule 20 (value -> ID .)
    /               reduce using rule 20 (value -> ID .)
    *               reduce using rule 20 (value -> ID .)
    -               reduce using rule 20 (value -> ID .)
    +               reduce using rule 20 (value -> ID .)
    '               reduce using rule 20 (value -> ID .)
    NE              reduce using rule 20 (value -> ID .)
    EQ              reduce using rule 20 (value -> ID .)
    GE              reduce using rule 20 (value -> ID .)
    LE              reduce using rule 20 (value -> ID .)
    GT              reduce using rule 20 (value -> ID .)
    LT              reduce using rule 20 (value -> ID .)
    )               reduce using rule 20 (value -> ID .)
    DIVIDEASSIGN    reduce using rule 49 (id_ref -> ID .)
    TIMESASSIGN     reduce using rule 49 (id_ref -> ID .)
    MINUSASSIGN     reduce using rule 49 (id_ref -> ID .)
    PLUSASSIGN      reduce using rule 49 (id_ref -> ID .)
    =               reduce using rule 49 (id_ref -> ID .)


state 32

    (56) matrix_functions -> EYE . ( INTNUM )
    (               shift and go to state 73


state 33

    (22) value -> INTNUM .
    ;               reduce using rule 22 (value -> INTNUM .)
    DOTDIVIDE       reduce using rule 22 (value -> INTNUM .)
    DOTTIMES        reduce using rule 22 (value -> INTNUM .)
    DOTMINUS        reduce using rule 22 (value -> INTNUM .)
    DOTPLUS         reduce using rule 22 (value -> INTNUM .)
    /               reduce using rule 22 (value -> INTNUM .)
    *               reduce using rule 22 (value -> INTNUM .)
    -               reduce using rule 22 (value -> INTNUM .)
    +               reduce using rule 22 (value -> INTNUM .)
    '               reduce using rule 22 (value -> INTNUM .)
    NE              reduce using rule 22 (value -> INTNUM .)
    EQ              reduce using rule 22 (value -> INTNUM .)
    GE              reduce using rule 22 (value -> INTNUM .)
    LE              reduce using rule 22 (value -> INTNUM .)
    GT              reduce using rule 22 (value -> INTNUM .)
    LT              reduce using rule 22 (value -> INTNUM .)
    )               reduce using rule 22 (value -> INTNUM .)


state 34

    (57) matrix_functions -> ONES . ( INTNUM )
    (               shift and go to state 74


state 35

    (58) matrix_functions -> ZEROS . ( INTNUM )
    (               shift and go to state 75


state 36

    (19) value -> STRING .
    ;               reduce using rule 19 (value -> STRING .)
    DOTDIVIDE       reduce using rule 19 (value -> STRING .)
    DOTTIMES        reduce using rule 19 (value -> STRING .)
    DOTMINUS        reduce using rule 19 (value -> STRING .)
    DOTPLUS         reduce using rule 19 (value -> STRING .)
    /               reduce using rule 19 (value -> STRING .)
    *               reduce using rule 19 (value -> STRING .)
    -               reduce using rule 19 (value -> STRING .)
    +               reduce using rule 19 (value -> STRING .)
    '               reduce using rule 19 (value -> STRING .)
    NE              reduce using rule 19 (value -> STRING .)
    EQ              reduce using rule 19 (value -> STRING .)
    GE              reduce using rule 19 (value -> STRING .)
    LE              reduce using rule 19 (value -> STRING .)
    GT              reduce using rule 19 (value -> STRING .)
    LT              reduce using rule 19 (value -> STRING .)
    )               reduce using rule 19 (value -> STRING .)


state 37

    (21) value -> FLOATNUM .
    ;               reduce using rule 21 (value -> FLOATNUM .)
    DOTDIVIDE       reduce using rule 21 (value -> FLOATNUM .)
    DOTTIMES        reduce using rule 21 (value -> FLOATNUM .)
    DOTMINUS        reduce using rule 21 (value -> FLOATNUM .)
    DOTPLUS         reduce using rule 21 (value -> FLOATNUM .)
    /               reduce using rule 21 (value -> FLOATNUM .)
    *               reduce using rule 21 (value -> FLOATNUM .)
    -               reduce using rule 21 (value -> FLOATNUM .)
    +               reduce using rule 21 (value -> FLOATNUM .)
    '               reduce using rule 21 (value -> FLOATNUM .)
    NE              reduce using rule 21 (value -> FLOATNUM .)
    EQ              reduce using rule 21 (value -> FLOATNUM .)
    GE              reduce using rule 21 (value -> FLOATNUM .)
    LE              reduce using rule 21 (value -> FLOATNUM .)
    GT              reduce using rule 21 (value -> FLOATNUM .)
    LT              reduce using rule 21 (value -> FLOATNUM .)
    )               reduce using rule 21 (value -> FLOATNUM .)


state 38

    (4) instruction -> CONTINUE ; .
    RETURN          reduce using rule 4 (instruction -> CONTINUE ; .)
    CONTINUE        reduce using rule 4 (instruction -> CONTINUE ; .)
    BREAK           reduce using rule 4 (instruction -> CONTINUE ; .)
    {               reduce using rule 4 (instruction -> CONTINUE ; .)
    PRINT           reduce using rule 4 (instruction -> CONTINUE ; .)
    FOR             reduce using rule 4 (instruction -> CONTINUE ; .)
    WHILE           reduce using rule 4 (instruction -> CONTINUE ; .)
    IF              reduce using rule 4 (instruction -> CONTINUE ; .)
    ID              reduce using rule 4 (instruction -> CONTINUE ; .)
    $end            reduce using rule 4 (instruction -> CONTINUE ; .)
    }               reduce using rule 4 (instruction -> CONTINUE ; .)
    ELSE            reduce using rule 4 (instruction -> CONTINUE ; .)


state 39

    (5) instruction -> BREAK ; .
    RETURN          reduce using rule 5 (instruction -> BREAK ; .)
    CONTINUE        reduce using rule 5 (instruction -> BREAK ; .)
    BREAK           reduce using rule 5 (instruction -> BREAK ; .)
    {               reduce using rule 5 (instruction -> BREAK ; .)
    PRINT           reduce using rule 5 (instruction -> BREAK ; .)
    FOR             reduce using rule 5 (instruction -> BREAK ; .)
    WHILE           reduce using rule 5 (instruction -> BREAK ; .)
    IF              reduce using rule 5 (instruction -> BREAK ; .)
    ID              reduce using rule 5 (instruction -> BREAK ; .)
    $end            reduce using rule 5 (instruction -> BREAK ; .)
    }               reduce using rule 5 (instruction -> BREAK ; .)
    ELSE            reduce using rule 5 (instruction -> BREAK ; .)


state 40

    (11) instruction -> { instructions . }
    (2) instructions -> instructions . instruction
    (3) instruction -> . RETURN expression ;
    (4) instruction -> . CONTINUE ;
    (5) instruction -> . BREAK ;
    (6) instruction -> . print_instruction
    (7) instruction -> . assign_expression
    (8) instruction -> . for_instruction
    (9) instruction -> . while_instruction
    (10) instruction -> . if_instruction
    (11) instruction -> . { instructions }
    (18) print_instruction -> . PRINT value ;
    (42) assign_expression -> . id_ref DIVIDEASSIGN expression ;
    (43) assign_expression -> . id_ref TIMESASSIGN expression ;
    (44) assign_expression -> . id_ref MINUSASSIGN expression ;
    (45) assign_expression -> . id_ref PLUSASSIGN expression ;
    (46) assign_expression -> . id_ref = expression ;
    (15) for_instruction -> . FOR ID = id_int : id_int instruction
    (14) while_instruction -> . WHILE ( relation_expression ) instruction
    (12) if_instruction -> . IF ( relation_expression ) instruction
    (13) if_instruction -> . IF ( relation_expression ) instruction ELSE instruction
    (48) id_ref -> . matrix_ref
    (49) id_ref -> . ID
    (47) matrix_ref -> . ID [ list_of_ints ]
    }               shift and go to state 76
    RETURN          shift and go to state 3
    CONTINUE        shift and go to state 4
    BREAK           shift and go to state 5
    {               shift and go to state 11
    PRINT           shift and go to state 12
    FOR             shift and go to state 14
    WHILE           shift and go to state 16
    IF              shift and go to state 17
    ID              shift and go to state 15

    instruction                    shift and go to state 19
    print_instruction              shift and go to state 6
    assign_expression              shift and go to state 7
    for_instruction                shift and go to state 8
    while_instruction              shift and go to state 9
    if_instruction                 shift and go to state 10
    id_ref                         shift and go to state 13
    matrix_ref                     shift and go to state 18

state 41

    (18) print_instruction -> PRINT value . ;
    ;               shift and go to state 77


state 42

    (20) value -> ID .
    ;               reduce using rule 20 (value -> ID .)


state 43

    (42) assign_expression -> id_ref DIVIDEASSIGN . expression ;
    (23) expression -> . expression DOTDIVIDE expression
    (24) expression -> . expression DOTTIMES expression
    (25) expression -> . expression DOTMINUS expression
    (26) expression -> . expression DOTPLUS expression
    (27) expression -> . expression / expression
    (28) expression -> . expression * expression
    (29) expression -> . expression - expression
    (30) expression -> . expression + expression
    (31) expression -> . expression '
    (32) expression -> . ( expression )
    (33) expression -> . UMINUS expression
    (34) expression -> . matrix_ref
    (35) expression -> . matrix_functions
    (36) expression -> . relation_expression
    (37) expression -> . assign_expression
    (38) expression -> . value
    (39) expression -> . [ vectors ]
    (40) expression -> . unary_minus
    (47) matrix_ref -> . ID [ list_of_ints ]
    (56) matrix_functions -> . EYE ( INTNUM )
    (57) matrix_functions -> . ONES ( INTNUM )
    (58) matrix_functions -> . ZEROS ( INTNUM )
    (50) relation_expression -> . expression NE expression
    (51) relation_expression -> . expression EQ expression
    (52) relation_expression -> . expression GE expression
    (53) relation_expression -> . expression LE expression
    (54) relation_expression -> . expression GT expression
    (55) relation_expression -> . expression LT expression
    (42) assign_expression -> . id_ref DIVIDEASSIGN expression ;
    (43) assign_expression -> . id_ref TIMESASSIGN expression ;
    (44) assign_expression -> . id_ref MINUSASSIGN expression ;
    (45) assign_expression -> . id_ref PLUSASSIGN expression ;
    (46) assign_expression -> . id_ref = expression ;
    (19) value -> . STRING
    (20) value -> . ID
    (21) value -> . FLOATNUM
    (22) value -> . INTNUM
    (41) unary_minus -> . - expression
    (48) id_ref -> . matrix_ref
    (49) id_ref -> . ID
    (               shift and go to state 22
    UMINUS          shift and go to state 23
    [               shift and go to state 29
    ID              shift and go to state 31
    EYE             shift and go to state 32
    ONES            shift and go to state 34
    ZEROS           shift and go to state 35
    STRING          shift and go to state 36
    FLOATNUM        shift and go to state 37
    INTNUM          shift and go to state 33
    -               shift and go to state 21

    id_ref                         shift and go to state 13
    expression                     shift and go to state 78
    matrix_ref                     shift and go to state 24
    matrix_functions               shift and go to state 25
    relation_expression            shift and go to state 26
    assign_expression              shift and go to state 27
    value                          shift and go to state 28
    unary_minus                    shift and go to state 30

state 44

    (43) assign_expression -> id_ref TIMESASSIGN . expression ;
    (23) expression -> . expression DOTDIVIDE expression
    (24) expression -> . expression DOTTIMES expression
    (25) expression -> . expression DOTMINUS expression
    (26) expression -> . expression DOTPLUS expression
    (27) expression -> . expression / expression
    (28) expression -> . expression * expression
    (29) expression -> . expression - expression
    (30) expression -> . expression + expression
    (31) expression -> . expression '
    (32) expression -> . ( expression )
    (33) expression -> . UMINUS expression
    (34) expression -> . matrix_ref
    (35) expression -> . matrix_functions
    (36) expression -> . relation_expression
    (37) expression -> . assign_expression
    (38) expression -> . value
    (39) expression -> . [ vectors ]
    (40) expression -> . unary_minus
    (47) matrix_ref -> . ID [ list_of_ints ]
    (56) matrix_functions -> . EYE ( INTNUM )
    (57) matrix_functions -> . ONES ( INTNUM )
    (58) matrix_functions -> . ZEROS ( INTNUM )
    (50) relation_expression -> . expression NE expression
    (51) relation_expression -> . expression EQ expression
    (52) relation_expression -> . expression GE expression
    (53) relation_expression -> . expression LE expression
    (54) relation_expression -> . expression GT expression
    (55) relation_expression -> . expression LT expression
    (42) assign_expression -> . id_ref DIVIDEASSIGN expression ;
    (43) assign_expression -> . id_ref TIMESASSIGN expression ;
    (44) assign_expression -> . id_ref MINUSASSIGN expression ;
    (45) assign_expression -> . id_ref PLUSASSIGN expression ;
    (46) assign_expression -> . id_ref = expression ;
    (19) value -> . STRING
    (20) value -> . ID
    (21) value -> . FLOATNUM
    (22) value -> . INTNUM
    (41) unary_minus -> . - expression
    (48) id_ref -> . matrix_ref
    (49) id_ref -> . ID
    (               shift and go to state 22
    UMINUS          shift and go to state 23
    [               shift and go to state 29
    ID              shift and go to state 31
    EYE             shift and go to state 32
    ONES            shift and go to state 34
    ZEROS           shift and go to state 35
    STRING          shift and go to state 36
    FLOATNUM        shift and go to state 37
    INTNUM          shift and go to state 33
    -               shift and go to state 21

    id_ref                         shift and go to state 13
    expression                     shift and go to state 79
    matrix_ref                     shift and go to state 24
    matrix_functions               shift and go to state 25
    relation_expression            shift and go to state 26
    assign_expression              shift and go to state 27
    value                          shift and go to state 28
    unary_minus                    shift and go to state 30

state 45

    (44) assign_expression -> id_ref MINUSASSIGN . expression ;
    (23) expression -> . expression DOTDIVIDE expression
    (24) expression -> . expression DOTTIMES expression
    (25) expression -> . expression DOTMINUS expression
    (26) expression -> . expression DOTPLUS expression
    (27) expression -> . expression / expression
    (28) expression -> . expression * expression
    (29) expression -> . expression - expression
    (30) expression -> . expression + expression
    (31) expression -> . expression '
    (32) expression -> . ( expression )
    (33) expression -> . UMINUS expression
    (34) expression -> . matrix_ref
    (35) expression -> . matrix_functions
    (36) expression -> . relation_expression
    (37) expression -> . assign_expression
    (38) expression -> . value
    (39) expression -> . [ vectors ]
    (40) expression -> . unary_minus
    (47) matrix_ref -> . ID [ list_of_ints ]
    (56) matrix_functions -> . EYE ( INTNUM )
    (57) matrix_functions -> . ONES ( INTNUM )
    (58) matrix_functions -> . ZEROS ( INTNUM )
    (50) relation_expression -> . expression NE expression
    (51) relation_expression -> . expression EQ expression
    (52) relation_expression -> . expression GE expression
    (53) relation_expression -> . expression LE expression
    (54) relation_expression -> . expression GT expression
    (55) relation_expression -> . expression LT expression
    (42) assign_expression -> . id_ref DIVIDEASSIGN expression ;
    (43) assign_expression -> . id_ref TIMESASSIGN expression ;
    (44) assign_expression -> . id_ref MINUSASSIGN expression ;
    (45) assign_expression -> . id_ref PLUSASSIGN expression ;
    (46) assign_expression -> . id_ref = expression ;
    (19) value -> . STRING
    (20) value -> . ID
    (21) value -> . FLOATNUM
    (22) value -> . INTNUM
    (41) unary_minus -> . - expression
    (48) id_ref -> . matrix_ref
    (49) id_ref -> . ID
    (               shift and go to state 22
    UMINUS          shift and go to state 23
    [               shift and go to state 29
    ID              shift and go to state 31
    EYE             shift and go to state 32
    ONES            shift and go to state 34
    ZEROS           shift and go to state 35
    STRING          shift and go to state 36
    FLOATNUM        shift and go to state 37
    INTNUM          shift and go to state 33
    -               shift and go to state 21

    id_ref                         shift and go to state 13
    expression                     shift and go to state 80
    matrix_ref                     shift and go to state 24
    matrix_functions               shift and go to state 25
    relation_expression            shift and go to state 26
    assign_expression              shift and go to state 27
    value                          shift and go to state 28
    unary_minus                    shift and go to state 30

state 46

    (45) assign_expression -> id_ref PLUSASSIGN . expression ;
    (23) expression -> . expression DOTDIVIDE expression
    (24) expression -> . expression DOTTIMES expression
    (25) expression -> . expression DOTMINUS expression
    (26) expression -> . expression DOTPLUS expression
    (27) expression -> . expression / expression
    (28) expression -> . expression * expression
    (29) expression -> . expression - expression
    (30) expression -> . expression + expression
    (31) expression -> . expression '
    (32) expression -> . ( expression )
    (33) expression -> . UMINUS expression
    (34) expression -> . matrix_ref
    (35) expression -> . matrix_functions
    (36) expression -> . relation_expression
    (37) expression -> . assign_expression
    (38) expression -> . value
    (39) expression -> . [ vectors ]
    (40) expression -> . unary_minus
    (47) matrix_ref -> . ID [ list_of_ints ]
    (56) matrix_functions -> . EYE ( INTNUM )
    (57) matrix_functions -> . ONES ( INTNUM )
    (58) matrix_functions -> . ZEROS ( INTNUM )
    (50) relation_expression -> . expression NE expression
    (51) relation_expression -> . expression EQ expression
    (52) relation_expression -> . expression GE expression
    (53) relation_expression -> . expression LE expression
    (54) relation_expression -> . expression GT expression
    (55) relation_expression -> . expression LT expression
    (42) assign_expression -> . id_ref DIVIDEASSIGN expression ;
    (43) assign_expression -> . id_ref TIMESASSIGN expression ;
    (44) assign_expression -> . id_ref MINUSASSIGN expression ;
    (45) assign_expression -> . id_ref PLUSASSIGN expression ;
    (46) assign_expression -> . id_ref = expression ;
    (19) value -> . STRING
    (20) value -> . ID
    (21) value -> . FLOATNUM
    (22) value -> . INTNUM
    (41) unary_minus -> . - expression
    (48) id_ref -> . matrix_ref
    (49) id_ref -> . ID
    (               shift and go to state 22
    UMINUS          shift and go to state 23
    [               shift and go to state 29
    ID              shift and go to state 31
    EYE             shift and go to state 32
    ONES            shift and go to state 34
    ZEROS           shift and go to state 35
    STRING          shift and go to state 36
    FLOATNUM        shift and go to state 37
    INTNUM          shift and go to state 33
    -               shift and go to state 21

    id_ref                         shift and go to state 13
    expression                     shift and go to state 81
    matrix_ref                     shift and go to state 24
    matrix_functions               shift and go to state 25
    relation_expression            shift and go to state 26
    assign_expression              shift and go to state 27
    value                          shift and go to state 28
    unary_minus                    shift and go to state 30

state 47

    (46) assign_expression -> id_ref = . expression ;
    (23) expression -> . expression DOTDIVIDE expression
    (24) expression -> . expression DOTTIMES expression
    (25) expression -> . expression DOTMINUS expression
    (26) expression -> . expression DOTPLUS expression
    (27) expression -> . expression / expression
    (28) expression -> . expression * expression
    (29) expression -> . expression - expression
    (30) expression -> . expression + expression
    (31) expression -> . expression '
    (32) expression -> . ( expression )
    (33) expression -> . UMINUS expression
    (34) expression -> . matrix_ref
    (35) expression -> . matrix_functions
    (36) expression -> . relation_expression
    (37) expression -> . assign_expression
    (38) expression -> . value
    (39) expression -> . [ vectors ]
    (40) expression -> . unary_minus
    (47) matrix_ref -> . ID [ list_of_ints ]
    (56) matrix_functions -> . EYE ( INTNUM )
    (57) matrix_functions -> . ONES ( INTNUM )
    (58) matrix_functions -> . ZEROS ( INTNUM )
    (50) relation_expression -> . expression NE expression
    (51) relation_expression -> . expression EQ expression
    (52) relation_expression -> . expression GE expression
    (53) relation_expression -> . expression LE expression
    (54) relation_expression -> . expression GT expression
    (55) relation_expression -> . expression LT expression
    (42) assign_expression -> . id_ref DIVIDEASSIGN expression ;
    (43) assign_expression -> . id_ref TIMESASSIGN expression ;
    (44) assign_expression -> . id_ref MINUSASSIGN expression ;
    (45) assign_expression -> . id_ref PLUSASSIGN expression ;
    (46) assign_expression -> . id_ref = expression ;
    (19) value -> . STRING
    (20) value -> . ID
    (21) value -> . FLOATNUM
    (22) value -> . INTNUM
    (41) unary_minus -> . - expression
    (48) id_ref -> . matrix_ref
    (49) id_ref -> . ID
    (               shift and go to state 22
    UMINUS          shift and go to state 23
    [               shift and go to state 29
    ID              shift and go to state 31
    EYE             shift and go to state 32
    ONES            shift and go to state 34
    ZEROS           shift and go to state 35
    STRING          shift and go to state 36
    FLOATNUM        shift and go to state 37
    INTNUM          shift and go to state 33
    -               shift and go to state 21

    id_ref                         shift and go to state 13
    expression                     shift and go to state 82
    matrix_ref                     shift and go to state 24
    matrix_functions               shift and go to state 25
    relation_expression            shift and go to state 26
    assign_expression              shift and go to state 27
    value                          shift and go to state 28
    unary_minus                    shift and go to state 30

state 48

    (15) for_instruction -> FOR ID . = id_int : id_int instruction
    =               shift and go to state 83


state 49

    (47) matrix_ref -> ID [ . list_of_ints ]
    (61) list_of_ints -> . list_of_ints , INTNUM
    (62) list_of_ints -> . INTNUM
    INTNUM          shift and go to state 85

    list_of_ints                   shift and go to state 84

state 50

    (14) while_instruction -> WHILE ( . relation_expression ) instruction
    (50) relation_expression -> . expression NE expression
    (51) relation_expression -> . expression EQ expression
    (52) relation_expression -> . expression GE expression
    (53) relation_expression -> . expression LE expression
    (54) relation_expression -> . expression GT expression
    (55) relation_expression -> . expression LT expression
    (23) expression -> . expression DOTDIVIDE expression
    (24) expression -> . expression DOTTIMES expression
    (25) expression -> . expression DOTMINUS expression
    (26) expression -> . expression DOTPLUS expression
    (27) expression -> . expression / expression
    (28) expression -> . expression * expression
    (29) expression -> . expression - expression
    (30) expression -> . expression + expression
    (31) expression -> . expression '
    (32) expression -> . ( expression )
    (33) expression -> . UMINUS expression
    (34) expression -> . matrix_ref
    (35) expression -> . matrix_functions
    (36) expression -> . relation_expression
    (37) expression -> . assign_expression
    (38) expression -> . value
    (39) expression -> . [ vectors ]
    (40) expression -> . unary_minus
    (47) matrix_ref -> . ID [ list_of_ints ]
    (56) matrix_functions -> . EYE ( INTNUM )
    (57) matrix_functions -> . ONES ( INTNUM )
    (58) matrix_functions -> . ZEROS ( INTNUM )
    (42) assign_expression -> . id_ref DIVIDEASSIGN expression ;
    (43) assign_expression -> . id_ref TIMESASSIGN expression ;
    (44) assign_expression -> . id_ref MINUSASSIGN expression ;
    (45) assign_expression -> . id_ref PLUSASSIGN expression ;
    (46) assign_expression -> . id_ref = expression ;
    (19) value -> . STRING
    (20) value -> . ID
    (21) value -> . FLOATNUM
    (22) value -> . INTNUM
    (41) unary_minus -> . - expression
    (48) id_ref -> . matrix_ref
    (49) id_ref -> . ID
    (               shift and go to state 22
    UMINUS          shift and go to state 23
    [               shift and go to state 29
    ID              shift and go to state 31
    EYE             shift and go to state 32
    ONES            shift and go to state 34
    ZEROS           shift and go to state 35
    STRING          shift and go to state 36
    FLOATNUM        shift and go to state 37
    INTNUM          shift and go to state 33
    -               shift and go to state 21

    relation_expression            shift and go to state 86
    expression                     shift and go to state 87
    matrix_ref                     shift and go to state 24
    matrix_functions               shift and go to state 25
    assign_expression              shift and go to state 27
    value                          shift and go to state 28
    unary_minus                    shift and go to state 30
    id_ref                         shift and go to state 13

state 51

    (12) if_instruction -> IF ( . relation_expression ) instruction
    (13) if_instruction -> IF ( . relation_expression ) instruction ELSE instruction
    (50) relation_expression -> . expression NE expression
    (51) relation_expression -> . expression EQ expression
    (52) relation_expression -> . expression GE expression
    (53) relation_expression -> . expression LE expression
    (54) relation_expression -> . expression GT expression
    (55) relation_expression -> . expression LT expression
    (23) expression -> . expression DOTDIVIDE expression
    (24) expression -> . expression DOTTIMES expression
    (25) expression -> . expression DOTMINUS expression
    (26) expression -> . expression DOTPLUS expression
    (27) expression -> . expression / expression
    (28) expression -> . expression * expression
    (29) expression -> . expression - expression
    (30) expression -> . expression + expression
    (31) expression -> . expression '
    (32) expression -> . ( expression )
    (33) expression -> . UMINUS expression
    (34) expression -> . matrix_ref
    (35) expression -> . matrix_functions
    (36) expression -> . relation_expression
    (37) expression -> . assign_expression
    (38) expression -> . value
    (39) expression -> . [ vectors ]
    (40) expression -> . unary_minus
    (47) matrix_ref -> . ID [ list_of_ints ]
    (56) matrix_functions -> . EYE ( INTNUM )
    (57) matrix_functions -> . ONES ( INTNUM )
    (58) matrix_functions -> . ZEROS ( INTNUM )
    (42) assign_expression -> . id_ref DIVIDEASSIGN expression ;
    (43) assign_expression -> . id_ref TIMESASSIGN expression ;
    (44) assign_expression -> . id_ref MINUSASSIGN expression ;
    (45) assign_expression -> . id_ref PLUSASSIGN expression ;
    (46) assign_expression -> . id_ref = expression ;
    (19) value -> . STRING
    (20) value -> . ID
    (21) value -> . FLOATNUM
    (22) value -> . INTNUM
    (41) unary_minus -> . - expression
    (48) id_ref -> . matrix_ref
    (49) id_ref -> . ID
    (               shift and go to state 22
    UMINUS          shift and go to state 23
    [               shift and go to state 29
    ID              shift and go to state 31
    EYE             shift and go to state 32
    ONES            shift and go to state 34
    ZEROS           shift and go to state 35
    STRING          shift and go to state 36
    FLOATNUM        shift and go to state 37
    INTNUM          shift and go to state 33
    -               shift and go to state 21

    relation_expression            shift and go to state 88
    expression                     shift and go to state 87
    matrix_ref                     shift and go to state 24
    matrix_functions               shift and go to state 25
    assign_expression              shift and go to state 27
    value                          shift and go to state 28
    unary_minus                    shift and go to state 30
    id_ref                         shift and go to state 13

state 52

    (3) instruction -> RETURN expression ; .
    RETURN          reduce using rule 3 (instruction -> RETURN expression ; .)
    CONTINUE        reduce using rule 3 (instruction -> RETURN expression ; .)
    BREAK           reduce using rule 3 (instruction -> RETURN expression ; .)
    {               reduce using rule 3 (instruction -> RETURN expression ; .)
    PRINT           reduce using rule 3 (instruction -> RETURN expression ; .)
    FOR             reduce using rule 3 (instruction -> RETURN expression ; .)
    WHILE           reduce using rule 3 (instruction -> RETURN expression ; .)
    IF              reduce using rule 3 (instruction -> RETURN expression ; .)
    ID              reduce using rule 3 (instruction -> RETURN expression ; .)
    $end            reduce using rule 3 (instruction -> RETURN expression ; .)
    }               reduce using rule 3 (instruction -> RETURN expression ; .)
    ELSE            reduce using rule 3 (instruction -> RETURN expression ; .)


state 53

    (23) expression -> expression DOTDIVIDE . expression
    (23) expression -> . expression DOTDIVIDE expression
    (24) expression -> . expression DOTTIMES expression
    (25) expression -> . expression DOTMINUS expression
    (26) expression -> . expression DOTPLUS expression
    (27) expression -> . expression / expression
    (28) expression -> . expression * expression
    (29) expression -> . expression - expression
    (30) expression -> . expression + expression
    (31) expression -> . expression '
    (32) expression -> . ( expression )
    (33) expression -> . UMINUS expression
    (34) expression -> . matrix_ref
    (35) expression -> . matrix_functions
    (36) expression -> . relation_expression
    (37) expression -> . assign_expression
    (38) expression -> . value
    (39) expression -> . [ vectors ]
    (40) expression -> . unary_minus
    (47) matrix_ref -> . ID [ list_of_ints ]
    (56) matrix_functions -> . EYE ( INTNUM )
    (57) matrix_functions -> . ONES ( INTNUM )
    (58) matrix_functions -> . ZEROS ( INTNUM )
    (50) relation_expression -> . expression NE expression
    (51) relation_expression -> . expression EQ expression
    (52) relation_expression -> . expression GE expression
    (53) relation_expression -> . expression LE expression
    (54) relation_expression -> . expression GT expression
    (55) relation_expression -> . expression LT expression
    (42) assign_expression -> . id_ref DIVIDEASSIGN expression ;
    (43) assign_expression -> . id_ref TIMESASSIGN expression ;
    (44) assign_expression -> . id_ref MINUSASSIGN expression ;
    (45) assign_expression -> . id_ref PLUSASSIGN expression ;
    (46) assign_expression -> . id_ref = expression ;
    (19) value -> . STRING
    (20) value -> . ID
    (21) value -> . FLOATNUM
    (22) value -> . INTNUM
    (41) unary_minus -> . - expression
    (48) id_ref -> . matrix_ref
    (49) id_ref -> . ID
    (               shift and go to state 22
    UMINUS          shift and go to state 23
    [               shift and go to state 29
    ID              shift and go to state 31
    EYE             shift and go to state 32
    ONES            shift and go to state 34
    ZEROS           shift and go to state 35
    STRING          shift and go to state 36
    FLOATNUM        shift and go to state 37
    INTNUM          shift and go to state 33
    -               shift and go to state 21

    expression                     shift and go to state 89
    matrix_ref                     shift and go to state 24
    matrix_functions               shift and go to state 25
    relation_expression            shift and go to state 26
    assign_expression              shift and go to state 27
    value                          shift and go to state 28
    unary_minus                    shift and go to state 30
    id_ref                         shift and go to state 13

state 54

    (24) expression -> expression DOTTIMES . expression
    (23) expression -> . expression DOTDIVIDE expression
    (24) expression -> . expression DOTTIMES expression
    (25) expression -> . expression DOTMINUS expression
    (26) expression -> . expression DOTPLUS expression
    (27) expression -> . expression / expression
    (28) expression -> . expression * expression
    (29) expression -> . expression - expression
    (30) expression -> . expression + expression
    (31) expression -> . expression '
    (32) expression -> . ( expression )
    (33) expression -> . UMINUS expression
    (34) expression -> . matrix_ref
    (35) expression -> . matrix_functions
    (36) expression -> . relation_expression
    (37) expression -> . assign_expression
    (38) expression -> . value
    (39) expression -> . [ vectors ]
    (40) expression -> . unary_minus
    (47) matrix_ref -> . ID [ list_of_ints ]
    (56) matrix_functions -> . EYE ( INTNUM )
    (57) matrix_functions -> . ONES ( INTNUM )
    (58) matrix_functions -> . ZEROS ( INTNUM )
    (50) relation_expression -> . expression NE expression
    (51) relation_expression -> . expression EQ expression
    (52) relation_expression -> . expression GE expression
    (53) relation_expression -> . expression LE expression
    (54) relation_expression -> . expression GT expression
    (55) relation_expression -> . expression LT expression
    (42) assign_expression -> . id_ref DIVIDEASSIGN expression ;
    (43) assign_expression -> . id_ref TIMESASSIGN expression ;
    (44) assign_expression -> . id_ref MINUSASSIGN expression ;
    (45) assign_expression -> . id_ref PLUSASSIGN expression ;
    (46) assign_expression -> . id_ref = expression ;
    (19) value -> . STRING
    (20) value -> . ID
    (21) value -> . FLOATNUM
    (22) value -> . INTNUM
    (41) unary_minus -> . - expression
    (48) id_ref -> . matrix_ref
    (49) id_ref -> . ID
    (               shift and go to state 22
    UMINUS          shift and go to state 23
    [               shift and go to state 29
    ID              shift and go to state 31
    EYE             shift and go to state 32
    ONES            shift and go to state 34
    ZEROS           shift and go to state 35
    STRING          shift and go to state 36
    FLOATNUM        shift and go to state 37
    INTNUM          shift and go to state 33
    -               shift and go to state 21

    expression                     shift and go to state 90
    matrix_ref                     shift and go to state 24
    matrix_functions               shift and go to state 25
    relation_expression            shift and go to state 26
    assign_expression              shift and go to state 27
    value                          shift and go to state 28
    unary_minus                    shift and go to state 30
    id_ref                         shift and go to state 13

state 55

    (25) expression -> expression DOTMINUS . expression
    (23) expression -> . expression DOTDIVIDE expression
    (24) expression -> . expression DOTTIMES expression
    (25) expression -> . expression DOTMINUS expression
    (26) expression -> . expression DOTPLUS expression
    (27) expression -> . expression / expression
    (28) expression -> . expression * expression
    (29) expression -> . expression - expression
    (30) expression -> . expression + expression
    (31) expression -> . expression '
    (32) expression -> . ( expression )
    (33) expression -> . UMINUS expression
    (34) expression -> . matrix_ref
    (35) expression -> . matrix_functions
    (36) expression -> . relation_expression
    (37) expression -> . assign_expression
    (38) expression -> . value
    (39) expression -> . [ vectors ]
    (40) expression -> . unary_minus
    (47) matrix_ref -> . ID [ list_of_ints ]
    (56) matrix_functions -> . EYE ( INTNUM )
    (57) matrix_functions -> . ONES ( INTNUM )
    (58) matrix_functions -> . ZEROS ( INTNUM )
    (50) relation_expression -> . expression NE expression
    (51) relation_expression -> . expression EQ expression
    (52) relation_expression -> . expression GE expression
    (53) relation_expression -> . expression LE expression
    (54) relation_expression -> . expression GT expression
    (55) relation_expression -> . expression LT expression
    (42) assign_expression -> . id_ref DIVIDEASSIGN expression ;
    (43) assign_expression -> . id_ref TIMESASSIGN expression ;
    (44) assign_expression -> . id_ref MINUSASSIGN expression ;
    (45) assign_expression -> . id_ref PLUSASSIGN expression ;
    (46) assign_expression -> . id_ref = expression ;
    (19) value -> . STRING
    (20) value -> . ID
    (21) value -> . FLOATNUM
    (22) value -> . INTNUM
    (41) unary_minus -> . - expression
    (48) id_ref -> . matrix_ref
    (49) id_ref -> . ID
    (               shift and go to state 22
    UMINUS          shift and go to state 23
    [               shift and go to state 29
    ID              shift and go to state 31
    EYE             shift and go to state 32
    ONES            shift and go to state 34
    ZEROS           shift and go to state 35
    STRING          shift and go to state 36
    FLOATNUM        shift and go to state 37
    INTNUM          shift and go to state 33
    -               shift and go to state 21

    expression                     shift and go to state 91
    matrix_ref                     shift and go to state 24
    matrix_functions               shift and go to state 25
    relation_expression            shift and go to state 26
    assign_expression              shift and go to state 27
    value                          shift and go to state 28
    unary_minus                    shift and go to state 30
    id_ref                         shift and go to state 13

state 56

    (26) expression -> expression DOTPLUS . expression
    (23) expression -> . expression DOTDIVIDE expression
    (24) expression -> . expression DOTTIMES expression
    (25) expression -> . expression DOTMINUS expression
    (26) expression -> . expression DOTPLUS expression
    (27) expression -> . expression / expression
    (28) expression -> . expression * expression
    (29) expression -> . expression - expression
    (30) expression -> . expression + expression
    (31) expression -> . expression '
    (32) expression -> . ( expression )
    (33) expression -> . UMINUS expression
    (34) expression -> . matrix_ref
    (35) expression -> . matrix_functions
    (36) expression -> . relation_expression
    (37) expression -> . assign_expression
    (38) expression -> . value
    (39) expression -> . [ vectors ]
    (40) expression -> . unary_minus
    (47) matrix_ref -> . ID [ list_of_ints ]
    (56) matrix_functions -> . EYE ( INTNUM )
    (57) matrix_functions -> . ONES ( INTNUM )
    (58) matrix_functions -> . ZEROS ( INTNUM )
    (50) relation_expression -> . expression NE expression
    (51) relation_expression -> . expression EQ expression
    (52) relation_expression -> . expression GE expression
    (53) relation_expression -> . expression LE expression
    (54) relation_expression -> . expression GT expression
    (55) relation_expression -> . expression LT expression
    (42) assign_expression -> . id_ref DIVIDEASSIGN expression ;
    (43) assign_expression -> . id_ref TIMESASSIGN expression ;
    (44) assign_expression -> . id_ref MINUSASSIGN expression ;
    (45) assign_expression -> . id_ref PLUSASSIGN expression ;
    (46) assign_expression -> . id_ref = expression ;
    (19) value -> . STRING
    (20) value -> . ID
    (21) value -> . FLOATNUM
    (22) value -> . INTNUM
    (41) unary_minus -> . - expression
    (48) id_ref -> . matrix_ref
    (49) id_ref -> . ID
    (               shift and go to state 22
    UMINUS          shift and go to state 23
    [               shift and go to state 29
    ID              shift and go to state 31
    EYE             shift and go to state 32
    ONES            shift and go to state 34
    ZEROS           shift and go to state 35
    STRING          shift and go to state 36
    FLOATNUM        shift and go to state 37
    INTNUM          shift and go to state 33
    -               shift and go to state 21

    expression                     shift and go to state 92
    matrix_ref                     shift and go to state 24
    matrix_functions               shift and go to state 25
    relation_expression            shift and go to state 26
    assign_expression              shift and go to state 27
    value                          shift and go to state 28
    unary_minus                    shift and go to state 30
    id_ref                         shift and go to state 13

state 57

    (27) expression -> expression / . expression
    (23) expression -> . expression DOTDIVIDE expression
    (24) expression -> . expression DOTTIMES expression
    (25) expression -> . expression DOTMINUS expression
    (26) expression -> . expression DOTPLUS expression
    (27) expression -> . expression / expression
    (28) expression -> . expression * expression
    (29) expression -> . expression - expression
    (30) expression -> . expression + expression
    (31) expression -> . expression '
    (32) expression -> . ( expression )
    (33) expression -> . UMINUS expression
    (34) expression -> . matrix_ref
    (35) expression -> . matrix_functions
    (36) expression -> . relation_expression
    (37) expression -> . assign_expression
    (38) expression -> . value
    (39) expression -> . [ vectors ]
    (40) expression -> . unary_minus
    (47) matrix_ref -> . ID [ list_of_ints ]
    (56) matrix_functions -> . EYE ( INTNUM )
    (57) matrix_functions -> . ONES ( INTNUM )
    (58) matrix_functions -> . ZEROS ( INTNUM )
    (50) relation_expression -> . expression NE expression
    (51) relation_expression -> . expression EQ expression
    (52) relation_expression -> . expression GE expression
    (53) relation_expression -> . expression LE expression
    (54) relation_expression -> . expression GT expression
    (55) relation_expression -> . expression LT expression
    (42) assign_expression -> . id_ref DIVIDEASSIGN expression ;
    (43) assign_expression -> . id_ref TIMESASSIGN expression ;
    (44) assign_expression -> . id_ref MINUSASSIGN expression ;
    (45) assign_expression -> . id_ref PLUSASSIGN expression ;
    (46) assign_expression -> . id_ref = expression ;
    (19) value -> . STRING
    (20) value -> . ID
    (21) value -> . FLOATNUM
    (22) value -> . INTNUM
    (41) unary_minus -> . - expression
    (48) id_ref -> . matrix_ref
    (49) id_ref -> . ID
    (               shift and go to state 22
    UMINUS          shift and go to state 23
    [               shift and go to state 29
    ID              shift and go to state 31
    EYE             shift and go to state 32
    ONES            shift and go to state 34
    ZEROS           shift and go to state 35
    STRING          shift and go to state 36
    FLOATNUM        shift and go to state 37
    INTNUM          shift and go to state 33
    -               shift and go to state 21

    expression                     shift and go to state 93
    matrix_ref                     shift and go to state 24
    matrix_functions               shift and go to state 25
    relation_expression            shift and go to state 26
    assign_expression              shift and go to state 27
    value                          shift and go to state 28
    unary_minus                    shift and go to state 30
    id_ref                         shift and go to state 13

state 58

    (28) expression -> expression * . expression
    (23) expression -> . expression DOTDIVIDE expression
    (24) expression -> . expression DOTTIMES expression
    (25) expression -> . expression DOTMINUS expression
    (26) expression -> . expression DOTPLUS expression
    (27) expression -> . expression / expression
    (28) expression -> . expression * expression
    (29) expression -> . expression - expression
    (30) expression -> . expression + expression
    (31) expression -> . expression '
    (32) expression -> . ( expression )
    (33) expression -> . UMINUS expression
    (34) expression -> . matrix_ref
    (35) expression -> . matrix_functions
    (36) expression -> . relation_expression
    (37) expression -> . assign_expression
    (38) expression -> . value
    (39) expression -> . [ vectors ]
    (40) expression -> . unary_minus
    (47) matrix_ref -> . ID [ list_of_ints ]
    (56) matrix_functions -> . EYE ( INTNUM )
    (57) matrix_functions -> . ONES ( INTNUM )
    (58) matrix_functions -> . ZEROS ( INTNUM )
    (50) relation_expression -> . expression NE expression
    (51) relation_expression -> . expression EQ expression
    (52) relation_expression -> . expression GE expression
    (53) relation_expression -> . expression LE expression
    (54) relation_expression -> . expression GT expression
    (55) relation_expression -> . expression LT expression
    (42) assign_expression -> . id_ref DIVIDEASSIGN expression ;
    (43) assign_expression -> . id_ref TIMESASSIGN expression ;
    (44) assign_expression -> . id_ref MINUSASSIGN expression ;
    (45) assign_expression -> . id_ref PLUSASSIGN expression ;
    (46) assign_expression -> . id_ref = expression ;
    (19) value -> . STRING
    (20) value -> . ID
    (21) value -> . FLOATNUM
    (22) value -> . INTNUM
    (41) unary_minus -> . - expression
    (48) id_ref -> . matrix_ref
    (49) id_ref -> . ID
    (               shift and go to state 22
    UMINUS          shift and go to state 23
    [               shift and go to state 29
    ID              shift and go to state 31
    EYE             shift and go to state 32
    ONES            shift and go to state 34
    ZEROS           shift and go to state 35
    STRING          shift and go to state 36
    FLOATNUM        shift and go to state 37
    INTNUM          shift and go to state 33
    -               shift and go to state 21

    expression                     shift and go to state 94
    matrix_ref                     shift and go to state 24
    matrix_functions               shift and go to state 25
    relation_expression            shift and go to state 26
    assign_expression              shift and go to state 27
    value                          shift and go to state 28
    unary_minus                    shift and go to state 30
    id_ref                         shift and go to state 13

state 59

    (29) expression -> expression - . expression
    (23) expression -> . expression DOTDIVIDE expression
    (24) expression -> . expression DOTTIMES expression
    (25) expression -> . expression DOTMINUS expression
    (26) expression -> . expression DOTPLUS expression
    (27) expression -> . expression / expression
    (28) expression -> . expression * expression
    (29) expression -> . expression - expression
    (30) expression -> . expression + expression
    (31) expression -> . expression '
    (32) expression -> . ( expression )
    (33) expression -> . UMINUS expression
    (34) expression -> . matrix_ref
    (35) expression -> . matrix_functions
    (36) expression -> . relation_expression
    (37) expression -> . assign_expression
    (38) expression -> . value
    (39) expression -> . [ vectors ]
    (40) expression -> . unary_minus
    (47) matrix_ref -> . ID [ list_of_ints ]
    (56) matrix_functions -> . EYE ( INTNUM )
    (57) matrix_functions -> . ONES ( INTNUM )
    (58) matrix_functions -> . ZEROS ( INTNUM )
    (50) relation_expression -> . expression NE expression
    (51) relation_expression -> . expression EQ expression
    (52) relation_expression -> . expression GE expression
    (53) relation_expression -> . expression LE expression
    (54) relation_expression -> . expression GT expression
    (55) relation_expression -> . expression LT expression
    (42) assign_expression -> . id_ref DIVIDEASSIGN expression ;
    (43) assign_expression -> . id_ref TIMESASSIGN expression ;
    (44) assign_expression -> . id_ref MINUSASSIGN expression ;
    (45) assign_expression -> . id_ref PLUSASSIGN expression ;
    (46) assign_expression -> . id_ref = expression ;
    (19) value -> . STRING
    (20) value -> . ID
    (21) value -> . FLOATNUM
    (22) value -> . INTNUM
    (41) unary_minus -> . - expression
    (48) id_ref -> . matrix_ref
    (49) id_ref -> . ID
    (               shift and go to state 22
    UMINUS          shift and go to state 23
    [               shift and go to state 29
    ID              shift and go to state 31
    EYE             shift and go to state 32
    ONES            shift and go to state 34
    ZEROS           shift and go to state 35
    STRING          shift and go to state 36
    FLOATNUM        shift and go to state 37
    INTNUM          shift and go to state 33
    -               shift and go to state 21

    expression                     shift and go to state 95
    matrix_ref                     shift and go to state 24
    matrix_functions               shift and go to state 25
    relation_expression            shift and go to state 26
    assign_expression              shift and go to state 27
    value                          shift and go to state 28
    unary_minus                    shift and go to state 30
    id_ref                         shift and go to state 13

state 60

    (30) expression -> expression + . expression
    (23) expression -> . expression DOTDIVIDE expression
    (24) expression -> . expression DOTTIMES expression
    (25) expression -> . expression DOTMINUS expression
    (26) expression -> . expression DOTPLUS expression
    (27) expression -> . expression / expression
    (28) expression -> . expression * expression
    (29) expression -> . expression - expression
    (30) expression -> . expression + expression
    (31) expression -> . expression '
    (32) expression -> . ( expression )
    (33) expression -> . UMINUS expression
    (34) expression -> . matrix_ref
    (35) expression -> . matrix_functions
    (36) expression -> . relation_expression
    (37) expression -> . assign_expression
    (38) expression -> . value
    (39) expression -> . [ vectors ]
    (40) expression -> . unary_minus
    (47) matrix_ref -> . ID [ list_of_ints ]
    (56) matrix_functions -> . EYE ( INTNUM )
    (57) matrix_functions -> . ONES ( INTNUM )
    (58) matrix_functions -> . ZEROS ( INTNUM )
    (50) relation_expression -> . expression NE expression
    (51) relation_expression -> . expression EQ expression
    (52) relation_expression -> . expression GE expression
    (53) relation_expression -> . expression LE expression
    (54) relation_expression -> . expression GT expression
    (55) relation_expression -> . expression LT expression
    (42) assign_expression -> . id_ref DIVIDEASSIGN expression ;
    (43) assign_expression -> . id_ref TIMESASSIGN expression ;
    (44) assign_expression -> . id_ref MINUSASSIGN expression ;
    (45) assign_expression -> . id_ref PLUSASSIGN expression ;
    (46) assign_expression -> . id_ref = expression ;
    (19) value -> . STRING
    (20) value -> . ID
    (21) value -> . FLOATNUM
    (22) value -> . INTNUM
    (41) unary_minus -> . - expression
    (48) id_ref -> . matrix_ref
    (49) id_ref -> . ID
    (               shift and go to state 22
    UMINUS          shift and go to state 23
    [               shift and go to state 29
    ID              shift and go to state 31
    EYE             shift and go to state 32
    ONES            shift and go to state 34
    ZEROS           shift and go to state 35
    STRING          shift and go to state 36
    FLOATNUM        shift and go to state 37
    INTNUM          shift and go to state 33
    -               shift and go to state 21

    expression                     shift and go to state 96
    matrix_ref                     shift and go to state 24
    matrix_functions               shift and go to state 25
    relation_expression            shift and go to state 26
    assign_expression              shift and go to state 27
    value                          shift and go to state 28
    unary_minus                    shift and go to state 30
    id_ref                         shift and go to state 13

state 61

    (31) expression -> expression ' .
    ;               reduce using rule 31 (expression -> expression ' .)
    DOTDIVIDE       reduce using rule 31 (expression -> expression ' .)
    DOTTIMES        reduce using rule 31 (expression -> expression ' .)
    DOTMINUS        reduce using rule 31 (expression -> expression ' .)
    DOTPLUS         reduce using rule 31 (expression -> expression ' .)
    /               reduce using rule 31 (expression -> expression ' .)
    *               reduce using rule 31 (expression -> expression ' .)
    -               reduce using rule 31 (expression -> expression ' .)
    +               reduce using rule 31 (expression -> expression ' .)
    '               reduce using rule 31 (expression -> expression ' .)
    NE              reduce using rule 31 (expression -> expression ' .)
    EQ              reduce using rule 31 (expression -> expression ' .)
    GE              reduce using rule 31 (expression -> expression ' .)
    LE              reduce using rule 31 (expression -> expression ' .)
    GT              reduce using rule 31 (expression -> expression ' .)
    LT              reduce using rule 31 (expression -> expression ' .)
    )               reduce using rule 31 (expression -> expression ' .)


state 62

    (50) relation_expression -> expression NE . expression
    (23) expression -> . expression DOTDIVIDE expression
    (24) expression -> . expression DOTTIMES expression
    (25) expression -> . expression DOTMINUS expression
    (26) expression -> . expression DOTPLUS expression
    (27) expression -> . expression / expression
    (28) expression -> . expression * expression
    (29) expression -> . expression - expression
    (30) expression -> . expression + expression
    (31) expression -> . expression '
    (32) expression -> . ( expression )
    (33) expression -> . UMINUS expression
    (34) expression -> . matrix_ref
    (35) expression -> . matrix_functions
    (36) expression -> . relation_expression
    (37) expression -> . assign_expression
    (38) expression -> . value
    (39) expression -> . [ vectors ]
    (40) expression -> . unary_minus
    (47) matrix_ref -> . ID [ list_of_ints ]
    (56) matrix_functions -> . EYE ( INTNUM )
    (57) matrix_functions -> . ONES ( INTNUM )
    (58) matrix_functions -> . ZEROS ( INTNUM )
    (50) relation_expression -> . expression NE expression
    (51) relation_expression -> . expression EQ expression
    (52) relation_expression -> . expression GE expression
    (53) relation_expression -> . expression LE expression
    (54) relation_expression -> . expression GT expression
    (55) relation_expression -> . expression LT expression
    (42) assign_expression -> . id_ref DIVIDEASSIGN expression ;
    (43) assign_expression -> . id_ref TIMESASSIGN expression ;
    (44) assign_expression -> . id_ref MINUSASSIGN expression ;
    (45) assign_expression -> . id_ref PLUSASSIGN expression ;
    (46) assign_expression -> . id_ref = expression ;
    (19) value -> . STRING
    (20) value -> . ID
    (21) value -> . FLOATNUM
    (22) value -> . INTNUM
    (41) unary_minus -> . - expression
    (48) id_ref -> . matrix_ref
    (49) id_ref -> . ID
    (               shift and go to state 22
    UMINUS          shift and go to state 23
    [               shift and go to state 29
    ID              shift and go to state 31
    EYE             shift and go to state 32
    ONES            shift and go to state 34
    ZEROS           shift and go to state 35
    STRING          shift and go to state 36
    FLOATNUM        shift and go to state 37
    INTNUM          shift and go to state 33
    -               shift and go to state 21

    expression                     shift and go to state 97
    matrix_ref                     shift and go to state 24
    matrix_functions               shift and go to state 25
    relation_expression            shift and go to state 26
    assign_expression              shift and go to state 27
    value                          shift and go to state 28
    unary_minus                    shift and go to state 30
    id_ref                         shift and go to state 13

state 63

    (51) relation_expression -> expression EQ . expression
    (23) expression -> . expression DOTDIVIDE expression
    (24) expression -> . expression DOTTIMES expression
    (25) expression -> . expression DOTMINUS expression
    (26) expression -> . expression DOTPLUS expression
    (27) expression -> . expression / expression
    (28) expression -> . expression * expression
    (29) expression -> . expression - expression
    (30) expression -> . expression + expression
    (31) expression -> . expression '
    (32) expression -> . ( expression )
    (33) expression -> . UMINUS expression
    (34) expression -> . matrix_ref
    (35) expression -> . matrix_functions
    (36) expression -> . relation_expression
    (37) expression -> . assign_expression
    (38) expression -> . value
    (39) expression -> . [ vectors ]
    (40) expression -> . unary_minus
    (47) matrix_ref -> . ID [ list_of_ints ]
    (56) matrix_functions -> . EYE ( INTNUM )
    (57) matrix_functions -> . ONES ( INTNUM )
    (58) matrix_functions -> . ZEROS ( INTNUM )
    (50) relation_expression -> . expression NE expression
    (51) relation_expression -> . expression EQ expression
    (52) relation_expression -> . expression GE expression
    (53) relation_expression -> . expression LE expression
    (54) relation_expression -> . expression GT expression
    (55) relation_expression -> . expression LT expression
    (42) assign_expression -> . id_ref DIVIDEASSIGN expression ;
    (43) assign_expression -> . id_ref TIMESASSIGN expression ;
    (44) assign_expression -> . id_ref MINUSASSIGN expression ;
    (45) assign_expression -> . id_ref PLUSASSIGN expression ;
    (46) assign_expression -> . id_ref = expression ;
    (19) value -> . STRING
    (20) value -> . ID
    (21) value -> . FLOATNUM
    (22) value -> . INTNUM
    (41) unary_minus -> . - expression
    (48) id_ref -> . matrix_ref
    (49) id_ref -> . ID
    (               shift and go to state 22
    UMINUS          shift and go to state 23
    [               shift and go to state 29
    ID              shift and go to state 31
    EYE             shift and go to state 32
    ONES            shift and go to state 34
    ZEROS           shift and go to state 35
    STRING          shift and go to state 36
    FLOATNUM        shift and go to state 37
    INTNUM          shift and go to state 33
    -               shift and go to state 21

    expression                     shift and go to state 98
    matrix_ref                     shift and go to state 24
    matrix_functions               shift and go to state 25
    relation_expression            shift and go to state 26
    assign_expression              shift and go to state 27
    value                          shift and go to state 28
    unary_minus                    shift and go to state 30
    id_ref                         shift and go to state 13

state 64

    (52) relation_expression -> expression GE . expression
    (23) expression -> . expression DOTDIVIDE expression
    (24) expression -> . expression DOTTIMES expression
    (25) expression -> . expression DOTMINUS expression
    (26) expression -> . expression DOTPLUS expression
    (27) expression -> . expression / expression
    (28) expression -> . expression * expression
    (29) expression -> . expression - expression
    (30) expression -> . expression + expression
    (31) expression -> . expression '
    (32) expression -> . ( expression )
    (33) expression -> . UMINUS expression
    (34) expression -> . matrix_ref
    (35) expression -> . matrix_functions
    (36) expression -> . relation_expression
    (37) expression -> . assign_expression
    (38) expression -> . value
    (39) expression -> . [ vectors ]
    (40) expression -> . unary_minus
    (47) matrix_ref -> . ID [ list_of_ints ]
    (56) matrix_functions -> . EYE ( INTNUM )
    (57) matrix_functions -> . ONES ( INTNUM )
    (58) matrix_functions -> . ZEROS ( INTNUM )
    (50) relation_expression -> . expression NE expression
    (51) relation_expression -> . expression EQ expression
    (52) relation_expression -> . expression GE expression
    (53) relation_expression -> . expression LE expression
    (54) relation_expression -> . expression GT expression
    (55) relation_expression -> . expression LT expression
    (42) assign_expression -> . id_ref DIVIDEASSIGN expression ;
    (43) assign_expression -> . id_ref TIMESASSIGN expression ;
    (44) assign_expression -> . id_ref MINUSASSIGN expression ;
    (45) assign_expression -> . id_ref PLUSASSIGN expression ;
    (46) assign_expression -> . id_ref = expression ;
    (19) value -> . STRING
    (20) value -> . ID
    (21) value -> . FLOATNUM
    (22) value -> . INTNUM
    (41) unary_minus -> . - expression
    (48) id_ref -> . matrix_ref
    (49) id_ref -> . ID
    (               shift and go to state 22
    UMINUS          shift and go to state 23
    [               shift and go to state 29
    ID              shift and go to state 31
    EYE             shift and go to state 32
    ONES            shift and go to state 34
    ZEROS           shift and go to state 35
    STRING          shift and go to state 36
    FLOATNUM        shift and go to state 37
    INTNUM          shift and go to state 33
    -               shift and go to state 21

    expression                     shift and go to state 99
    matrix_ref                     shift and go to state 24
    matrix_functions               shift and go to state 25
    relation_expression            shift and go to state 26
    assign_expression              shift and go to state 27
    value                          shift and go to state 28
    unary_minus                    shift and go to state 30
    id_ref                         shift and go to state 13

state 65

    (53) relation_expression -> expression LE . expression
    (23) expression -> . expression DOTDIVIDE expression
    (24) expression -> . expression DOTTIMES expression
    (25) expression -> . expression DOTMINUS expression
    (26) expression -> . expression DOTPLUS expression
    (27) expression -> . expression / expression
    (28) expression -> . expression * expression
    (29) expression -> . expression - expression
    (30) expression -> . expression + expression
    (31) expression -> . expression '
    (32) expression -> . ( expression )
    (33) expression -> . UMINUS expression
    (34) expression -> . matrix_ref
    (35) expression -> . matrix_functions
    (36) expression -> . relation_expression
    (37) expression -> . assign_expression
    (38) expression -> . value
    (39) expression -> . [ vectors ]
    (40) expression -> . unary_minus
    (47) matrix_ref -> . ID [ list_of_ints ]
    (56) matrix_functions -> . EYE ( INTNUM )
    (57) matrix_functions -> . ONES ( INTNUM )
    (58) matrix_functions -> . ZEROS ( INTNUM )
    (50) relation_expression -> . expression NE expression
    (51) relation_expression -> . expression EQ expression
    (52) relation_expression -> . expression GE expression
    (53) relation_expression -> . expression LE expression
    (54) relation_expression -> . expression GT expression
    (55) relation_expression -> . expression LT expression
    (42) assign_expression -> . id_ref DIVIDEASSIGN expression ;
    (43) assign_expression -> . id_ref TIMESASSIGN expression ;
    (44) assign_expression -> . id_ref MINUSASSIGN expression ;
    (45) assign_expression -> . id_ref PLUSASSIGN expression ;
    (46) assign_expression -> . id_ref = expression ;
    (19) value -> . STRING
    (20) value -> . ID
    (21) value -> . FLOATNUM
    (22) value -> . INTNUM
    (41) unary_minus -> . - expression
    (48) id_ref -> . matrix_ref
    (49) id_ref -> . ID
    (               shift and go to state 22
    UMINUS          shift and go to state 23
    [               shift and go to state 29
    ID              shift and go to state 31
    EYE             shift and go to state 32
    ONES            shift and go to state 34
    ZEROS           shift and go to state 35
    STRING          shift and go to state 36
    FLOATNUM        shift and go to state 37
    INTNUM          shift and go to state 33
    -               shift and go to state 21

    expression                     shift and go to state 100
    matrix_ref                     shift and go to state 24
    matrix_functions               shift and go to state 25
    relation_expression            shift and go to state 26
    assign_expression              shift and go to state 27
    value                          shift and go to state 28
    unary_minus                    shift and go to state 30
    id_ref                         shift and go to state 13

state 66

    (54) relation_expression -> expression GT . expression
    (23) expression -> . expression DOTDIVIDE expression
    (24) expression -> . expression DOTTIMES expression
    (25) expression -> . expression DOTMINUS expression
    (26) expression -> . expression DOTPLUS expression
    (27) expression -> . expression / expression
    (28) expression -> . expression * expression
    (29) expression -> . expression - expression
    (30) expression -> . expression + expression
    (31) expression -> . expression '
    (32) expression -> . ( expression )
    (33) expression -> . UMINUS expression
    (34) expression -> . matrix_ref
    (35) expression -> . matrix_functions
    (36) expression -> . relation_expression
    (37) expression -> . assign_expression
    (38) expression -> . value
    (39) expression -> . [ vectors ]
    (40) expression -> . unary_minus
    (47) matrix_ref -> . ID [ list_of_ints ]
    (56) matrix_functions -> . EYE ( INTNUM )
    (57) matrix_functions -> . ONES ( INTNUM )
    (58) matrix_functions -> . ZEROS ( INTNUM )
    (50) relation_expression -> . expression NE expression
    (51) relation_expression -> . expression EQ expression
    (52) relation_expression -> . expression GE expression
    (53) relation_expression -> . expression LE expression
    (54) relation_expression -> . expression GT expression
    (55) relation_expression -> . expression LT expression
    (42) assign_expression -> . id_ref DIVIDEASSIGN expression ;
    (43) assign_expression -> . id_ref TIMESASSIGN expression ;
    (44) assign_expression -> . id_ref MINUSASSIGN expression ;
    (45) assign_expression -> . id_ref PLUSASSIGN expression ;
    (46) assign_expression -> . id_ref = expression ;
    (19) value -> . STRING
    (20) value -> . ID
    (21) value -> . FLOATNUM
    (22) value -> . INTNUM
    (41) unary_minus -> . - expression
    (48) id_ref -> . matrix_ref
    (49) id_ref -> . ID
    (               shift and go to state 22
    UMINUS          shift and go to state 23
    [               shift and go to state 29
    ID              shift and go to state 31
    EYE             shift and go to state 32
    ONES            shift and go to state 34
    ZEROS           shift and go to state 35
    STRING          shift and go to state 36
    FLOATNUM        shift and go to state 37
    INTNUM          shift and go to state 33
    -               shift and go to state 21

    expression                     shift and go to state 101
    matrix_ref                     shift and go to state 24
    matrix_functions               shift and go to state 25
    relation_expression            shift and go to state 26
    assign_expression              shift and go to state 27
    value                          shift and go to state 28
    unary_minus                    shift and go to state 30
    id_ref                         shift and go to state 13

state 67

    (55) relation_expression -> expression LT . expression
    (23) expression -> . expression DOTDIVIDE expression
    (24) expression -> . expression DOTTIMES expression
    (25) expression -> . expression DOTMINUS expression
    (26) expression -> . expression DOTPLUS expression
    (27) expression -> . expression / expression
    (28) expression -> . expression * expression
    (29) expression -> . expression - expression
    (30) expression -> . expression + expression
    (31) expression -> . expression '
    (32) expression -> . ( expression )
    (33) expression -> . UMINUS expression
    (34) expression -> . matrix_ref
    (35) expression -> . matrix_functions
    (36) expression -> . relation_expression
    (37) expression -> . assign_expression
    (38) expression -> . value
    (39) expression -> . [ vectors ]
    (40) expression -> . unary_minus
    (47) matrix_ref -> . ID [ list_of_ints ]
    (56) matrix_functions -> . EYE ( INTNUM )
    (57) matrix_functions -> . ONES ( INTNUM )
    (58) matrix_functions -> . ZEROS ( INTNUM )
    (50) relation_expression -> . expression NE expression
    (51) relation_expression -> . expression EQ expression
    (52) relation_expression -> . expression GE expression
    (53) relation_expression -> . expression LE expression
    (54) relation_expression -> . expression GT expression
    (55) relation_expression -> . expression LT expression
    (42) assign_expression -> . id_ref DIVIDEASSIGN expression ;
    (43) assign_expression -> . id_ref TIMESASSIGN expression ;
    (44) assign_expression -> . id_ref MINUSASSIGN expression ;
    (45) assign_expression -> . id_ref PLUSASSIGN expression ;
    (46) assign_expression -> . id_ref = expression ;
    (19) value -> . STRING
    (20) value -> . ID
    (21) value -> . FLOATNUM
    (22) value -> . INTNUM
    (41) unary_minus -> . - expression
    (48) id_ref -> . matrix_ref
    (49) id_ref -> . ID
    (               shift and go to state 22
    UMINUS          shift and go to state 23
    [               shift and go to state 29
    ID              shift and go to state 31
    EYE             shift and go to state 32
    ONES            shift and go to state 34
    ZEROS           shift and go to state 35
    STRING          shift and go to state 36
    FLOATNUM        shift and go to state 37
    INTNUM          shift and go to state 33
    -               shift and go to state 21

    expression                     shift and go to state 102
    matrix_ref                     shift and go to state 24
    matrix_functions               shift and go to state 25
    relation_expression            shift and go to state 26
    assign_expression              shift and go to state 27
    value                          shift and go to state 28
    unary_minus                    shift and go to state 30
    id_ref                         shift and go to state 13

state 68

    (41) unary_minus -> - expression .
    (23) expression -> expression . DOTDIVIDE expression
    (24) expression -> expression . DOTTIMES expression
    (25) expression -> expression . DOTMINUS expression
    (26) expression -> expression . DOTPLUS expression
    (27) expression -> expression . / expression
    (28) expression -> expression . * expression
    (29) expression -> expression . - expression
    (30) expression -> expression . + expression
    (31) expression -> expression . '
    (50) relation_expression -> expression . NE expression
    (51) relation_expression -> expression . EQ expression
    (52) relation_expression -> expression . GE expression
    (53) relation_expression -> expression . LE expression
    (54) relation_expression -> expression . GT expression
    (55) relation_expression -> expression . LT expression
    ;               reduce using rule 41 (unary_minus -> - expression .)
    DOTDIVIDE       reduce using rule 41 (unary_minus -> - expression .)
    DOTTIMES        reduce using rule 41 (unary_minus -> - expression .)
    DOTMINUS        reduce using rule 41 (unary_minus -> - expression .)
    DOTPLUS         reduce using rule 41 (unary_minus -> - expression .)
    /               reduce using rule 41 (unary_minus -> - expression .)
    *               reduce using rule 41 (unary_minus -> - expression .)
    -               reduce using rule 41 (unary_minus -> - expression .)
    +               reduce using rule 41 (unary_minus -> - expression .)
    '               reduce using rule 41 (unary_minus -> - expression .)
    NE              reduce using rule 41 (unary_minus -> - expression .)
    EQ              reduce using rule 41 (unary_minus -> - expression .)
    GE              reduce using rule 41 (unary_minus -> - expression .)
    LE              reduce using rule 41 (unary_minus -> - expression .)
    GT              reduce using rule 41 (unary_minus -> - expression .)
    LT              reduce using rule 41 (unary_minus -> - expression .)
    )               reduce using rule 41 (unary_minus -> - expression .)


state 69

    (32) expression -> ( expression . )
    (23) expression -> expression . DOTDIVIDE expression
    (24) expression -> expression . DOTTIMES expression
    (25) expression -> expression . DOTMINUS expression
    (26) expression -> expression . DOTPLUS expression
    (27) expression -> expression . / expression
    (28) expression -> expression . * expression
    (29) expression -> expression . - expression
    (30) expression -> expression . + expression
    (31) expression -> expression . '
    (50) relation_expression -> expression . NE expression
    (51) relation_expression -> expression . EQ expression
    (52) relation_expression -> expression . GE expression
    (53) relation_expression -> expression . LE expression
    (54) relation_expression -> expression . GT expression
    (55) relation_expression -> expression . LT expression
    )               shift and go to state 103
    DOTDIVIDE       shift and go to state 53
    DOTTIMES        shift and go to state 54
    DOTMINUS        shift and go to state 55
    DOTPLUS         shift and go to state 56
    /               shift and go to state 57
    *               shift and go to state 58
    -               shift and go to state 59
    +               shift and go to state 60
    '               shift and go to state 61
    NE              shift and go to state 62
    EQ              shift and go to state 63
    GE              shift and go to state 64
    LE              shift and go to state 65
    GT              shift and go to state 66
    LT              shift and go to state 67


state 70

    (33) expression -> UMINUS expression .
    (23) expression -> expression . DOTDIVIDE expression
    (24) expression -> expression . DOTTIMES expression
    (25) expression -> expression . DOTMINUS expression
    (26) expression -> expression . DOTPLUS expression
    (27) expression -> expression . / expression
    (28) expression -> expression . * expression
    (29) expression -> expression . - expression
    (30) expression -> expression . + expression
    (31) expression -> expression . '
    (50) relation_expression -> expression . NE expression
    (51) relation_expression -> expression . EQ expression
    (52) relation_expression -> expression . GE expression
    (53) relation_expression -> expression . LE expression
    (54) relation_expression -> expression . GT expression
    (55) relation_expression -> expression . LT expression
    ;               reduce using rule 33 (expression -> UMINUS expression .)
    DOTDIVIDE       reduce using rule 33 (expression -> UMINUS expression .)
    DOTTIMES        reduce using rule 33 (expression -> UMINUS expression .)
    DOTMINUS        reduce using rule 33 (expression -> UMINUS expression .)
    DOTPLUS         reduce using rule 33 (expression -> UMINUS expression .)
    /               reduce using rule 33 (expression -> UMINUS expression .)
    *               reduce using rule 33 (expression -> UMINUS expression .)
    -               reduce using rule 33 (expression -> UMINUS expression .)
    +               reduce using rule 33 (expression -> UMINUS expression .)
    '               reduce using rule 33 (expression -> UMINUS expression .)
    NE              reduce using rule 33 (expression -> UMINUS expression .)
    EQ              reduce using rule 33 (expression -> UMINUS expression .)
    GE              reduce using rule 33 (expression -> UMINUS expression .)
    LE              reduce using rule 33 (expression -> UMINUS expression .)
    GT              reduce using rule 33 (expression -> UMINUS expression .)
    LT              reduce using rule 33 (expression -> UMINUS expression .)
    )               reduce using rule 33 (expression -> UMINUS expression .)


state 71

    (60) vectors -> [ . list_of_ints ]
    (61) list_of_ints -> . list_of_ints , INTNUM
    (62) list_of_ints -> . INTNUM
    INTNUM          shift and go to state 85

    list_of_ints                   shift and go to state 104

state 72

    (39) expression -> [ vectors . ]
    (59) vectors -> vectors . , [ list_of_ints ]
    ]               shift and go to state 105
    ,               shift and go to state 106


state 73

    (56) matrix_functions -> EYE ( . INTNUM )
    INTNUM          shift and go to state 107


state 74

    (57) matrix_functions -> ONES ( . INTNUM )
    INTNUM          shift and go to state 108


state 75

    (58) matrix_functions -> ZEROS ( . INTNUM )
    INTNUM          shift and go to state 109


state 76

    (11) instruction -> { instructions } .
    RETURN          reduce using rule 11 (instruction -> { instructions } .)
    CONTINUE        reduce using rule 11 (instruction -> { instructions } .)
    BREAK           reduce using rule 11 (instruction -> { instructions } .)
    {               reduce using rule 11 (instruction -> { instructions } .)
    PRINT           reduce using rule 11 (instruction -> { instructions } .)
    FOR             reduce using rule 11 (instruction -> { instructions } .)
    WHILE           reduce using rule 11 (instruction -> { instructions } .)
    IF              reduce using rule 11 (instruction -> { instructions } .)
    ID              reduce using rule 11 (instruction -> { instructions } .)
    $end            reduce using rule 11 (instruction -> { instructions } .)
    }               reduce using rule 11 (instruction -> { instructions } .)
    ELSE            reduce using rule 11 (instruction -> { instructions } .)


state 77

    (18) print_instruction -> PRINT value ; .
    RETURN          reduce using rule 18 (print_instruction -> PRINT value ; .)
    CONTINUE        reduce using rule 18 (print_instruction -> PRINT value ; .)
    BREAK           reduce using rule 18 (print_instruction -> PRINT value ; .)
    {               reduce using rule 18 (print_instruction -> PRINT value ; .)
    PRINT           reduce using rule 18 (print_instruction -> PRINT value ; .)
    FOR             reduce using rule 18 (print_instruction -> PRINT value ; .)
    WHILE           reduce using rule 18 (print_instruction -> PRINT value ; .)
    IF              reduce using rule 18 (print_instruction -> PRINT value ; .)
    ID              reduce using rule 18 (print_instruction -> PRINT value ; .)
    $end            reduce using rule 18 (print_instruction -> PRINT value ; .)
    }               reduce using rule 18 (print_instruction -> PRINT value ; .)
    ELSE            reduce using rule 18 (print_instruction -> PRINT value ; .)


state 78

    (42) assign_expression -> id_ref DIVIDEASSIGN expression . ;
    (23) expression -> expression . DOTDIVIDE expression
    (24) expression -> expression . DOTTIMES expression
    (25) expression -> expression . DOTMINUS expression
    (26) expression -> expression . DOTPLUS expression
    (27) expression -> expression . / expression
    (28) expression -> expression . * expression
    (29) expression -> expression . - expression
    (30) expression -> expression . + expression
    (31) expression -> expression . '
    (50) relation_expression -> expression . NE expression
    (51) relation_expression -> expression . EQ expression
    (52) relation_expression -> expression . GE expression
    (53) relation_expression -> expression . LE expression
    (54) relation_expression -> expression . GT expression
    (55) relation_expression -> expression . LT expression
    ;               shift and go to state 110
    DOTDIVIDE       shift and go to state 53
    DOTTIMES        shift and go to state 54
    DOTMINUS        shift and go to state 55
    DOTPLUS         shift and go to state 56
    /               shift and go to state 57
    *               shift and go to state 58
    -               shift and go to state 59
    +               shift and go to state 60
    '               shift and go to state 61
    NE              shift and go to state 62
    EQ              shift and go to state 63
    GE              shift and go to state 64
    LE              shift and go to state 65
    GT              shift and go to state 66
    LT              shift and go to state 67


state 79

    (43) assign_expression -> id_ref TIMESASSIGN expression . ;
    (23) expression -> expression . DOTDIVIDE expression
    (24) expression -> expression . DOTTIMES expression
    (25) expression -> expression . DOTMINUS expression
    (26) expression -> expression . DOTPLUS expression
    (27) expression -> expression . / expression
    (28) expression -> expression . * expression
    (29) expression -> expression . - expression
    (30) expression -> expression . + expression
    (31) expression -> expression . '
    (50) relation_expression -> expression . NE expression
    (51) relation_expression -> expression . EQ expression
    (52) relation_expression -> expression . GE expression
    (53) relation_expression -> expression . LE expression
    (54) relation_expression -> expression . GT expression
    (55) relation_expression -> expression . LT expression
    ;               shift and go to state 111
    DOTDIVIDE       shift and go to state 53
    DOTTIMES        shift and go to state 54
    DOTMINUS        shift and go to state 55
    DOTPLUS         shift and go to state 56
    /               shift and go to state 57
    *               shift and go to state 58
    -               shift and go to state 59
    +               shift and go to state 60
    '               shift and go to state 61
    NE              shift and go to state 62
    EQ              shift and go to state 63
    GE              shift and go to state 64
    LE              shift and go to state 65
    GT              shift and go to state 66
    LT              shift and go to state 67


state 80

    (44) assign_expression -> id_ref MINUSASSIGN expression . ;
    (23) expression -> expression . DOTDIVIDE expression
    (24) expression -> expression . DOTTIMES expression
    (25) expression -> expression . DOTMINUS expression
    (26) expression -> expression . DOTPLUS expression
    (27) expression -> expression . / expression
    (28) expression -> expression . * expression
    (29) expression -> expression . - expression
    (30) expression -> expression . + expression
    (31) expression -> expression . '
    (50) relation_expression -> expression . NE expression
    (51) relation_expression -> expression . EQ expression
    (52) relation_expression -> expression . GE expression
    (53) relation_expression -> expression . LE expression
    (54) relation_expression -> expression . GT expression
    (55) relation_expression -> expression . LT expression
    ;               shift and go to state 112
    DOTDIVIDE       shift and go to state 53
    DOTTIMES        shift and go to state 54
    DOTMINUS        shift and go to state 55
    DOTPLUS         shift and go to state 56
    /               shift and go to state 57
    *               shift and go to state 58
    -               shift and go to state 59
    +               shift and go to state 60
    '               shift and go to state 61
    NE              shift and go to state 62
    EQ              shift and go to state 63
    GE              shift and go to state 64
    LE              shift and go to state 65
    GT              shift and go to state 66
    LT              shift and go to state 67


state 81

    (45) assign_expression -> id_ref PLUSASSIGN expression . ;
    (23) expression -> expression . DOTDIVIDE expression
    (24) expression -> expression . DOTTIMES expression
    (25) expression -> expression . DOTMINUS expression
    (26) expression -> expression . DOTPLUS expression
    (27) expression -> expression . / expression
    (28) expression -> expression . * expression
    (29) expression -> expression . - expression
    (30) expression -> expression . + expression
    (31) expression -> expression . '
    (50) relation_expression -> expression . NE expression
    (51) relation_expression -> expression . EQ expression
    (52) relation_expression -> expression . GE expression
    (53) relation_expression -> expression . LE expression
    (54) relation_expression -> expression . GT expression
    (55) relation_expression -> expression . LT expression
    ;               shift and go to state 113
    DOTDIVIDE       shift and go to state 53
    DOTTIMES        shift and go to state 54
    DOTMINUS        shift and go to state 55
    DOTPLUS         shift and go to state 56
    /               shift and go to state 57
    *               shift and go to state 58
    -               shift and go to state 59
    +               shift and go to state 60
    '               shift and go to state 61
    NE              shift and go to state 62
    EQ              shift and go to state 63
    GE              shift and go to state 64
    LE              shift and go to state 65
    GT              shift and go to state 66
    LT              shift and go to state 67


state 82

    (46) assign_expression -> id_ref = expression . ;
    (23) expression -> expression . DOTDIVIDE expression
    (24) expression -> expression . DOTTIMES expression
    (25) expression -> expression . DOTMINUS expression
    (26) expression -> expression . DOTPLUS expression
    (27) expression -> expression . / expression
    (28) expression -> expression . * expression
    (29) expression -> expression . - expression
    (30) expression -> expression . + expression
    (31) expression -> expression . '
    (50) relation_expression -> expression . NE expression
    (51) relation_expression -> expression . EQ expression
    (52) relation_expression -> expression . GE expression
    (53) relation_expression -> expression . LE expression
    (54) relation_expression -> expression . GT expression
    (55) relation_expression -> expression . LT expression
    ;               shift and go to state 114
    DOTDIVIDE       shift and go to state 53
    DOTTIMES        shift and go to state 54
    DOTMINUS        shift and go to state 55
    DOTPLUS         shift and go to state 56
    /               shift and go to state 57
    *               shift and go to state 58
    -               shift and go to state 59
    +               shift and go to state 60
    '               shift and go to state 61
    NE              shift and go to state 62
    EQ              shift and go to state 63
    GE              shift and go to state 64
    LE              shift and go to state 65
    GT              shift and go to state 66
    LT              shift and go to state 67


state 83

    (15) for_instruction -> FOR ID = . id_int : id_int instruction
    (16) id_int -> . INTNUM
    (17) id_int -> . ID
    INTNUM          shift and go to state 117
    ID              shift and go to state 115

    id_int                         shift and go to state 116

state 84

    (47) matrix_ref -> ID [ list_of_ints . ]
    (61) list_of_ints -> list_of_ints . , INTNUM
    ]               shift and go to state 118
    ,               shift and go to state 119


state 85

    (62) list_of_ints -> INTNUM .
    ]               reduce using rule 62 (list_of_ints -> INTNUM .)
    ,               reduce using rule 62 (list_of_ints -> INTNUM .)


state 86

    (14) while_instruction -> WHILE ( relation_expression . ) instruction
    (36) expression -> relation_expression .
    )               shift and go to state 120
    NE              reduce using rule 36 (expression -> relation_expression .)
    EQ              reduce using rule 36 (expression -> relation_expression .)
    GE              reduce using rule 36 (expression -> relation_expression .)
    LE              reduce using rule 36 (expression -> relation_expression .)
    GT              reduce using rule 36 (expression -> relation_expression .)
    LT              reduce using rule 36 (expression -> relation_expression .)
    DOTDIVIDE       reduce using rule 36 (expression -> relation_expression .)
    DOTTIMES        reduce using rule 36 (expression -> relation_expression .)
    DOTMINUS        reduce using rule 36 (expression -> relation_expression .)
    DOTPLUS         reduce using rule 36 (expression -> relation_expression .)
    /               reduce using rule 36 (expression -> relation_expression .)
    *               reduce using rule 36 (expression -> relation_expression .)
    -               reduce using rule 36 (expression -> relation_expression .)
    +               reduce using rule 36 (expression -> relation_expression .)
    '               reduce using rule 36 (expression -> relation_expression .)


state 87

    (50) relation_expression -> expression . NE expression
    (51) relation_expression -> expression . EQ expression
    (52) relation_expression -> expression . GE expression
    (53) relation_expression -> expression . LE expression
    (54) relation_expression -> expression . GT expression
    (55) relation_expression -> expression . LT expression
    (23) expression -> expression . DOTDIVIDE expression
    (24) expression -> expression . DOTTIMES expression
    (25) expression -> expression . DOTMINUS expression
    (26) expression -> expression . DOTPLUS expression
    (27) expression -> expression . / expression
    (28) expression -> expression . * expression
    (29) expression -> expression . - expression
    (30) expression -> expression . + expression
    (31) expression -> expression . '
    NE              shift and go to state 62
    EQ              shift and go to state 63
    GE              shift and go to state 64
    LE              shift and go to state 65
    GT              shift and go to state 66
    LT              shift and go to state 67
    DOTDIVIDE       shift and go to state 53
    DOTTIMES        shift and go to state 54
    DOTMINUS        shift and go to state 55
    DOTPLUS         shift and go to state 56
    /               shift and go to state 57
    *               shift and go to state 58
    -               shift and go to state 59
    +               shift and go to state 60
    '               shift and go to state 61


state 88

    (12) if_instruction -> IF ( relation_expression . ) instruction
    (13) if_instruction -> IF ( relation_expression . ) instruction ELSE instruction
    (36) expression -> relation_expression .
    )               shift and go to state 121
    NE              reduce using rule 36 (expression -> relation_expression .)
    EQ              reduce using rule 36 (expression -> relation_expression .)
    GE              reduce using rule 36 (expression -> relation_expression .)
    LE              reduce using rule 36 (expression -> relation_expression .)
    GT              reduce using rule 36 (expression -> relation_expression .)
    LT              reduce using rule 36 (expression -> relation_expression .)
    DOTDIVIDE       reduce using rule 36 (expression -> relation_expression .)
    DOTTIMES        reduce using rule 36 (expression -> relation_expression .)
    DOTMINUS        reduce using rule 36 (expression -> relation_expression .)
    DOTPLUS         reduce using rule 36 (expression -> relation_expression .)
    /               reduce using rule 36 (expression -> relation_expression .)
    *               reduce using rule 36 (expression -> relation_expression .)
    -               reduce using rule 36 (expression -> relation_expression .)
    +               reduce using rule 36 (expression -> relation_expression .)
    '               reduce using rule 36 (expression -> relation_expression .)


state 89

    (23) expression -> expression DOTDIVIDE expression .
    (23) expression -> expression . DOTDIVIDE expression
    (24) expression -> expression . DOTTIMES expression
    (25) expression -> expression . DOTMINUS expression
    (26) expression -> expression . DOTPLUS expression
    (27) expression -> expression . / expression
    (28) expression -> expression . * expression
    (29) expression -> expression . - expression
    (30) expression -> expression . + expression
    (31) expression -> expression . '
    (50) relation_expression -> expression . NE expression
    (51) relation_expression -> expression . EQ expression
    (52) relation_expression -> expression . GE expression
    (53) relation_expression -> expression . LE expression
    (54) relation_expression -> expression . GT expression
    (55) relation_expression -> expression . LT expression
    ;               reduce using rule 23 (expression -> expression DOTDIVIDE expression .)
    DOTDIVIDE       reduce using rule 23 (expression -> expression DOTDIVIDE expression .)
    DOTTIMES        reduce using rule 23 (expression -> expression DOTDIVIDE expression .)
    DOTMINUS        reduce using rule 23 (expression -> expression DOTDIVIDE expression .)
    DOTPLUS         reduce using rule 23 (expression -> expression DOTDIVIDE expression .)
    /               reduce using rule 23 (expression -> expression DOTDIVIDE expression .)
    *               reduce using rule 23 (expression -> expression DOTDIVIDE expression .)
    -               reduce using rule 23 (expression -> expression DOTDIVIDE expression .)
    +               reduce using rule 23 (expression -> expression DOTDIVIDE expression .)
    NE              reduce using rule 23 (expression -> expression DOTDIVIDE expression .)
    EQ              reduce using rule 23 (expression -> expression DOTDIVIDE expression .)
    GE              reduce using rule 23 (expression -> expression DOTDIVIDE expression .)
    LE              reduce using rule 23 (expression -> expression DOTDIVIDE expression .)
    GT              reduce using rule 23 (expression -> expression DOTDIVIDE expression .)
    LT              reduce using rule 23 (expression -> expression DOTDIVIDE expression .)
    )               reduce using rule 23 (expression -> expression DOTDIVIDE expression .)
    '               shift and go to state 61


state 90

    (24) expression -> expression DOTTIMES expression .
    (23) expression -> expression . DOTDIVIDE expression
    (24) expression -> expression . DOTTIMES expression
    (25) expression -> expression . DOTMINUS expression
    (26) expression -> expression . DOTPLUS expression
    (27) expression -> expression . / expression
    (28) expression -> expression . * expression
    (29) expression -> expression . - expression
    (30) expression -> expression . + expression
    (31) expression -> expression . '
    (50) relation_expression -> expression . NE expression
    (51) relation_expression -> expression . EQ expression
    (52) relation_expression -> expression . GE expression
    (53) relation_expression -> expression . LE expression
    (54) relation_expression -> expression . GT expression
    (55) relation_expression -> expression . LT expression
    ;               reduce using rule 24 (expression -> expression DOTTIMES expression .)
    DOTDIVIDE       reduce using rule 24 (expression -> expression DOTTIMES expression .)
    DOTTIMES        reduce using rule 24 (expression -> expression DOTTIMES expression .)
    DOTMINUS        reduce using rule 24 (expression -> expression DOTTIMES expression .)
    DOTPLUS         reduce using rule 24 (expression -> expression DOTTIMES expression .)
    /               reduce using rule 24 (expression -> expression DOTTIMES expression .)
    *               reduce using rule 24 (expression -> expression DOTTIMES expression .)
    -               reduce using rule 24 (expression -> expression DOTTIMES expression .)
    +               reduce using rule 24 (expression -> expression DOTTIMES expression .)
    NE              reduce using rule 24 (expression -> expression DOTTIMES expression .)
    EQ              reduce using rule 24 (expression -> expression DOTTIMES expression .)
    GE              reduce using rule 24 (expression -> expression DOTTIMES expression .)
    LE              reduce using rule 24 (expression -> expression DOTTIMES expression .)
    GT              reduce using rule 24 (expression -> expression DOTTIMES expression .)
    LT              reduce using rule 24 (expression -> expression DOTTIMES expression .)
    )               reduce using rule 24 (expression -> expression DOTTIMES expression .)
    '               shift and go to state 61


state 91

    (25) expression -> expression DOTMINUS expression .
    (23) expression -> expression . DOTDIVIDE expression
    (24) expression -> expression . DOTTIMES expression
    (25) expression -> expression . DOTMINUS expression
    (26) expression -> expression . DOTPLUS expression
    (27) expression -> expression . / expression
    (28) expression -> expression . * expression
    (29) expression -> expression . - expression
    (30) expression -> expression . + expression
    (31) expression -> expression . '
    (50) relation_expression -> expression . NE expression
    (51) relation_expression -> expression . EQ expression
    (52) relation_expression -> expression . GE expression
    (53) relation_expression -> expression . LE expression
    (54) relation_expression -> expression . GT expression
    (55) relation_expression -> expression . LT expression
    ;               reduce using rule 25 (expression -> expression DOTMINUS expression .)
    DOTMINUS        reduce using rule 25 (expression -> expression DOTMINUS expression .)
    DOTPLUS         reduce using rule 25 (expression -> expression DOTMINUS expression .)
    -               reduce using rule 25 (expression -> expression DOTMINUS expression .)
    +               reduce using rule 25 (expression -> expression DOTMINUS expression .)
    NE              reduce using rule 25 (expression -> expression DOTMINUS expression .)
    EQ              reduce using rule 25 (expression -> expression DOTMINUS expression .)
    GE              reduce using rule 25 (expression -> expression DOTMINUS expression .)
    LE              reduce using rule 25 (expression -> expression DOTMINUS expression .)
    GT              reduce using rule 25 (expression -> expression DOTMINUS expression .)
    LT              reduce using rule 25 (expression -> expression DOTMINUS expression .)
    )               reduce using rule 25 (expression -> expression DOTMINUS expression .)
    DOTDIVIDE       shift and go to state 53
    DOTTIMES        shift and go to state 54
    /               shift and go to state 57
    *               shift and go to state 58
    '               shift and go to state 61


state 92

    (26) expression -> expression DOTPLUS expression .
    (23) expression -> expression . DOTDIVIDE expression
    (24) expression -> expression . DOTTIMES expression
    (25) expression -> expression . DOTMINUS expression
    (26) expression -> expression . DOTPLUS expression
    (27) expression -> expression . / expression
    (28) expression -> expression . * expression
    (29) expression -> expression . - expression
    (30) expression -> expression . + expression
    (31) expression -> expression . '
    (50) relation_expression -> expression . NE expression
    (51) relation_expression -> expression . EQ expression
    (52) relation_expression -> expression . GE expression
    (53) relation_expression -> expression . LE expression
    (54) relation_expression -> expression . GT expression
    (55) relation_expression -> expression . LT expression
    ;               reduce using rule 26 (expression -> expression DOTPLUS expression .)
    DOTMINUS        reduce using rule 26 (expression -> expression DOTPLUS expression .)
    DOTPLUS         reduce using rule 26 (expression -> expression DOTPLUS expression .)
    -               reduce using rule 26 (expression -> expression DOTPLUS expression .)
    +               reduce using rule 26 (expression -> expression DOTPLUS expression .)
    NE              reduce using rule 26 (expression -> expression DOTPLUS expression .)
    EQ              reduce using rule 26 (expression -> expression DOTPLUS expression .)
    GE              reduce using rule 26 (expression -> expression DOTPLUS expression .)
    LE              reduce using rule 26 (expression -> expression DOTPLUS expression .)
    GT              reduce using rule 26 (expression -> expression DOTPLUS expression .)
    LT              reduce using rule 26 (expression -> expression DOTPLUS expression .)
    )               reduce using rule 26 (expression -> expression DOTPLUS expression .)
    DOTDIVIDE       shift and go to state 53
    DOTTIMES        shift and go to state 54
    /               shift and go to state 57
    *               shift and go to state 58
    '               shift and go to state 61


state 93

    (27) expression -> expression / expression .
    (23) expression -> expression . DOTDIVIDE expression
    (24) expression -> expression . DOTTIMES expression
    (25) expression -> expression . DOTMINUS expression
    (26) expression -> expression . DOTPLUS expression
    (27) expression -> expression . / expression
    (28) expression -> expression . * expression
    (29) expression -> expression . - expression
    (30) expression -> expression . + expression
    (31) expression -> expression . '
    (50) relation_expression -> expression . NE expression
    (51) relation_expression -> expression . EQ expression
    (52) relation_expression -> expression . GE expression
    (53) relation_expression -> expression . LE expression
    (54) relation_expression -> expression . GT expression
    (55) relation_expression -> expression . LT expression
    ;               reduce using rule 27 (expression -> expression / expression .)
    DOTDIVIDE       reduce using rule 27 (expression -> expression / expression .)
    DOTTIMES        reduce using rule 27 (expression -> expression / expression .)
    DOTMINUS        reduce using rule 27 (expression -> expression / expression .)
    DOTPLUS         reduce using rule 27 (expression -> expression / expression .)
    /               reduce using rule 27 (expression -> expression / expression .)
    *               reduce using rule 27 (expression -> expression / expression .)
    -               reduce using rule 27 (expression -> expression / expression .)
    +               reduce using rule 27 (expression -> expression / expression .)
    NE              reduce using rule 27 (expression -> expression / expression .)
    EQ              reduce using rule 27 (expression -> expression / expression .)
    GE              reduce using rule 27 (expression -> expression / expression .)
    LE              reduce using rule 27 (expression -> expression / expression .)
    GT              reduce using rule 27 (expression -> expression / expression .)
    LT              reduce using rule 27 (expression -> expression / expression .)
    )               reduce using rule 27 (expression -> expression / expression .)
    '               shift and go to state 61


state 94

    (28) expression -> expression * expression .
    (23) expression -> expression . DOTDIVIDE expression
    (24) expression -> expression . DOTTIMES expression
    (25) expression -> expression . DOTMINUS expression
    (26) expression -> expression . DOTPLUS expression
    (27) expression -> expression . / expression
    (28) expression -> expression . * expression
    (29) expression -> expression . - expression
    (30) expression -> expression . + expression
    (31) expression -> expression . '
    (50) relation_expression -> expression . NE expression
    (51) relation_expression -> expression . EQ expression
    (52) relation_expression -> expression . GE expression
    (53) relation_expression -> expression . LE expression
    (54) relation_expression -> expression . GT expression
    (55) relation_expression -> expression . LT expression
    ;               reduce using rule 28 (expression -> expression * expression .)
    DOTDIVIDE       reduce using rule 28 (expression -> expression * expression .)
    DOTTIMES        reduce using rule 28 (expression -> expression * expression .)
    DOTMINUS        reduce using rule 28 (expression -> expression * expression .)
    DOTPLUS         reduce using rule 28 (expression -> expression * expression .)
    /               reduce using rule 28 (expression -> expression * expression .)
    *               reduce using rule 28 (expression -> expression * expression .)
    -               reduce using rule 28 (expression -> expression * expression .)
    +               reduce using rule 28 (expression -> expression * expression .)
    NE              reduce using rule 28 (expression -> expression * expression .)
    EQ              reduce using rule 28 (expression -> expression * expression .)
    GE              reduce using rule 28 (expression -> expression * expression .)
    LE              reduce using rule 28 (expression -> expression * expression .)
    GT              reduce using rule 28 (expression -> expression * expression .)
    LT              reduce using rule 28 (expression -> expression * expression .)
    )               reduce using rule 28 (expression -> expression * expression .)
    '               shift and go to state 61


state 95

    (29) expression -> expression - expression .
    (23) expression -> expression . DOTDIVIDE expression
    (24) expression -> expression . DOTTIMES expression
    (25) expression -> expression . DOTMINUS expression
    (26) expression -> expression . DOTPLUS expression
    (27) expression -> expression . / expression
    (28) expression -> expression . * expression
    (29) expression -> expression . - expression
    (30) expression -> expression . + expression
    (31) expression -> expression . '
    (50) relation_expression -> expression . NE expression
    (51) relation_expression -> expression . EQ expression
    (52) relation_expression -> expression . GE expression
    (53) relation_expression -> expression . LE expression
    (54) relation_expression -> expression . GT expression
    (55) relation_expression -> expression . LT expression
    ;               reduce using rule 29 (expression -> expression - expression .)
    DOTMINUS        reduce using rule 29 (expression -> expression - expression .)
    DOTPLUS         reduce using rule 29 (expression -> expression - expression .)
    -               reduce using rule 29 (expression -> expression - expression .)
    +               reduce using rule 29 (expression -> expression - expression .)
    NE              reduce using rule 29 (expression -> expression - expression .)
    EQ              reduce using rule 29 (expression -> expression - expression .)
    GE              reduce using rule 29 (expression -> expression - expression .)
    LE              reduce using rule 29 (expression -> expression - expression .)
    GT              reduce using rule 29 (expression -> expression - expression .)
    LT              reduce using rule 29 (expression -> expression - expression .)
    )               reduce using rule 29 (expression -> expression - expression .)
    DOTDIVIDE       shift and go to state 53
    DOTTIMES        shift and go to state 54
    /               shift and go to state 57
    *               shift and go to state 58
    '               shift and go to state 61


state 96

    (30) expression -> expression + expression .
    (23) expression -> expression . DOTDIVIDE expression
    (24) expression -> expression . DOTTIMES expression
    (25) expression -> expression . DOTMINUS expression
    (26) expression -> expression . DOTPLUS expression
    (27) expression -> expression . / expression
    (28) expression -> expression . * expression
    (29) expression -> expression . - expression
    (30) expression -> expression . + expression
    (31) expression -> expression . '
    (50) relation_expression -> expression . NE expression
    (51) relation_expression -> expression . EQ expression
    (52) relation_expression -> expression . GE expression
    (53) relation_expression -> expression . LE expression
    (54) relation_expression -> expression . GT expression
    (55) relation_expression -> expression . LT expression
    ;               reduce using rule 30 (expression -> expression + expression .)
    DOTMINUS        reduce using rule 30 (expression -> expression + expression .)
    DOTPLUS         reduce using rule 30 (expression -> expression + expression .)
    -               reduce using rule 30 (expression -> expression + expression .)
    +               reduce using rule 30 (expression -> expression + expression .)
    NE              reduce using rule 30 (expression -> expression + expression .)
    EQ              reduce using rule 30 (expression -> expression + expression .)
    GE              reduce using rule 30 (expression -> expression + expression .)
    LE              reduce using rule 30 (expression -> expression + expression .)
    GT              reduce using rule 30 (expression -> expression + expression .)
    LT              reduce using rule 30 (expression -> expression + expression .)
    )               reduce using rule 30 (expression -> expression + expression .)
    DOTDIVIDE       shift and go to state 53
    DOTTIMES        shift and go to state 54
    /               shift and go to state 57
    *               shift and go to state 58
    '               shift and go to state 61


state 97

    (50) relation_expression -> expression NE expression .
    (23) expression -> expression . DOTDIVIDE expression
    (24) expression -> expression . DOTTIMES expression
    (25) expression -> expression . DOTMINUS expression
    (26) expression -> expression . DOTPLUS expression
    (27) expression -> expression . / expression
    (28) expression -> expression . * expression
    (29) expression -> expression . - expression
    (30) expression -> expression . + expression
    (31) expression -> expression . '
    (50) relation_expression -> expression . NE expression
    (51) relation_expression -> expression . EQ expression
    (52) relation_expression -> expression . GE expression
    (53) relation_expression -> expression . LE expression
    (54) relation_expression -> expression . GT expression
    (55) relation_expression -> expression . LT expression
    ;               reduce using rule 50 (relation_expression -> expression NE expression .)
    NE              reduce using rule 50 (relation_expression -> expression NE expression .)
    EQ              reduce using rule 50 (relation_expression -> expression NE expression .)
    GE              reduce using rule 50 (relation_expression -> expression NE expression .)
    LE              reduce using rule 50 (relation_expression -> expression NE expression .)
    GT              reduce using rule 50 (relation_expression -> expression NE expression .)
    LT              reduce using rule 50 (relation_expression -> expression NE expression .)
    )               reduce using rule 50 (relation_expression -> expression NE expression .)
    DOTDIVIDE       shift and go to state 53
    DOTTIMES        shift and go to state 54
    DOTMINUS        shift and go to state 55
    DOTPLUS         shift and go to state 56
    /               shift and go to state 57
    *               shift and go to state 58
    -               shift and go to state 59
    +               shift and go to state 60
    '               shift and go to state 61


state 98

    (51) relation_expression -> expression EQ expression .
    (23) expression -> expression . DOTDIVIDE expression
    (24) expression -> expression . DOTTIMES expression
    (25) expression -> expression . DOTMINUS expression
    (26) expression -> expression . DOTPLUS expression
    (27) expression -> expression . / expression
    (28) expression -> expression . * expression
    (29) expression -> expression . - expression
    (30) expression -> expression . + expression
    (31) expression -> expression . '
    (50) relation_expression -> expression . NE expression
    (51) relation_expression -> expression . EQ expression
    (52) relation_expression -> expression . GE expression
    (53) relation_expression -> expression . LE expression
    (54) relation_expression -> expression . GT expression
    (55) relation_expression -> expression . LT expression
    ;               reduce using rule 51 (relation_expression -> expression EQ expression .)
    NE              reduce using rule 51 (relation_expression -> expression EQ expression .)
    EQ              reduce using rule 51 (relation_expression -> expression EQ expression .)
    GE              reduce using rule 51 (relation_expression -> expression EQ expression .)
    LE              reduce using rule 51 (relation_expression -> expression EQ expression .)
    GT              reduce using rule 51 (relation_expression -> expression EQ expression .)
    LT              reduce using rule 51 (relation_expression -> expression EQ expression .)
    )               reduce using rule 51 (relation_expression -> expression EQ expression .)
    DOTDIVIDE       shift and go to state 53
    DOTTIMES        shift and go to state 54
    DOTMINUS        shift and go to state 55
    DOTPLUS         shift and go to state 56
    /               shift and go to state 57
    *               shift and go to state 58
    -               shift and go to state 59
    +               shift and go to state 60
    '               shift and go to state 61


state 99

    (52) relation_expression -> expression GE expression .
    (23) expression -> expression . DOTDIVIDE expression
    (24) expression -> expression . DOTTIMES expression
    (25) expression -> expression . DOTMINUS expression
    (26) expression -> expression . DOTPLUS expression
    (27) expression -> expression . / expression
    (28) expression -> expression . * expression
    (29) expression -> expression . - expression
    (30) expression -> expression . + expression
    (31) expression -> expression . '
    (50) relation_expression -> expression . NE expression
    (51) relation_expression -> expression . EQ expression
    (52) relation_expression -> expression . GE expression
    (53) relation_expression -> expression . LE expression
    (54) relation_expression -> expression . GT expression
    (55) relation_expression -> expression . LT expression
    ;               reduce using rule 52 (relation_expression -> expression GE expression .)
    NE              reduce using rule 52 (relation_expression -> expression GE expression .)
    EQ              reduce using rule 52 (relation_expression -> expression GE expression .)
    GE              reduce using rule 52 (relation_expression -> expression GE expression .)
    LE              reduce using rule 52 (relation_expression -> expression GE expression .)
    GT              reduce using rule 52 (relation_expression -> expression GE expression .)
    LT              reduce using rule 52 (relation_expression -> expression GE expression .)
    )               reduce using rule 52 (relation_expression -> expression GE expression .)
    DOTDIVIDE       shift and go to state 53
    DOTTIMES        shift and go to state 54
    DOTMINUS        shift and go to state 55
    DOTPLUS         shift and go to state 56
    /               shift and go to state 57
    *               shift and go to state 58
    -               shift and go to state 59
    +               shift and go to state 60
    '               shift and go to state 61


state 100

    (53) relation_expression -> expression LE expression .
    (23) expression -> expression . DOTDIVIDE expression
    (24) expression -> expression . DOTTIMES expression
    (25) expression -> expression . DOTMINUS expression
    (26) expression -> expression . DOTPLUS expression
    (27) expression -> expression . / expression
    (28) expression -> expression . * expression
    (29) expression -> expression . - expression
    (30) expression -> expression . + expression
    (31) expression -> expression . '
    (50) relation_expression -> expression . NE expression
    (51) relation_expression -> expression . EQ expression
    (52) relation_expression -> expression . GE expression
    (53) relation_expression -> expression . LE expression
    (54) relation_expression -> expression . GT expression
    (55) relation_expression -> expression . LT expression
    ;               reduce using rule 53 (relation_expression -> expression LE expression .)
    NE              reduce using rule 53 (relation_expression -> expression LE expression .)
    EQ              reduce using rule 53 (relation_expression -> expression LE expression .)
    GE              reduce using rule 53 (relation_expression -> expression LE expression .)
    LE              reduce using rule 53 (relation_expression -> expression LE expression .)
    GT              reduce using rule 53 (relation_expression -> expression LE expression .)
    LT              reduce using rule 53 (relation_expression -> expression LE expression .)
    )               reduce using rule 53 (relation_expression -> expression LE expression .)
    DOTDIVIDE       shift and go to state 53
    DOTTIMES        shift and go to state 54
    DOTMINUS        shift and go to state 55
    DOTPLUS         shift and go to state 56
    /               shift and go to state 57
    *               shift and go to state 58
    -               shift and go to state 59
    +               shift and go to state 60
    '               shift and go to state 61


state 101

    (54) relation_expression -> expression GT expression .
    (23) expression -> expression . DOTDIVIDE expression
    (24) expression -> expression . DOTTIMES expression
    (25) expression -> expression . DOTMINUS expression
    (26) expression -> expression . DOTPLUS expression
    (27) expression -> expression . / expression
    (28) expression -> expression . * expression
    (29) expression -> expression . - expression
    (30) expression -> expression . + expression
    (31) expression -> expression . '
    (50) relation_expression -> expression . NE expression
    (51) relation_expression -> expression . EQ expression
    (52) relation_expression -> expression . GE expression
    (53) relation_expression -> expression . LE expression
    (54) relation_expression -> expression . GT expression
    (55) relation_expression -> expression . LT expression
    ;               reduce using rule 54 (relation_expression -> expression GT expression .)
    NE              reduce using rule 54 (relation_expression -> expression GT expression .)
    EQ              reduce using rule 54 (relation_expression -> expression GT expression .)
    GE              reduce using rule 54 (relation_expression -> expression GT expression .)
    LE              reduce using rule 54 (relation_expression -> expression GT expression .)
    GT              reduce using rule 54 (relation_expression -> expression GT expression .)
    LT              reduce using rule 54 (relation_expression -> expression GT expression .)
    )               reduce using rule 54 (relation_expression -> expression GT expression .)
    DOTDIVIDE       shift and go to state 53
    DOTTIMES        shift and go to state 54
    DOTMINUS        shift and go to state 55
    DOTPLUS         shift and go to state 56
    /               shift and go to state 57
    *               shift and go to state 58
    -               shift and go to state 59
    +               shift and go to state 60
    '               shift and go to state 61


state 102

    (55) relation_expression -> expression LT expression .
    (23) expression -> expression . DOTDIVIDE expression
    (24) expression -> expression . DOTTIMES expression
    (25) expression -> expression . DOTMINUS expression
    (26) expression -> expression . DOTPLUS expression
    (27) expression -> expression . / expression
    (28) expression -> expression . * expression
    (29) expression -> expression . - expression
    (30) expression -> expression . + expression
    (31) expression -> expression . '
    (50) relation_expression -> expression . NE expression
    (51) relation_expression -> expression . EQ expression
    (52) relation_expression -> expression . GE expression
    (53) relation_expression -> expression . LE expression
    (54) relation_expression -> expression . GT expression
    (55) relation_expression -> expression . LT expression
    ;               reduce using rule 55 (relation_expression -> expression LT expression .)
    NE              reduce using rule 55 (relation_expression -> expression LT expression .)
    EQ              reduce using rule 55 (relation_expression -> expression LT expression .)
    GE              reduce using rule 55 (relation_expression -> expression LT expression .)
    LE              reduce using rule 55 (relation_expression -> expression LT expression .)
    GT              reduce using rule 55 (relation_expression -> expression LT expression .)
    LT              reduce using rule 55 (relation_expression -> expression LT expression .)
    )               reduce using rule 55 (relation_expression -> expression LT expression .)
    DOTDIVIDE       shift and go to state 53
    DOTTIMES        shift and go to state 54
    DOTMINUS        shift and go to state 55
    DOTPLUS         shift and go to state 56
    /               shift and go to state 57
    *               shift and go to state 58
    -               shift and go to state 59
    +               shift and go to state 60
    '               shift and go to state 61


state 103

    (32) expression -> ( expression ) .
    ;               reduce using rule 32 (expression -> ( expression ) .)
    DOTDIVIDE       reduce using rule 32 (expression -> ( expression ) .)
    DOTTIMES        reduce using rule 32 (expression -> ( expression ) .)
    DOTMINUS        reduce using rule 32 (expression -> ( expression ) .)
    DOTPLUS         reduce using rule 32 (expression -> ( expression ) .)
    /               reduce using rule 32 (expression -> ( expression ) .)
    *               reduce using rule 32 (expression -> ( expression ) .)
    -               reduce using rule 32 (expression -> ( expression ) .)
    +               reduce using rule 32 (expression -> ( expression ) .)
    '               reduce using rule 32 (expression -> ( expression ) .)
    NE              reduce using rule 32 (expression -> ( expression ) .)
    EQ              reduce using rule 32 (expression -> ( expression ) .)
    GE              reduce using rule 32 (expression -> ( expression ) .)
    LE              reduce using rule 32 (expression -> ( expression ) .)
    GT              reduce using rule 32 (expression -> ( expression ) .)
    LT              reduce using rule 32 (expression -> ( expression ) .)
    )               reduce using rule 32 (expression -> ( expression ) .)


state 104

    (60) vectors -> [ list_of_ints . ]
    (61) list_of_ints -> list_of_ints . , INTNUM
    ]               shift and go to state 122
    ,               shift and go to state 119


state 105

    (39) expression -> [ vectors ] .
    ;               reduce using rule 39 (expression -> [ vectors ] .)
    DOTDIVIDE       reduce using rule 39 (expression -> [ vectors ] .)
    DOTTIMES        reduce using rule 39 (expression -> [ vectors ] .)
    DOTMINUS        reduce using rule 39 (expression -> [ vectors ] .)
    DOTPLUS         reduce using rule 39 (expression -> [ vectors ] .)
    /               reduce using rule 39 (expression -> [ vectors ] .)
    *               reduce using rule 39 (expression -> [ vectors ] .)
    -               reduce using rule 39 (expression -> [ vectors ] .)
    +               reduce using rule 39 (expression -> [ vectors ] .)
    '               reduce using rule 39 (expression -> [ vectors ] .)
    NE              reduce using rule 39 (expression -> [ vectors ] .)
    EQ              reduce using rule 39 (expression -> [ vectors ] .)
    GE              reduce using rule 39 (expression -> [ vectors ] .)
    LE              reduce using rule 39 (expression -> [ vectors ] .)
    GT              reduce using rule 39 (expression -> [ vectors ] .)
    LT              reduce using rule 39 (expression -> [ vectors ] .)
    )               reduce using rule 39 (expression -> [ vectors ] .)


state 106

    (59) vectors -> vectors , . [ list_of_ints ]
    [               shift and go to state 123


state 107

    (56) matrix_functions -> EYE ( INTNUM . )
    )               shift and go to state 124


state 108

    (57) matrix_functions -> ONES ( INTNUM . )
    )               shift and go to state 125


state 109

    (58) matrix_functions -> ZEROS ( INTNUM . )
    )               shift and go to state 126


state 110

    (42) assign_expression -> id_ref DIVIDEASSIGN expression ; .
    RETURN          reduce using rule 42 (assign_expression -> id_ref DIVIDEASSIGN expression ; .)
    CONTINUE        reduce using rule 42 (assign_expression -> id_ref DIVIDEASSIGN expression ; .)
    BREAK           reduce using rule 42 (assign_expression -> id_ref DIVIDEASSIGN expression ; .)
    {               reduce using rule 42 (assign_expression -> id_ref DIVIDEASSIGN expression ; .)
    PRINT           reduce using rule 42 (assign_expression -> id_ref DIVIDEASSIGN expression ; .)
    FOR             reduce using rule 42 (assign_expression -> id_ref DIVIDEASSIGN expression ; .)
    WHILE           reduce using rule 42 (assign_expression -> id_ref DIVIDEASSIGN expression ; .)
    IF              reduce using rule 42 (assign_expression -> id_ref DIVIDEASSIGN expression ; .)
    ID              reduce using rule 42 (assign_expression -> id_ref DIVIDEASSIGN expression ; .)
    $end            reduce using rule 42 (assign_expression -> id_ref DIVIDEASSIGN expression ; .)
    ;               reduce using rule 42 (assign_expression -> id_ref DIVIDEASSIGN expression ; .)
    DOTDIVIDE       reduce using rule 42 (assign_expression -> id_ref DIVIDEASSIGN expression ; .)
    DOTTIMES        reduce using rule 42 (assign_expression -> id_ref DIVIDEASSIGN expression ; .)
    DOTMINUS        reduce using rule 42 (assign_expression -> id_ref DIVIDEASSIGN expression ; .)
    DOTPLUS         reduce using rule 42 (assign_expression -> id_ref DIVIDEASSIGN expression ; .)
    /               reduce using rule 42 (assign_expression -> id_ref DIVIDEASSIGN expression ; .)
    *               reduce using rule 42 (assign_expression -> id_ref DIVIDEASSIGN expression ; .)
    -               reduce using rule 42 (assign_expression -> id_ref DIVIDEASSIGN expression ; .)
    +               reduce using rule 42 (assign_expression -> id_ref DIVIDEASSIGN expression ; .)
    '               reduce using rule 42 (assign_expression -> id_ref DIVIDEASSIGN expression ; .)
    NE              reduce using rule 42 (assign_expression -> id_ref DIVIDEASSIGN expression ; .)
    EQ              reduce using rule 42 (assign_expression -> id_ref DIVIDEASSIGN expression ; .)
    GE              reduce using rule 42 (assign_expression -> id_ref DIVIDEASSIGN expression ; .)
    LE              reduce using rule 42 (assign_expression -> id_ref DIVIDEASSIGN expression ; .)
    GT              reduce using rule 42 (assign_expression -> id_ref DIVIDEASSIGN expression ; .)
    LT              reduce using rule 42 (assign_expression -> id_ref DIVIDEASSIGN expression ; .)
    }               reduce using rule 42 (assign_expression -> id_ref DIVIDEASSIGN expression ; .)
    )               reduce using rule 42 (assign_expression -> id_ref DIVIDEASSIGN expression ; .)
    ELSE            reduce using rule 42 (assign_expression -> id_ref DIVIDEASSIGN expression ; .)


state 111

    (43) assign_expression -> id_ref TIMESASSIGN expression ; .
    RETURN          reduce using rule 43 (assign_expression -> id_ref TIMESASSIGN expression ; .)
    CONTINUE        reduce using rule 43 (assign_expression -> id_ref TIMESASSIGN expression ; .)
    BREAK           reduce using rule 43 (assign_expression -> id_ref TIMESASSIGN expression ; .)
    {               reduce using rule 43 (assign_expression -> id_ref TIMESASSIGN expression ; .)
    PRINT           reduce using rule 43 (assign_expression -> id_ref TIMESASSIGN expression ; .)
    FOR             reduce using rule 43 (assign_expression -> id_ref TIMESASSIGN expression ; .)
    WHILE           reduce using rule 43 (assign_expression -> id_ref TIMESASSIGN expression ; .)
    IF              reduce using rule 43 (assign_expression -> id_ref TIMESASSIGN expression ; .)
    ID              reduce using rule 43 (assign_expression -> id_ref TIMESASSIGN expression ; .)
    $end            reduce using rule 43 (assign_expression -> id_ref TIMESASSIGN expression ; .)
    ;               reduce using rule 43 (assign_expression -> id_ref TIMESASSIGN expression ; .)
    DOTDIVIDE       reduce using rule 43 (assign_expression -> id_ref TIMESASSIGN expression ; .)
    DOTTIMES        reduce using rule 43 (assign_expression -> id_ref TIMESASSIGN expression ; .)
    DOTMINUS        reduce using rule 43 (assign_expression -> id_ref TIMESASSIGN expression ; .)
    DOTPLUS         reduce using rule 43 (assign_expression -> id_ref TIMESASSIGN expression ; .)
    /               reduce using rule 43 (assign_expression -> id_ref TIMESASSIGN expression ; .)
    *               reduce using rule 43 (assign_expression -> id_ref TIMESASSIGN expression ; .)
    -               reduce using rule 43 (assign_expression -> id_ref TIMESASSIGN expression ; .)
    +               reduce using rule 43 (assign_expression -> id_ref TIMESASSIGN expression ; .)
    '               reduce using rule 43 (assign_expression -> id_ref TIMESASSIGN expression ; .)
    NE              reduce using rule 43 (assign_expression -> id_ref TIMESASSIGN expression ; .)
    EQ              reduce using rule 43 (assign_expression -> id_ref TIMESASSIGN expression ; .)
    GE              reduce using rule 43 (assign_expression -> id_ref TIMESASSIGN expression ; .)
    LE              reduce using rule 43 (assign_expression -> id_ref TIMESASSIGN expression ; .)
    GT              reduce using rule 43 (assign_expression -> id_ref TIMESASSIGN expression ; .)
    LT              reduce using rule 43 (assign_expression -> id_ref TIMESASSIGN expression ; .)
    }               reduce using rule 43 (assign_expression -> id_ref TIMESASSIGN expression ; .)
    )               reduce using rule 43 (assign_expression -> id_ref TIMESASSIGN expression ; .)
    ELSE            reduce using rule 43 (assign_expression -> id_ref TIMESASSIGN expression ; .)


state 112

    (44) assign_expression -> id_ref MINUSASSIGN expression ; .
    RETURN          reduce using rule 44 (assign_expression -> id_ref MINUSASSIGN expression ; .)
    CONTINUE        reduce using rule 44 (assign_expression -> id_ref MINUSASSIGN expression ; .)
    BREAK           reduce using rule 44 (assign_expression -> id_ref MINUSASSIGN expression ; .)
    {               reduce using rule 44 (assign_expression -> id_ref MINUSASSIGN expression ; .)
    PRINT           reduce using rule 44 (assign_expression -> id_ref MINUSASSIGN expression ; .)
    FOR             reduce using rule 44 (assign_expression -> id_ref MINUSASSIGN expression ; .)
    WHILE           reduce using rule 44 (assign_expression -> id_ref MINUSASSIGN expression ; .)
    IF              reduce using rule 44 (assign_expression -> id_ref MINUSASSIGN expression ; .)
    ID              reduce using rule 44 (assign_expression -> id_ref MINUSASSIGN expression ; .)
    $end            reduce using rule 44 (assign_expression -> id_ref MINUSASSIGN expression ; .)
    ;               reduce using rule 44 (assign_expression -> id_ref MINUSASSIGN expression ; .)
    DOTDIVIDE       reduce using rule 44 (assign_expression -> id_ref MINUSASSIGN expression ; .)
    DOTTIMES        reduce using rule 44 (assign_expression -> id_ref MINUSASSIGN expression ; .)
    DOTMINUS        reduce using rule 44 (assign_expression -> id_ref MINUSASSIGN expression ; .)
    DOTPLUS         reduce using rule 44 (assign_expression -> id_ref MINUSASSIGN expression ; .)
    /               reduce using rule 44 (assign_expression -> id_ref MINUSASSIGN expression ; .)
    *               reduce using rule 44 (assign_expression -> id_ref MINUSASSIGN expression ; .)
    -               reduce using rule 44 (assign_expression -> id_ref MINUSASSIGN expression ; .)
    +               reduce using rule 44 (assign_expression -> id_ref MINUSASSIGN expression ; .)
    '               reduce using rule 44 (assign_expression -> id_ref MINUSASSIGN expression ; .)
    NE              reduce using rule 44 (assign_expression -> id_ref MINUSASSIGN expression ; .)
    EQ              reduce using rule 44 (assign_expression -> id_ref MINUSASSIGN expression ; .)
    GE              reduce using rule 44 (assign_expression -> id_ref MINUSASSIGN expression ; .)
    LE              reduce using rule 44 (assign_expression -> id_ref MINUSASSIGN expression ; .)
    GT              reduce using rule 44 (assign_expression -> id_ref MINUSASSIGN expression ; .)
    LT              reduce using rule 44 (assign_expression -> id_ref MINUSASSIGN expression ; .)
    }               reduce using rule 44 (assign_expression -> id_ref MINUSASSIGN expression ; .)
    )               reduce using rule 44 (assign_expression -> id_ref MINUSASSIGN expression ; .)
    ELSE            reduce using rule 44 (assign_expression -> id_ref MINUSASSIGN expression ; .)


state 113

    (45) assign_expression -> id_ref PLUSASSIGN expression ; .
    RETURN          reduce using rule 45 (assign_expression -> id_ref PLUSASSIGN expression ; .)
    CONTINUE        reduce using rule 45 (assign_expression -> id_ref PLUSASSIGN expression ; .)
    BREAK           reduce using rule 45 (assign_expression -> id_ref PLUSASSIGN expression ; .)
    {               reduce using rule 45 (assign_expression -> id_ref PLUSASSIGN expression ; .)
    PRINT           reduce using rule 45 (assign_expression -> id_ref PLUSASSIGN expression ; .)
    FOR             reduce using rule 45 (assign_expression -> id_ref PLUSASSIGN expression ; .)
    WHILE           reduce using rule 45 (assign_expression -> id_ref PLUSASSIGN expression ; .)
    IF              reduce using rule 45 (assign_expression -> id_ref PLUSASSIGN expression ; .)
    ID              reduce using rule 45 (assign_expression -> id_ref PLUSASSIGN expression ; .)
    $end            reduce using rule 45 (assign_expression -> id_ref PLUSASSIGN expression ; .)
    ;               reduce using rule 45 (assign_expression -> id_ref PLUSASSIGN expression ; .)
    DOTDIVIDE       reduce using rule 45 (assign_expression -> id_ref PLUSASSIGN expression ; .)
    DOTTIMES        reduce using rule 45 (assign_expression -> id_ref PLUSASSIGN expression ; .)
    DOTMINUS        reduce using rule 45 (assign_expression -> id_ref PLUSASSIGN expression ; .)
    DOTPLUS         reduce using rule 45 (assign_expression -> id_ref PLUSASSIGN expression ; .)
    /               reduce using rule 45 (assign_expression -> id_ref PLUSASSIGN expression ; .)
    *               reduce using rule 45 (assign_expression -> id_ref PLUSASSIGN expression ; .)
    -               reduce using rule 45 (assign_expression -> id_ref PLUSASSIGN expression ; .)
    +               reduce using rule 45 (assign_expression -> id_ref PLUSASSIGN expression ; .)
    '               reduce using rule 45 (assign_expression -> id_ref PLUSASSIGN expression ; .)
    NE              reduce using rule 45 (assign_expression -> id_ref PLUSASSIGN expression ; .)
    EQ              reduce using rule 45 (assign_expression -> id_ref PLUSASSIGN expression ; .)
    GE              reduce using rule 45 (assign_expression -> id_ref PLUSASSIGN expression ; .)
    LE              reduce using rule 45 (assign_expression -> id_ref PLUSASSIGN expression ; .)
    GT              reduce using rule 45 (assign_expression -> id_ref PLUSASSIGN expression ; .)
    LT              reduce using rule 45 (assign_expression -> id_ref PLUSASSIGN expression ; .)
    }               reduce using rule 45 (assign_expression -> id_ref PLUSASSIGN expression ; .)
    )               reduce using rule 45 (assign_expression -> id_ref PLUSASSIGN expression ; .)
    ELSE            reduce using rule 45 (assign_expression -> id_ref PLUSASSIGN expression ; .)


state 114

    (46) assign_expression -> id_ref = expression ; .
    RETURN          reduce using rule 46 (assign_expression -> id_ref = expression ; .)
    CONTINUE        reduce using rule 46 (assign_expression -> id_ref = expression ; .)
    BREAK           reduce using rule 46 (assign_expression -> id_ref = expression ; .)
    {               reduce using rule 46 (assign_expression -> id_ref = expression ; .)
    PRINT           reduce using rule 46 (assign_expression -> id_ref = expression ; .)
    FOR             reduce using rule 46 (assign_expression -> id_ref = expression ; .)
    WHILE           reduce using rule 46 (assign_expression -> id_ref = expression ; .)
    IF              reduce using rule 46 (assign_expression -> id_ref = expression ; .)
    ID              reduce using rule 46 (assign_expression -> id_ref = expression ; .)
    $end            reduce using rule 46 (assign_expression -> id_ref = expression ; .)
    ;               reduce using rule 46 (assign_expression -> id_ref = expression ; .)
    DOTDIVIDE       reduce using rule 46 (assign_expression -> id_ref = expression ; .)
    DOTTIMES        reduce using rule 46 (assign_expression -> id_ref = expression ; .)
    DOTMINUS        reduce using rule 46 (assign_expression -> id_ref = expression ; .)
    DOTPLUS         reduce using rule 46 (assign_expression -> id_ref = expression ; .)
    /               reduce using rule 46 (assign_expression -> id_ref = expression ; .)
    *               reduce using rule 46 (assign_expression -> id_ref = expression ; .)
    -               reduce using rule 46 (assign_expression -> id_ref = expression ; .)
    +               reduce using rule 46 (assign_expression -> id_ref = expression ; .)
    '               reduce using rule 46 (assign_expression -> id_ref = expression ; .)
    NE              reduce using rule 46 (assign_expression -> id_ref = expression ; .)
    EQ              reduce using rule 46 (assign_expression -> id_ref = expression ; .)
    GE              reduce using rule 46 (assign_expression -> id_ref = expression ; .)
    LE              reduce using rule 46 (assign_expression -> id_ref = expression ; .)
    GT              reduce using rule 46 (assign_expression -> id_ref = expression ; .)
    LT              reduce using rule 46 (assign_expression -> id_ref = expression ; .)
    }               reduce using rule 46 (assign_expression -> id_ref = expression ; .)
    )               reduce using rule 46 (assign_expression -> id_ref = expression ; .)
    ELSE            reduce using rule 46 (assign_expression -> id_ref = expression ; .)


state 115

    (17) id_int -> ID .
    :               reduce using rule 17 (id_int -> ID .)
    RETURN          reduce using rule 17 (id_int -> ID .)
    CONTINUE        reduce using rule 17 (id_int -> ID .)
    BREAK           reduce using rule 17 (id_int -> ID .)
    {               reduce using rule 17 (id_int -> ID .)
    PRINT           reduce using rule 17 (id_int -> ID .)
    FOR             reduce using rule 17 (id_int -> ID .)
    WHILE           reduce using rule 17 (id_int -> ID .)
    IF              reduce using rule 17 (id_int -> ID .)
    ID              reduce using rule 17 (id_int -> ID .)


state 116

    (15) for_instruction -> FOR ID = id_int . : id_int instruction
    :               shift and go to state 127


state 117

    (16) id_int -> INTNUM .
    :               reduce using rule 16 (id_int -> INTNUM .)
    RETURN          reduce using rule 16 (id_int -> INTNUM .)
    CONTINUE        reduce using rule 16 (id_int -> INTNUM .)
    BREAK           reduce using rule 16 (id_int -> INTNUM .)
    {               reduce using rule 16 (id_int -> INTNUM .)
    PRINT           reduce using rule 16 (id_int -> INTNUM .)
    FOR             reduce using rule 16 (id_int -> INTNUM .)
    WHILE           reduce using rule 16 (id_int -> INTNUM .)
    IF              reduce using rule 16 (id_int -> INTNUM .)
    ID              reduce using rule 16 (id_int -> INTNUM .)


state 118

    (47) matrix_ref -> ID [ list_of_ints ] .
    DIVIDEASSIGN    reduce using rule 47 (matrix_ref -> ID [ list_of_ints ] .)
    TIMESASSIGN     reduce using rule 47 (matrix_ref -> ID [ list_of_ints ] .)
    MINUSASSIGN     reduce using rule 47 (matrix_ref -> ID [ list_of_ints ] .)
    PLUSASSIGN      reduce using rule 47 (matrix_ref -> ID [ list_of_ints ] .)
    =               reduce using rule 47 (matrix_ref -> ID [ list_of_ints ] .)
    ;               reduce using rule 47 (matrix_ref -> ID [ list_of_ints ] .)
    DOTDIVIDE       reduce using rule 47 (matrix_ref -> ID [ list_of_ints ] .)
    DOTTIMES        reduce using rule 47 (matrix_ref -> ID [ list_of_ints ] .)
    DOTMINUS        reduce using rule 47 (matrix_ref -> ID [ list_of_ints ] .)
    DOTPLUS         reduce using rule 47 (matrix_ref -> ID [ list_of_ints ] .)
    /               reduce using rule 47 (matrix_ref -> ID [ list_of_ints ] .)
    *               reduce using rule 47 (matrix_ref -> ID [ list_of_ints ] .)
    -               reduce using rule 47 (matrix_ref -> ID [ list_of_ints ] .)
    +               reduce using rule 47 (matrix_ref -> ID [ list_of_ints ] .)
    '               reduce using rule 47 (matrix_ref -> ID [ list_of_ints ] .)
    NE              reduce using rule 47 (matrix_ref -> ID [ list_of_ints ] .)
    EQ              reduce using rule 47 (matrix_ref -> ID [ list_of_ints ] .)
    GE              reduce using rule 47 (matrix_ref -> ID [ list_of_ints ] .)
    LE              reduce using rule 47 (matrix_ref -> ID [ list_of_ints ] .)
    GT              reduce using rule 47 (matrix_ref -> ID [ list_of_ints ] .)
    LT              reduce using rule 47 (matrix_ref -> ID [ list_of_ints ] .)
    )               reduce using rule 47 (matrix_ref -> ID [ list_of_ints ] .)


state 119

    (61) list_of_ints -> list_of_ints , . INTNUM
    INTNUM          shift and go to state 128


state 120

    (14) while_instruction -> WHILE ( relation_expression ) . instruction
    (3) instruction -> . RETURN expression ;
    (4) instruction -> . CONTINUE ;
    (5) instruction -> . BREAK ;
    (6) instruction -> . print_instruction
    (7) instruction -> . assign_expression
    (8) instruction -> . for_instruction
    (9) instruction -> . while_instruction
    (10) instruction -> . if_instruction
    (11) instruction -> . { instructions }
    (18) print_instruction -> . PRINT value ;
    (42) assign_expression -> . id_ref DIVIDEASSIGN expression ;
    (43) assign_expression -> . id_ref TIMESASSIGN expression ;
    (44) assign_expression -> . id_ref MINUSASSIGN expression ;
    (45) assign_expression -> . id_ref PLUSASSIGN expression ;
    (46) assign_expression -> . id_ref = expression ;
    (15) for_instruction -> . FOR ID = id_int : id_int instruction
    (14) while_instruction -> . WHILE ( relation_expression ) instruction
    (12) if_instruction -> . IF ( relation_expression ) instruction
    (13) if_instruction -> . IF ( relation_expression ) instruction ELSE instruction
    (48) id_ref -> . matrix_ref
    (49) id_ref -> . ID
    (47) matrix_ref -> . ID [ list_of_ints ]
    RETURN          shift and go to state 3
    CONTINUE        shift and go to state 4
    BREAK           shift and go to state 5
    {               shift and go to state 11
    PRINT           shift and go to state 12
    FOR             shift and go to state 14
    WHILE           shift and go to state 16
    IF              shift and go to state 17
    ID              shift and go to state 15

    instruction                    shift and go to state 129
    print_instruction              shift and go to state 6
    assign_expression              shift and go to state 7
    for_instruction                shift and go to state 8
    while_instruction              shift and go to state 9
    if_instruction                 shift and go to state 10
    id_ref                         shift and go to state 13
    matrix_ref                     shift and go to state 18

state 121

    (12) if_instruction -> IF ( relation_expression ) . instruction
    (13) if_instruction -> IF ( relation_expression ) . instruction ELSE instruction
    (3) instruction -> . RETURN expression ;
    (4) instruction -> . CONTINUE ;
    (5) instruction -> . BREAK ;
    (6) instruction -> . print_instruction
    (7) instruction -> . assign_expression
    (8) instruction -> . for_instruction
    (9) instruction -> . while_instruction
    (10) instruction -> . if_instruction
    (11) instruction -> . { instructions }
    (18) print_instruction -> . PRINT value ;
    (42) assign_expression -> . id_ref DIVIDEASSIGN expression ;
    (43) assign_expression -> . id_ref TIMESASSIGN expression ;
    (44) assign_expression -> . id_ref MINUSASSIGN expression ;
    (45) assign_expression -> . id_ref PLUSASSIGN expression ;
    (46) assign_expression -> . id_ref = expression ;
    (15) for_instruction -> . FOR ID = id_int : id_int instruction
    (14) while_instruction -> . WHILE ( relation_expression ) instruction
    (12) if_instruction -> . IF ( relation_expression ) instruction
    (13) if_instruction -> . IF ( relation_expression ) instruction ELSE instruction
    (48) id_ref -> . matrix_ref
    (49) id_ref -> . ID
    (47) matrix_ref -> . ID [ list_of_ints ]
    RETURN          shift and go to state 3
    CONTINUE        shift and go to state 4
    BREAK           shift and go to state 5
    {               shift and go to state 11
    PRINT           shift and go to state 12
    FOR             shift and go to state 14
    WHILE           shift and go to state 16
    IF              shift and go to state 17
    ID              shift and go to state 15

    instruction                    shift and go to state 130
    print_instruction              shift and go to state 6
    assign_expression              shift and go to state 7
    for_instruction                shift and go to state 8
    while_instruction              shift and go to state 9
    if_instruction                 shift and go to state 10
    id_ref                         shift and go to state 13
    matrix_ref                     shift and go to state 18

state 122

    (60) vectors -> [ list_of_ints ] .
    ]               reduce using rule 60 (vectors -> [ list_of_ints ] .)
    ,               reduce using rule 60 (vectors -> [ list_of_ints ] .)


state 123

    (59) vectors -> vectors , [ . list_of_ints ]
    (61) list_of_ints -> . list_of_ints , INTNUM
    (62) list_of_ints -> . INTNUM
    INTNUM          shift and go to state 85

    list_of_ints                   shift and go to state 131

state 124

    (56) matrix_functions -> EYE ( INTNUM ) .
    ;               reduce using rule 56 (matrix_functions -> EYE ( INTNUM ) .)
    DOTDIVIDE       reduce using rule 56 (matrix_functions -> EYE ( INTNUM ) .)
    DOTTIMES        reduce using rule 56 (matrix_functions -> EYE ( INTNUM ) .)
    DOTMINUS        reduce using rule 56 (matrix_functions -> EYE ( INTNUM ) .)
    DOTPLUS         reduce using rule 56 (matrix_functions -> EYE ( INTNUM ) .)
    /               reduce using rule 56 (matrix_functions -> EYE ( INTNUM ) .)
    *               reduce using rule 56 (matrix_functions -> EYE ( INTNUM ) .)
    -               reduce using rule 56 (matrix_functions -> EYE ( INTNUM ) .)
    +               reduce using rule 56 (matrix_functions -> EYE ( INTNUM ) .)
    '               reduce using rule 56 (matrix_functions -> EYE ( INTNUM ) .)
    NE              reduce using rule 56 (matrix_functions -> EYE ( INTNUM ) .)
    EQ              reduce using rule 56 (matrix_functions -> EYE ( INTNUM ) .)
    GE              reduce using rule 56 (matrix_functions -> EYE ( INTNUM ) .)
    LE              reduce using rule 56 (matrix_functions -> EYE ( INTNUM ) .)
    GT              reduce using rule 56 (matrix_functions -> EYE ( INTNUM ) .)
    LT              reduce using rule 56 (matrix_functions -> EYE ( INTNUM ) .)
    )               reduce using rule 56 (matrix_functions -> EYE ( INTNUM ) .)


state 125

    (57) matrix_functions -> ONES ( INTNUM ) .
    ;               reduce using rule 57 (matrix_functions -> ONES ( INTNUM ) .)
    DOTDIVIDE       reduce using rule 57 (matrix_functions -> ONES ( INTNUM ) .)
    DOTTIMES        reduce using rule 57 (matrix_functions -> ONES ( INTNUM ) .)
    DOTMINUS        reduce using rule 57 (matrix_functions -> ONES ( INTNUM ) .)
    DOTPLUS         reduce using rule 57 (matrix_functions -> ONES ( INTNUM ) .)
    /               reduce using rule 57 (matrix_functions -> ONES ( INTNUM ) .)
    *               reduce using rule 57 (matrix_functions -> ONES ( INTNUM ) .)
    -               reduce using rule 57 (matrix_functions -> ONES ( INTNUM ) .)
    +               reduce using rule 57 (matrix_functions -> ONES ( INTNUM ) .)
    '               reduce using rule 57 (matrix_functions -> ONES ( INTNUM ) .)
    NE              reduce using rule 57 (matrix_functions -> ONES ( INTNUM ) .)
    EQ              reduce using rule 57 (matrix_functions -> ONES ( INTNUM ) .)
    GE              reduce using rule 57 (matrix_functions -> ONES ( INTNUM ) .)
    LE              reduce using rule 57 (matrix_functions -> ONES ( INTNUM ) .)
    GT              reduce using rule 57 (matrix_functions -> ONES ( INTNUM ) .)
    LT              reduce using rule 57 (matrix_functions -> ONES ( INTNUM ) .)
    )               reduce using rule 57 (matrix_functions -> ONES ( INTNUM ) .)


state 126

    (58) matrix_functions -> ZEROS ( INTNUM ) .
    ;               reduce using rule 58 (matrix_functions -> ZEROS ( INTNUM ) .)
    DOTDIVIDE       reduce using rule 58 (matrix_functions -> ZEROS ( INTNUM ) .)
    DOTTIMES        reduce using rule 58 (matrix_functions -> ZEROS ( INTNUM ) .)
    DOTMINUS        reduce using rule 58 (matrix_functions -> ZEROS ( INTNUM ) .)
    DOTPLUS         reduce using rule 58 (matrix_functions -> ZEROS ( INTNUM ) .)
    /               reduce using rule 58 (matrix_functions -> ZEROS ( INTNUM ) .)
    *               reduce using rule 58 (matrix_functions -> ZEROS ( INTNUM ) .)
    -               reduce using rule 58 (matrix_functions -> ZEROS ( INTNUM ) .)
    +               reduce using rule 58 (matrix_functions -> ZEROS ( INTNUM ) .)
    '               reduce using rule 58 (matrix_functions -> ZEROS ( INTNUM ) .)
    NE              reduce using rule 58 (matrix_functions -> ZEROS ( INTNUM ) .)
    EQ              reduce using rule 58 (matrix_functions -> ZEROS ( INTNUM ) .)
    GE              reduce using rule 58 (matrix_functions -> ZEROS ( INTNUM ) .)
    LE              reduce using rule 58 (matrix_functions -> ZEROS ( INTNUM ) .)
    GT              reduce using rule 58 (matrix_functions -> ZEROS ( INTNUM ) .)
    LT              reduce using rule 58 (matrix_functions -> ZEROS ( INTNUM ) .)
    )               reduce using rule 58 (matrix_functions -> ZEROS ( INTNUM ) .)


state 127

    (15) for_instruction -> FOR ID = id_int : . id_int instruction
    (16) id_int -> . INTNUM
    (17) id_int -> . ID
    INTNUM          shift and go to state 117
    ID              shift and go to state 115

    id_int                         shift and go to state 132

state 128

    (61) list_of_ints -> list_of_ints , INTNUM .
    ]               reduce using rule 61 (list_of_ints -> list_of_ints , INTNUM .)
    ,               reduce using rule 61 (list_of_ints -> list_of_ints , INTNUM .)


state 129

    (14) while_instruction -> WHILE ( relation_expression ) instruction .
    RETURN          reduce using rule 14 (while_instruction -> WHILE ( relation_expression ) instruction .)
    CONTINUE        reduce using rule 14 (while_instruction -> WHILE ( relation_expression ) instruction .)
    BREAK           reduce using rule 14 (while_instruction -> WHILE ( relation_expression ) instruction .)
    {               reduce using rule 14 (while_instruction -> WHILE ( relation_expression ) instruction .)
    PRINT           reduce using rule 14 (while_instruction -> WHILE ( relation_expression ) instruction .)
    FOR             reduce using rule 14 (while_instruction -> WHILE ( relation_expression ) instruction .)
    WHILE           reduce using rule 14 (while_instruction -> WHILE ( relation_expression ) instruction .)
    IF              reduce using rule 14 (while_instruction -> WHILE ( relation_expression ) instruction .)
    ID              reduce using rule 14 (while_instruction -> WHILE ( relation_expression ) instruction .)
    $end            reduce using rule 14 (while_instruction -> WHILE ( relation_expression ) instruction .)
    }               reduce using rule 14 (while_instruction -> WHILE ( relation_expression ) instruction .)
    ELSE            reduce using rule 14 (while_instruction -> WHILE ( relation_expression ) instruction .)


state 130

    (12) if_instruction -> IF ( relation_expression ) instruction .
    (13) if_instruction -> IF ( relation_expression ) instruction . ELSE instruction
    RETURN          reduce using rule 12 (if_instruction -> IF ( relation_expression ) instruction .)
    CONTINUE        reduce using rule 12 (if_instruction -> IF ( relation_expression ) instruction .)
    BREAK           reduce using rule 12 (if_instruction -> IF ( relation_expression ) instruction .)
    {               reduce using rule 12 (if_instruction -> IF ( relation_expression ) instruction .)
    PRINT           reduce using rule 12 (if_instruction -> IF ( relation_expression ) instruction .)
    FOR             reduce using rule 12 (if_instruction -> IF ( relation_expression ) instruction .)
    WHILE           reduce using rule 12 (if_instruction -> IF ( relation_expression ) instruction .)
    IF              reduce using rule 12 (if_instruction -> IF ( relation_expression ) instruction .)
    ID              reduce using rule 12 (if_instruction -> IF ( relation_expression ) instruction .)
    $end            reduce using rule 12 (if_instruction -> IF ( relation_expression ) instruction .)
    }               reduce using rule 12 (if_instruction -> IF ( relation_expression ) instruction .)
    ELSE            shift and go to state 133


state 131

    (59) vectors -> vectors , [ list_of_ints . ]
    (61) list_of_ints -> list_of_ints . , INTNUM
    ]               shift and go to state 134
    ,               shift and go to state 119


state 132

    (15) for_instruction -> FOR ID = id_int : id_int . instruction
    (3) instruction -> . RETURN expression ;
    (4) instruction -> . CONTINUE ;
    (5) instruction -> . BREAK ;
    (6) instruction -> . print_instruction
    (7) instruction -> . assign_expression
    (8) instruction -> . for_instruction
    (9) instruction -> . while_instruction
    (10) instruction -> . if_instruction
    (11) instruction -> . { instructions }
    (18) print_instruction -> . PRINT value ;
    (42) assign_expression -> . id_ref DIVIDEASSIGN expression ;
    (43) assign_expression -> . id_ref TIMESASSIGN expression ;
    (44) assign_expression -> . id_ref MINUSASSIGN expression ;
    (45) assign_expression -> . id_ref PLUSASSIGN expression ;
    (46) assign_expression -> . id_ref = expression ;
    (15) for_instruction -> . FOR ID = id_int : id_int instruction
    (14) while_instruction -> . WHILE ( relation_expression ) instruction
    (12) if_instruction -> . IF ( relation_expression ) instruction
    (13) if_instruction -> . IF ( relation_expression ) instruction ELSE instruction
    (48) id_ref -> . matrix_ref
    (49) id_ref -> . ID
    (47) matrix_ref -> . ID [ list_of_ints ]
    RETURN          shift and go to state 3
    CONTINUE        shift and go to state 4
    BREAK           shift and go to state 5
    {               shift and go to state 11
    PRINT           shift and go to state 12
    FOR             shift and go to state 14
    WHILE           shift and go to state 16
    IF              shift and go to state 17
    ID              shift and go to state 15

    instruction                    shift and go to state 135
    print_instruction              shift and go to state 6
    assign_expression              shift and go to state 7
    for_instruction                shift and go to state 8
    while_instruction              shift and go to state 9
    if_instruction                 shift and go to state 10
    id_ref                         shift and go to state 13
    matrix_ref                     shift and go to state 18

state 133

    (13) if_instruction -> IF ( relation_expression ) instruction ELSE . instruction
    (3) instruction -> . RETURN expression ;
    (4) instruction -> . CONTINUE ;
    (5) instruction -> . BREAK ;
    (6) instruction -> . print_instruction
    (7) instruction -> . assign_expression
    (8) instruction -> . for_instruction
    (9) instruction -> . while_instruction
    (10) instruction -> . if_instruction
    (11) instruction -> . { instructions }
    (18) print_instruction -> . PRINT value ;
    (42) assign_expression -> . id_ref DIVIDEASSIGN expression ;
    (43) assign_expression -> . id_ref TIMESASSIGN expression ;
    (44) assign_expression -> . id_ref MINUSASSIGN expression ;
    (45) assign_expression -> . id_ref PLUSASSIGN expression ;
    (46) assign_expression -> . id_ref = expression ;
    (15) for_instruction -> . FOR ID = id_int : id_int instruction
    (14) while_instruction -> . WHILE ( relation_expression ) instruction
    (12) if_instruction -> . IF ( relation_expression ) instruction
    (13) if_instruction -> . IF ( relation_expression ) instruction ELSE instruction
    (48) id_ref -> . matrix_ref
    (49) id_ref -> . ID
    (47) matrix_ref -> . ID [ list_of_ints ]
    RETURN          shift and go to state 3
    CONTINUE        shift and go to state 4
    BREAK           shift and go to state 5
    {               shift and go to state 11
    PRINT           shift and go to state 12
    FOR             shift and go to state 14
    WHILE           shift and go to state 16
    IF              shift and go to state 17
    ID              shift and go to state 15

    instruction                    shift and go to state 136
    print_instruction              shift and go to state 6
    assign_expression              shift and go to state 7
    for_instruction                shift and go to state 8
    while_instruction              shift and go to state 9
    if_instruction                 shift and go to state 10
    id_ref                         shift and go to state 13
    matrix_ref                     shift and go to state 18

state 134

    (59) vectors -> vectors , [ list_of_ints ] .
    ]               reduce using rule 59 (vectors -> vectors , [ list_of_ints ] .)
    ,               reduce using rule 59 (vectors -> vectors , [ list_of_ints ] .)


state 135

    (15) for_instruction -> FOR ID = id_int : id_int instruction .
    RETURN          reduce using rule 15 (for_instruction -> FOR ID = id_int : id_int instruction .)
    CONTINUE        reduce using rule 15 (for_instruction -> FOR ID = id_int : id_int instruction .)
    BREAK           reduce using rule 15 (for_instruction -> FOR ID = id_int : id_int instruction .)
    {               reduce using rule 15 (for_instruction -> FOR ID = id_int : id_int instruction .)
    PRINT           reduce using rule 15 (for_instruction -> FOR ID = id_int : id_int instruction .)
    FOR             reduce using rule 15 (for_instruction -> FOR ID = id_int : id_int instruction .)
    WHILE           reduce using rule 15 (for_instruction -> FOR ID = id_int : id_int instruction .)
    IF              reduce using rule 15 (for_instruction -> FOR ID = id_int : id_int instruction .)
    ID              reduce using rule 15 (for_instruction -> FOR ID = id_int : id_int instruction .)
    $end            reduce using rule 15 (for_instruction -> FOR ID = id_int : id_int instruction .)
    }               reduce using rule 15 (for_instruction -> FOR ID = id_int : id_int instruction .)
    ELSE            reduce using rule 15 (for_instruction -> FOR ID = id_int : id_int instruction .)


state 136

    (13) if_instruction -> IF ( relation_expression ) instruction ELSE instruction .
    RETURN          reduce using rule 13 (if_instruction -> IF ( relation_expression ) instruction ELSE instruction .)
    CONTINUE        reduce using rule 13 (if_instruction -> IF ( relation_expression ) instruction ELSE instruction .)
    BREAK           reduce using rule 13 (if_instruction -> IF ( relation_expression ) instruction ELSE instruction .)
    {               reduce using rule 13 (if_instruction -> IF ( relation_expression ) instruction ELSE instruction .)
    PRINT           reduce using rule 13 (if_instruction -> IF ( relation_expression ) instruction ELSE instruction .)
    FOR             reduce using rule 13 (if_instruction -> IF ( relation_expression ) instruction ELSE instruction .)
    WHILE           reduce using rule 13 (if_instruction -> IF ( relation_expression ) instruction ELSE instruction .)
    IF              reduce using rule 13 (if_instruction -> IF ( relation_expression ) instruction ELSE instruction .)
    ID              reduce using rule 13 (if_instruction -> IF ( relation_expression ) instruction ELSE instruction .)
    $end            reduce using rule 13 (if_instruction -> IF ( relation_expression ) instruction ELSE instruction .)
    }               reduce using rule 13 (if_instruction -> IF ( relation_expression ) instruction ELSE instruction .)
    ELSE            reduce using rule 13 (if_instruction -> IF ( relation_expression ) instruction ELSE instruction .)
