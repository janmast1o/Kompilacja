Grammar:

Rule 0     S' -> instructions
Rule 1     instructions -> instruction
Rule 2     instructions -> instructions instruction
Rule 3     instruction -> RETURN right_hand_side_expression ;
Rule 4     instruction -> CONTINUE ;
Rule 5     instruction -> BREAK ;
Rule 6     instruction -> { instructions }
Rule 7     instruction -> print_instruction
Rule 8     instruction -> full_line_instruction
Rule 9     instruction -> for_instruction
Rule 10    instruction -> while_instruction
Rule 11    instruction -> if_instruction
Rule 12    if_instruction -> IF ( relation_expression ) instruction  [precedence=nonassoc, level=1]
Rule 13    if_instruction -> IF ( relation_expression ) instruction ELSE instruction  [precedence=nonassoc, level=2]
Rule 14    while_instruction -> WHILE ( relation_expression ) instruction
Rule 15    for_instruction -> FOR ID = id_int : id_int instruction
Rule 16    id_int -> ID
Rule 17    id_int -> INTNUM
Rule 18    print_instruction -> PRINT printables ;
Rule 19    printables -> matrix_ref
Rule 20    printables -> value
Rule 21    printables -> printables , value
Rule 22    value -> STRING
Rule 23    value -> ID
Rule 24    value -> FLOATNUM
Rule 25    value -> INTNUM
Rule 26    right_hand_side_expression -> matrix
Rule 27    right_hand_side_expression -> vector
Rule 28    right_hand_side_expression -> right_hand_side_expression DOTDIVIDE right_hand_side_expression  [precedence=left, level=5]
Rule 29    right_hand_side_expression -> right_hand_side_expression DOTTIMES right_hand_side_expression  [precedence=left, level=5]
Rule 30    right_hand_side_expression -> right_hand_side_expression DOTMINUS right_hand_side_expression  [precedence=left, level=4]
Rule 31    right_hand_side_expression -> right_hand_side_expression DOTPLUS right_hand_side_expression  [precedence=left, level=4]
Rule 32    right_hand_side_expression -> right_hand_side_expression / right_hand_side_expression  [precedence=left, level=5]
Rule 33    right_hand_side_expression -> right_hand_side_expression * right_hand_side_expression  [precedence=left, level=5]
Rule 34    right_hand_side_expression -> right_hand_side_expression - right_hand_side_expression  [precedence=left, level=4]
Rule 35    right_hand_side_expression -> right_hand_side_expression + right_hand_side_expression  [precedence=left, level=4]
Rule 36    right_hand_side_expression -> matrix '  [precedence=nonassoc, level=6]
Rule 37    right_hand_side_expression -> matrix_ref
Rule 38    right_hand_side_expression -> value
Rule 39    right_hand_side_expression -> matrix_functions
Rule 40    right_hand_side_expression -> ( right_hand_side_expression )
Rule 41    right_hand_side_expression -> relation_expression
Rule 42    right_hand_side_expression -> unary
Rule 43    unary -> - right_hand_side_expression  [precedence=right, level=7]
Rule 44    full_line_instruction -> ( full_line_instruction )
Rule 45    full_line_instruction -> assign_instruction
Rule 46    assign_instruction -> ID DIVIDEASSIGN right_hand_side_expression ;
Rule 47    assign_instruction -> ID TIMESASSIGN right_hand_side_expression ;
Rule 48    assign_instruction -> ID MINUSASSIGN right_hand_side_expression ;
Rule 49    assign_instruction -> ID PLUSASSIGN right_hand_side_expression ;
Rule 50    assign_instruction -> ID = right_hand_side_expression ;
Rule 51    assign_instruction -> matrix_ref DIVIDEASSIGN right_hand_side_expression ;
Rule 52    assign_instruction -> matrix_ref TIMESASSIGN right_hand_side_expression ;
Rule 53    assign_instruction -> matrix_ref MINUSASSIGN right_hand_side_expression ;
Rule 54    assign_instruction -> matrix_ref PLUSASSIGN right_hand_side_expression ;
Rule 55    assign_instruction -> matrix_ref = right_hand_side_expression ;
Rule 56    matrix_ref -> ID [ id_ints ]
Rule 57    id_ints -> id_int
Rule 58    id_ints -> id_ints , id_int
Rule 59    relation_expression -> right_hand_side_expression NE right_hand_side_expression  [precedence=nonassoc, level=3]
Rule 60    relation_expression -> right_hand_side_expression EQ right_hand_side_expression  [precedence=nonassoc, level=3]
Rule 61    relation_expression -> right_hand_side_expression GE right_hand_side_expression  [precedence=nonassoc, level=3]
Rule 62    relation_expression -> right_hand_side_expression LE right_hand_side_expression  [precedence=nonassoc, level=3]
Rule 63    relation_expression -> right_hand_side_expression GT right_hand_side_expression  [precedence=nonassoc, level=3]
Rule 64    relation_expression -> right_hand_side_expression LT right_hand_side_expression  [precedence=nonassoc, level=3]
Rule 65    matrix_functions -> EYE ( id_int , id_int )
Rule 66    matrix_functions -> EYE ( id_int )
Rule 67    matrix_functions -> ONES ( id_int , id_int )
Rule 68    matrix_functions -> ONES ( id_int )
Rule 69    matrix_functions -> ZEROS ( id_int , id_int )
Rule 70    matrix_functions -> ZEROS ( id_int )
Rule 71    vector -> [ ]
Rule 72    vector -> [ variables ]
Rule 73    matrix -> [ vectors ]
Rule 74    vectors -> vector
Rule 75    vectors -> vectors , vector
Rule 76    variables -> value
Rule 77    variables -> variables , value

Terminals, with rules where they appear:

'                    : 36
(                    : 12 13 14 40 44 65 66 67 68 69 70
)                    : 12 13 14 40 44 65 66 67 68 69 70
*                    : 33
+                    : 35
,                    : 21 58 65 67 69 75 77
-                    : 34 43
/                    : 32
:                    : 15
;                    : 3 4 5 18 46 47 48 49 50 51 52 53 54 55
=                    : 15 50 55
BREAK                : 5
CONTINUE             : 4
DIVIDEASSIGN         : 46 51
DOTDIVIDE            : 28
DOTMINUS             : 30
DOTPLUS              : 31
DOTTIMES             : 29
ELSE                 : 13
EQ                   : 60
EYE                  : 65 66
FLOATNUM             : 24
FOR                  : 15
GE                   : 61
GT                   : 63
ID                   : 15 16 23 46 47 48 49 50 56
IF                   : 12 13
INTNUM               : 17 25
LE                   : 62
LT                   : 64
MINUSASSIGN          : 48 53
NE                   : 59
ONES                 : 67 68
PLUSASSIGN           : 49 54
PRINT                : 18
RETURN               : 3
STRING               : 22
TIMESASSIGN          : 47 52
WHILE                : 14
ZEROS                : 69 70
[                    : 56 71 72 73
]                    : 56 71 72 73
error                : 
{                    : 6
}                    : 6

Nonterminals, with rules where they appear:

assign_instruction   : 45
for_instruction      : 9
full_line_instruction : 8 44
id_int               : 15 15 57 58 65 65 66 67 67 68 69 69 70
id_ints              : 56 58
if_instruction       : 11
instruction          : 1 2 12 13 13 14 15
instructions         : 2 6 0
matrix               : 26 36
matrix_functions     : 39
matrix_ref           : 19 37 51 52 53 54 55
print_instruction    : 7
printables           : 18 21
relation_expression  : 12 13 14 41
right_hand_side_expression : 3 28 28 29 29 30 30 31 31 32 32 33 33 34 34 35 35 40 43 46 47 48 49 50 51 52 53 54 55 59 59 60 60 61 61 62 62 63 63 64 64
unary                : 42
value                : 20 21 38 76 77
variables            : 72 77
vector               : 27 74 75
vectors              : 73 75
while_instruction    : 10


state 0

    (0) S' -> . instructions
    (1) instructions -> . instruction
    (2) instructions -> . instructions instruction
    (3) instruction -> . RETURN right_hand_side_expression ;
    (4) instruction -> . CONTINUE ;
    (5) instruction -> . BREAK ;
    (6) instruction -> . { instructions }
    (7) instruction -> . print_instruction
    (8) instruction -> . full_line_instruction
    (9) instruction -> . for_instruction
    (10) instruction -> . while_instruction
    (11) instruction -> . if_instruction
    (18) print_instruction -> . PRINT printables ;
    (44) full_line_instruction -> . ( full_line_instruction )
    (45) full_line_instruction -> . assign_instruction
    (15) for_instruction -> . FOR ID = id_int : id_int instruction
    (14) while_instruction -> . WHILE ( relation_expression ) instruction
    (12) if_instruction -> . IF ( relation_expression ) instruction
    (13) if_instruction -> . IF ( relation_expression ) instruction ELSE instruction
    (46) assign_instruction -> . ID DIVIDEASSIGN right_hand_side_expression ;
    (47) assign_instruction -> . ID TIMESASSIGN right_hand_side_expression ;
    (48) assign_instruction -> . ID MINUSASSIGN right_hand_side_expression ;
    (49) assign_instruction -> . ID PLUSASSIGN right_hand_side_expression ;
    (50) assign_instruction -> . ID = right_hand_side_expression ;
    (51) assign_instruction -> . matrix_ref DIVIDEASSIGN right_hand_side_expression ;
    (52) assign_instruction -> . matrix_ref TIMESASSIGN right_hand_side_expression ;
    (53) assign_instruction -> . matrix_ref MINUSASSIGN right_hand_side_expression ;
    (54) assign_instruction -> . matrix_ref PLUSASSIGN right_hand_side_expression ;
    (55) assign_instruction -> . matrix_ref = right_hand_side_expression ;
    (56) matrix_ref -> . ID [ id_ints ]
    RETURN          shift and go to state 3
    CONTINUE        shift and go to state 4
    BREAK           shift and go to state 5
    {               shift and go to state 6
    PRINT           shift and go to state 12
    (               shift and go to state 13
    FOR             shift and go to state 15
    WHILE           shift and go to state 17
    IF              shift and go to state 18
    ID              shift and go to state 16

    instructions                   shift and go to state 1
    instruction                    shift and go to state 2
    print_instruction              shift and go to state 7
    full_line_instruction          shift and go to state 8
    for_instruction                shift and go to state 9
    while_instruction              shift and go to state 10
    if_instruction                 shift and go to state 11
    assign_instruction             shift and go to state 14
    matrix_ref                     shift and go to state 19

state 1

    (0) S' -> instructions .
    (2) instructions -> instructions . instruction
    (3) instruction -> . RETURN right_hand_side_expression ;
    (4) instruction -> . CONTINUE ;
    (5) instruction -> . BREAK ;
    (6) instruction -> . { instructions }
    (7) instruction -> . print_instruction
    (8) instruction -> . full_line_instruction
    (9) instruction -> . for_instruction
    (10) instruction -> . while_instruction
    (11) instruction -> . if_instruction
    (18) print_instruction -> . PRINT printables ;
    (44) full_line_instruction -> . ( full_line_instruction )
    (45) full_line_instruction -> . assign_instruction
    (15) for_instruction -> . FOR ID = id_int : id_int instruction
    (14) while_instruction -> . WHILE ( relation_expression ) instruction
    (12) if_instruction -> . IF ( relation_expression ) instruction
    (13) if_instruction -> . IF ( relation_expression ) instruction ELSE instruction
    (46) assign_instruction -> . ID DIVIDEASSIGN right_hand_side_expression ;
    (47) assign_instruction -> . ID TIMESASSIGN right_hand_side_expression ;
    (48) assign_instruction -> . ID MINUSASSIGN right_hand_side_expression ;
    (49) assign_instruction -> . ID PLUSASSIGN right_hand_side_expression ;
    (50) assign_instruction -> . ID = right_hand_side_expression ;
    (51) assign_instruction -> . matrix_ref DIVIDEASSIGN right_hand_side_expression ;
    (52) assign_instruction -> . matrix_ref TIMESASSIGN right_hand_side_expression ;
    (53) assign_instruction -> . matrix_ref MINUSASSIGN right_hand_side_expression ;
    (54) assign_instruction -> . matrix_ref PLUSASSIGN right_hand_side_expression ;
    (55) assign_instruction -> . matrix_ref = right_hand_side_expression ;
    (56) matrix_ref -> . ID [ id_ints ]
    RETURN          shift and go to state 3
    CONTINUE        shift and go to state 4
    BREAK           shift and go to state 5
    {               shift and go to state 6
    PRINT           shift and go to state 12
    (               shift and go to state 13
    FOR             shift and go to state 15
    WHILE           shift and go to state 17
    IF              shift and go to state 18
    ID              shift and go to state 16

    instruction                    shift and go to state 20
    print_instruction              shift and go to state 7
    full_line_instruction          shift and go to state 8
    for_instruction                shift and go to state 9
    while_instruction              shift and go to state 10
    if_instruction                 shift and go to state 11
    assign_instruction             shift and go to state 14
    matrix_ref                     shift and go to state 19

state 2

    (1) instructions -> instruction .
    RETURN          reduce using rule 1 (instructions -> instruction .)
    CONTINUE        reduce using rule 1 (instructions -> instruction .)
    BREAK           reduce using rule 1 (instructions -> instruction .)
    {               reduce using rule 1 (instructions -> instruction .)
    PRINT           reduce using rule 1 (instructions -> instruction .)
    (               reduce using rule 1 (instructions -> instruction .)
    FOR             reduce using rule 1 (instructions -> instruction .)
    WHILE           reduce using rule 1 (instructions -> instruction .)
    IF              reduce using rule 1 (instructions -> instruction .)
    ID              reduce using rule 1 (instructions -> instruction .)
    $end            reduce using rule 1 (instructions -> instruction .)
    }               reduce using rule 1 (instructions -> instruction .)


state 3

    (3) instruction -> RETURN . right_hand_side_expression ;
    (26) right_hand_side_expression -> . matrix
    (27) right_hand_side_expression -> . vector
    (28) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (29) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (36) right_hand_side_expression -> . matrix '
    (37) right_hand_side_expression -> . matrix_ref
    (38) right_hand_side_expression -> . value
    (39) right_hand_side_expression -> . matrix_functions
    (40) right_hand_side_expression -> . ( right_hand_side_expression )
    (41) right_hand_side_expression -> . relation_expression
    (42) right_hand_side_expression -> . unary
    (73) matrix -> . [ vectors ]
    (71) vector -> . [ ]
    (72) vector -> . [ variables ]
    (56) matrix_ref -> . ID [ id_ints ]
    (22) value -> . STRING
    (23) value -> . ID
    (24) value -> . FLOATNUM
    (25) value -> . INTNUM
    (65) matrix_functions -> . EYE ( id_int , id_int )
    (66) matrix_functions -> . EYE ( id_int )
    (67) matrix_functions -> . ONES ( id_int , id_int )
    (68) matrix_functions -> . ONES ( id_int )
    (69) matrix_functions -> . ZEROS ( id_int , id_int )
    (70) matrix_functions -> . ZEROS ( id_int )
    (59) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (61) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (62) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (63) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (64) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (43) unary -> . - right_hand_side_expression
    (               shift and go to state 28
    [               shift and go to state 31
    ID              shift and go to state 32
    STRING          shift and go to state 33
    FLOATNUM        shift and go to state 34
    INTNUM          shift and go to state 35
    EYE             shift and go to state 36
    ONES            shift and go to state 37
    ZEROS           shift and go to state 38
    -               shift and go to state 24

    right_hand_side_expression     shift and go to state 21
    matrix                         shift and go to state 22
    vector                         shift and go to state 23
    matrix_ref                     shift and go to state 25
    value                          shift and go to state 26
    matrix_functions               shift and go to state 27
    relation_expression            shift and go to state 29
    unary                          shift and go to state 30

state 4

    (4) instruction -> CONTINUE . ;
    ;               shift and go to state 39


state 5

    (5) instruction -> BREAK . ;
    ;               shift and go to state 40


state 6

    (6) instruction -> { . instructions }
    (1) instructions -> . instruction
    (2) instructions -> . instructions instruction
    (3) instruction -> . RETURN right_hand_side_expression ;
    (4) instruction -> . CONTINUE ;
    (5) instruction -> . BREAK ;
    (6) instruction -> . { instructions }
    (7) instruction -> . print_instruction
    (8) instruction -> . full_line_instruction
    (9) instruction -> . for_instruction
    (10) instruction -> . while_instruction
    (11) instruction -> . if_instruction
    (18) print_instruction -> . PRINT printables ;
    (44) full_line_instruction -> . ( full_line_instruction )
    (45) full_line_instruction -> . assign_instruction
    (15) for_instruction -> . FOR ID = id_int : id_int instruction
    (14) while_instruction -> . WHILE ( relation_expression ) instruction
    (12) if_instruction -> . IF ( relation_expression ) instruction
    (13) if_instruction -> . IF ( relation_expression ) instruction ELSE instruction
    (46) assign_instruction -> . ID DIVIDEASSIGN right_hand_side_expression ;
    (47) assign_instruction -> . ID TIMESASSIGN right_hand_side_expression ;
    (48) assign_instruction -> . ID MINUSASSIGN right_hand_side_expression ;
    (49) assign_instruction -> . ID PLUSASSIGN right_hand_side_expression ;
    (50) assign_instruction -> . ID = right_hand_side_expression ;
    (51) assign_instruction -> . matrix_ref DIVIDEASSIGN right_hand_side_expression ;
    (52) assign_instruction -> . matrix_ref TIMESASSIGN right_hand_side_expression ;
    (53) assign_instruction -> . matrix_ref MINUSASSIGN right_hand_side_expression ;
    (54) assign_instruction -> . matrix_ref PLUSASSIGN right_hand_side_expression ;
    (55) assign_instruction -> . matrix_ref = right_hand_side_expression ;
    (56) matrix_ref -> . ID [ id_ints ]
    RETURN          shift and go to state 3
    CONTINUE        shift and go to state 4
    BREAK           shift and go to state 5
    {               shift and go to state 6
    PRINT           shift and go to state 12
    (               shift and go to state 13
    FOR             shift and go to state 15
    WHILE           shift and go to state 17
    IF              shift and go to state 18
    ID              shift and go to state 16

    instructions                   shift and go to state 41
    instruction                    shift and go to state 2
    print_instruction              shift and go to state 7
    full_line_instruction          shift and go to state 8
    for_instruction                shift and go to state 9
    while_instruction              shift and go to state 10
    if_instruction                 shift and go to state 11
    assign_instruction             shift and go to state 14
    matrix_ref                     shift and go to state 19

state 7

    (7) instruction -> print_instruction .
    RETURN          reduce using rule 7 (instruction -> print_instruction .)
    CONTINUE        reduce using rule 7 (instruction -> print_instruction .)
    BREAK           reduce using rule 7 (instruction -> print_instruction .)
    {               reduce using rule 7 (instruction -> print_instruction .)
    PRINT           reduce using rule 7 (instruction -> print_instruction .)
    (               reduce using rule 7 (instruction -> print_instruction .)
    FOR             reduce using rule 7 (instruction -> print_instruction .)
    WHILE           reduce using rule 7 (instruction -> print_instruction .)
    IF              reduce using rule 7 (instruction -> print_instruction .)
    ID              reduce using rule 7 (instruction -> print_instruction .)
    $end            reduce using rule 7 (instruction -> print_instruction .)
    }               reduce using rule 7 (instruction -> print_instruction .)
    ELSE            reduce using rule 7 (instruction -> print_instruction .)


state 8

    (8) instruction -> full_line_instruction .
    RETURN          reduce using rule 8 (instruction -> full_line_instruction .)
    CONTINUE        reduce using rule 8 (instruction -> full_line_instruction .)
    BREAK           reduce using rule 8 (instruction -> full_line_instruction .)
    {               reduce using rule 8 (instruction -> full_line_instruction .)
    PRINT           reduce using rule 8 (instruction -> full_line_instruction .)
    (               reduce using rule 8 (instruction -> full_line_instruction .)
    FOR             reduce using rule 8 (instruction -> full_line_instruction .)
    WHILE           reduce using rule 8 (instruction -> full_line_instruction .)
    IF              reduce using rule 8 (instruction -> full_line_instruction .)
    ID              reduce using rule 8 (instruction -> full_line_instruction .)
    $end            reduce using rule 8 (instruction -> full_line_instruction .)
    }               reduce using rule 8 (instruction -> full_line_instruction .)
    ELSE            reduce using rule 8 (instruction -> full_line_instruction .)


state 9

    (9) instruction -> for_instruction .
    RETURN          reduce using rule 9 (instruction -> for_instruction .)
    CONTINUE        reduce using rule 9 (instruction -> for_instruction .)
    BREAK           reduce using rule 9 (instruction -> for_instruction .)
    {               reduce using rule 9 (instruction -> for_instruction .)
    PRINT           reduce using rule 9 (instruction -> for_instruction .)
    (               reduce using rule 9 (instruction -> for_instruction .)
    FOR             reduce using rule 9 (instruction -> for_instruction .)
    WHILE           reduce using rule 9 (instruction -> for_instruction .)
    IF              reduce using rule 9 (instruction -> for_instruction .)
    ID              reduce using rule 9 (instruction -> for_instruction .)
    $end            reduce using rule 9 (instruction -> for_instruction .)
    }               reduce using rule 9 (instruction -> for_instruction .)
    ELSE            reduce using rule 9 (instruction -> for_instruction .)


state 10

    (10) instruction -> while_instruction .
    RETURN          reduce using rule 10 (instruction -> while_instruction .)
    CONTINUE        reduce using rule 10 (instruction -> while_instruction .)
    BREAK           reduce using rule 10 (instruction -> while_instruction .)
    {               reduce using rule 10 (instruction -> while_instruction .)
    PRINT           reduce using rule 10 (instruction -> while_instruction .)
    (               reduce using rule 10 (instruction -> while_instruction .)
    FOR             reduce using rule 10 (instruction -> while_instruction .)
    WHILE           reduce using rule 10 (instruction -> while_instruction .)
    IF              reduce using rule 10 (instruction -> while_instruction .)
    ID              reduce using rule 10 (instruction -> while_instruction .)
    $end            reduce using rule 10 (instruction -> while_instruction .)
    }               reduce using rule 10 (instruction -> while_instruction .)
    ELSE            reduce using rule 10 (instruction -> while_instruction .)


state 11

    (11) instruction -> if_instruction .
    RETURN          reduce using rule 11 (instruction -> if_instruction .)
    CONTINUE        reduce using rule 11 (instruction -> if_instruction .)
    BREAK           reduce using rule 11 (instruction -> if_instruction .)
    {               reduce using rule 11 (instruction -> if_instruction .)
    PRINT           reduce using rule 11 (instruction -> if_instruction .)
    (               reduce using rule 11 (instruction -> if_instruction .)
    FOR             reduce using rule 11 (instruction -> if_instruction .)
    WHILE           reduce using rule 11 (instruction -> if_instruction .)
    IF              reduce using rule 11 (instruction -> if_instruction .)
    ID              reduce using rule 11 (instruction -> if_instruction .)
    $end            reduce using rule 11 (instruction -> if_instruction .)
    }               reduce using rule 11 (instruction -> if_instruction .)
    ELSE            reduce using rule 11 (instruction -> if_instruction .)


state 12

    (18) print_instruction -> PRINT . printables ;
    (19) printables -> . matrix_ref
    (20) printables -> . value
    (21) printables -> . printables , value
    (56) matrix_ref -> . ID [ id_ints ]
    (22) value -> . STRING
    (23) value -> . ID
    (24) value -> . FLOATNUM
    (25) value -> . INTNUM
    ID              shift and go to state 32
    STRING          shift and go to state 33
    FLOATNUM        shift and go to state 34
    INTNUM          shift and go to state 35

    printables                     shift and go to state 42
    matrix_ref                     shift and go to state 43
    value                          shift and go to state 44

state 13

    (44) full_line_instruction -> ( . full_line_instruction )
    (44) full_line_instruction -> . ( full_line_instruction )
    (45) full_line_instruction -> . assign_instruction
    (46) assign_instruction -> . ID DIVIDEASSIGN right_hand_side_expression ;
    (47) assign_instruction -> . ID TIMESASSIGN right_hand_side_expression ;
    (48) assign_instruction -> . ID MINUSASSIGN right_hand_side_expression ;
    (49) assign_instruction -> . ID PLUSASSIGN right_hand_side_expression ;
    (50) assign_instruction -> . ID = right_hand_side_expression ;
    (51) assign_instruction -> . matrix_ref DIVIDEASSIGN right_hand_side_expression ;
    (52) assign_instruction -> . matrix_ref TIMESASSIGN right_hand_side_expression ;
    (53) assign_instruction -> . matrix_ref MINUSASSIGN right_hand_side_expression ;
    (54) assign_instruction -> . matrix_ref PLUSASSIGN right_hand_side_expression ;
    (55) assign_instruction -> . matrix_ref = right_hand_side_expression ;
    (56) matrix_ref -> . ID [ id_ints ]
    (               shift and go to state 13
    ID              shift and go to state 16

    full_line_instruction          shift and go to state 45
    assign_instruction             shift and go to state 14
    matrix_ref                     shift and go to state 19

state 14

    (45) full_line_instruction -> assign_instruction .
    RETURN          reduce using rule 45 (full_line_instruction -> assign_instruction .)
    CONTINUE        reduce using rule 45 (full_line_instruction -> assign_instruction .)
    BREAK           reduce using rule 45 (full_line_instruction -> assign_instruction .)
    {               reduce using rule 45 (full_line_instruction -> assign_instruction .)
    PRINT           reduce using rule 45 (full_line_instruction -> assign_instruction .)
    (               reduce using rule 45 (full_line_instruction -> assign_instruction .)
    FOR             reduce using rule 45 (full_line_instruction -> assign_instruction .)
    WHILE           reduce using rule 45 (full_line_instruction -> assign_instruction .)
    IF              reduce using rule 45 (full_line_instruction -> assign_instruction .)
    ID              reduce using rule 45 (full_line_instruction -> assign_instruction .)
    $end            reduce using rule 45 (full_line_instruction -> assign_instruction .)
    }               reduce using rule 45 (full_line_instruction -> assign_instruction .)
    )               reduce using rule 45 (full_line_instruction -> assign_instruction .)
    ELSE            reduce using rule 45 (full_line_instruction -> assign_instruction .)


state 15

    (15) for_instruction -> FOR . ID = id_int : id_int instruction
    ID              shift and go to state 46


state 16

    (46) assign_instruction -> ID . DIVIDEASSIGN right_hand_side_expression ;
    (47) assign_instruction -> ID . TIMESASSIGN right_hand_side_expression ;
    (48) assign_instruction -> ID . MINUSASSIGN right_hand_side_expression ;
    (49) assign_instruction -> ID . PLUSASSIGN right_hand_side_expression ;
    (50) assign_instruction -> ID . = right_hand_side_expression ;
    (56) matrix_ref -> ID . [ id_ints ]
    DIVIDEASSIGN    shift and go to state 47
    TIMESASSIGN     shift and go to state 48
    MINUSASSIGN     shift and go to state 49
    PLUSASSIGN      shift and go to state 50
    =               shift and go to state 51
    [               shift and go to state 52


state 17

    (14) while_instruction -> WHILE . ( relation_expression ) instruction
    (               shift and go to state 53


state 18

    (12) if_instruction -> IF . ( relation_expression ) instruction
    (13) if_instruction -> IF . ( relation_expression ) instruction ELSE instruction
    (               shift and go to state 54


state 19

    (51) assign_instruction -> matrix_ref . DIVIDEASSIGN right_hand_side_expression ;
    (52) assign_instruction -> matrix_ref . TIMESASSIGN right_hand_side_expression ;
    (53) assign_instruction -> matrix_ref . MINUSASSIGN right_hand_side_expression ;
    (54) assign_instruction -> matrix_ref . PLUSASSIGN right_hand_side_expression ;
    (55) assign_instruction -> matrix_ref . = right_hand_side_expression ;
    DIVIDEASSIGN    shift and go to state 55
    TIMESASSIGN     shift and go to state 56
    MINUSASSIGN     shift and go to state 57
    PLUSASSIGN      shift and go to state 58
    =               shift and go to state 59


state 20

    (2) instructions -> instructions instruction .
    RETURN          reduce using rule 2 (instructions -> instructions instruction .)
    CONTINUE        reduce using rule 2 (instructions -> instructions instruction .)
    BREAK           reduce using rule 2 (instructions -> instructions instruction .)
    {               reduce using rule 2 (instructions -> instructions instruction .)
    PRINT           reduce using rule 2 (instructions -> instructions instruction .)
    (               reduce using rule 2 (instructions -> instructions instruction .)
    FOR             reduce using rule 2 (instructions -> instructions instruction .)
    WHILE           reduce using rule 2 (instructions -> instructions instruction .)
    IF              reduce using rule 2 (instructions -> instructions instruction .)
    ID              reduce using rule 2 (instructions -> instructions instruction .)
    $end            reduce using rule 2 (instructions -> instructions instruction .)
    }               reduce using rule 2 (instructions -> instructions instruction .)


state 21

    (3) instruction -> RETURN right_hand_side_expression . ;
    (28) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (29) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    (59) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (61) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (62) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (63) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (64) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
    ;               shift and go to state 60
    DOTDIVIDE       shift and go to state 61
    DOTTIMES        shift and go to state 62
    DOTMINUS        shift and go to state 63
    DOTPLUS         shift and go to state 64
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68
    NE              shift and go to state 69
    EQ              shift and go to state 70
    GE              shift and go to state 71
    LE              shift and go to state 72
    GT              shift and go to state 73
    LT              shift and go to state 74


state 22

    (26) right_hand_side_expression -> matrix .
    (36) right_hand_side_expression -> matrix . '
    ;               reduce using rule 26 (right_hand_side_expression -> matrix .)
    DOTDIVIDE       reduce using rule 26 (right_hand_side_expression -> matrix .)
    DOTTIMES        reduce using rule 26 (right_hand_side_expression -> matrix .)
    DOTMINUS        reduce using rule 26 (right_hand_side_expression -> matrix .)
    DOTPLUS         reduce using rule 26 (right_hand_side_expression -> matrix .)
    /               reduce using rule 26 (right_hand_side_expression -> matrix .)
    *               reduce using rule 26 (right_hand_side_expression -> matrix .)
    -               reduce using rule 26 (right_hand_side_expression -> matrix .)
    +               reduce using rule 26 (right_hand_side_expression -> matrix .)
    NE              reduce using rule 26 (right_hand_side_expression -> matrix .)
    EQ              reduce using rule 26 (right_hand_side_expression -> matrix .)
    GE              reduce using rule 26 (right_hand_side_expression -> matrix .)
    LE              reduce using rule 26 (right_hand_side_expression -> matrix .)
    GT              reduce using rule 26 (right_hand_side_expression -> matrix .)
    LT              reduce using rule 26 (right_hand_side_expression -> matrix .)
    )               reduce using rule 26 (right_hand_side_expression -> matrix .)
    '               shift and go to state 75


state 23

    (27) right_hand_side_expression -> vector .
    ;               reduce using rule 27 (right_hand_side_expression -> vector .)
    DOTDIVIDE       reduce using rule 27 (right_hand_side_expression -> vector .)
    DOTTIMES        reduce using rule 27 (right_hand_side_expression -> vector .)
    DOTMINUS        reduce using rule 27 (right_hand_side_expression -> vector .)
    DOTPLUS         reduce using rule 27 (right_hand_side_expression -> vector .)
    /               reduce using rule 27 (right_hand_side_expression -> vector .)
    *               reduce using rule 27 (right_hand_side_expression -> vector .)
    -               reduce using rule 27 (right_hand_side_expression -> vector .)
    +               reduce using rule 27 (right_hand_side_expression -> vector .)
    NE              reduce using rule 27 (right_hand_side_expression -> vector .)
    EQ              reduce using rule 27 (right_hand_side_expression -> vector .)
    GE              reduce using rule 27 (right_hand_side_expression -> vector .)
    LE              reduce using rule 27 (right_hand_side_expression -> vector .)
    GT              reduce using rule 27 (right_hand_side_expression -> vector .)
    LT              reduce using rule 27 (right_hand_side_expression -> vector .)
    )               reduce using rule 27 (right_hand_side_expression -> vector .)


state 24

    (43) unary -> - . right_hand_side_expression
    (26) right_hand_side_expression -> . matrix
    (27) right_hand_side_expression -> . vector
    (28) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (29) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (36) right_hand_side_expression -> . matrix '
    (37) right_hand_side_expression -> . matrix_ref
    (38) right_hand_side_expression -> . value
    (39) right_hand_side_expression -> . matrix_functions
    (40) right_hand_side_expression -> . ( right_hand_side_expression )
    (41) right_hand_side_expression -> . relation_expression
    (42) right_hand_side_expression -> . unary
    (73) matrix -> . [ vectors ]
    (71) vector -> . [ ]
    (72) vector -> . [ variables ]
    (56) matrix_ref -> . ID [ id_ints ]
    (22) value -> . STRING
    (23) value -> . ID
    (24) value -> . FLOATNUM
    (25) value -> . INTNUM
    (65) matrix_functions -> . EYE ( id_int , id_int )
    (66) matrix_functions -> . EYE ( id_int )
    (67) matrix_functions -> . ONES ( id_int , id_int )
    (68) matrix_functions -> . ONES ( id_int )
    (69) matrix_functions -> . ZEROS ( id_int , id_int )
    (70) matrix_functions -> . ZEROS ( id_int )
    (59) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (61) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (62) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (63) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (64) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (43) unary -> . - right_hand_side_expression
    (               shift and go to state 28
    [               shift and go to state 31
    ID              shift and go to state 32
    STRING          shift and go to state 33
    FLOATNUM        shift and go to state 34
    INTNUM          shift and go to state 35
    EYE             shift and go to state 36
    ONES            shift and go to state 37
    ZEROS           shift and go to state 38
    -               shift and go to state 24

    right_hand_side_expression     shift and go to state 76
    matrix                         shift and go to state 22
    vector                         shift and go to state 23
    matrix_ref                     shift and go to state 25
    value                          shift and go to state 26
    matrix_functions               shift and go to state 27
    relation_expression            shift and go to state 29
    unary                          shift and go to state 30

state 25

    (37) right_hand_side_expression -> matrix_ref .
    ;               reduce using rule 37 (right_hand_side_expression -> matrix_ref .)
    DOTDIVIDE       reduce using rule 37 (right_hand_side_expression -> matrix_ref .)
    DOTTIMES        reduce using rule 37 (right_hand_side_expression -> matrix_ref .)
    DOTMINUS        reduce using rule 37 (right_hand_side_expression -> matrix_ref .)
    DOTPLUS         reduce using rule 37 (right_hand_side_expression -> matrix_ref .)
    /               reduce using rule 37 (right_hand_side_expression -> matrix_ref .)
    *               reduce using rule 37 (right_hand_side_expression -> matrix_ref .)
    -               reduce using rule 37 (right_hand_side_expression -> matrix_ref .)
    +               reduce using rule 37 (right_hand_side_expression -> matrix_ref .)
    NE              reduce using rule 37 (right_hand_side_expression -> matrix_ref .)
    EQ              reduce using rule 37 (right_hand_side_expression -> matrix_ref .)
    GE              reduce using rule 37 (right_hand_side_expression -> matrix_ref .)
    LE              reduce using rule 37 (right_hand_side_expression -> matrix_ref .)
    GT              reduce using rule 37 (right_hand_side_expression -> matrix_ref .)
    LT              reduce using rule 37 (right_hand_side_expression -> matrix_ref .)
    )               reduce using rule 37 (right_hand_side_expression -> matrix_ref .)


state 26

    (38) right_hand_side_expression -> value .
    ;               reduce using rule 38 (right_hand_side_expression -> value .)
    DOTDIVIDE       reduce using rule 38 (right_hand_side_expression -> value .)
    DOTTIMES        reduce using rule 38 (right_hand_side_expression -> value .)
    DOTMINUS        reduce using rule 38 (right_hand_side_expression -> value .)
    DOTPLUS         reduce using rule 38 (right_hand_side_expression -> value .)
    /               reduce using rule 38 (right_hand_side_expression -> value .)
    *               reduce using rule 38 (right_hand_side_expression -> value .)
    -               reduce using rule 38 (right_hand_side_expression -> value .)
    +               reduce using rule 38 (right_hand_side_expression -> value .)
    NE              reduce using rule 38 (right_hand_side_expression -> value .)
    EQ              reduce using rule 38 (right_hand_side_expression -> value .)
    GE              reduce using rule 38 (right_hand_side_expression -> value .)
    LE              reduce using rule 38 (right_hand_side_expression -> value .)
    GT              reduce using rule 38 (right_hand_side_expression -> value .)
    LT              reduce using rule 38 (right_hand_side_expression -> value .)
    )               reduce using rule 38 (right_hand_side_expression -> value .)


state 27

    (39) right_hand_side_expression -> matrix_functions .
    ;               reduce using rule 39 (right_hand_side_expression -> matrix_functions .)
    DOTDIVIDE       reduce using rule 39 (right_hand_side_expression -> matrix_functions .)
    DOTTIMES        reduce using rule 39 (right_hand_side_expression -> matrix_functions .)
    DOTMINUS        reduce using rule 39 (right_hand_side_expression -> matrix_functions .)
    DOTPLUS         reduce using rule 39 (right_hand_side_expression -> matrix_functions .)
    /               reduce using rule 39 (right_hand_side_expression -> matrix_functions .)
    *               reduce using rule 39 (right_hand_side_expression -> matrix_functions .)
    -               reduce using rule 39 (right_hand_side_expression -> matrix_functions .)
    +               reduce using rule 39 (right_hand_side_expression -> matrix_functions .)
    NE              reduce using rule 39 (right_hand_side_expression -> matrix_functions .)
    EQ              reduce using rule 39 (right_hand_side_expression -> matrix_functions .)
    GE              reduce using rule 39 (right_hand_side_expression -> matrix_functions .)
    LE              reduce using rule 39 (right_hand_side_expression -> matrix_functions .)
    GT              reduce using rule 39 (right_hand_side_expression -> matrix_functions .)
    LT              reduce using rule 39 (right_hand_side_expression -> matrix_functions .)
    )               reduce using rule 39 (right_hand_side_expression -> matrix_functions .)


state 28

    (40) right_hand_side_expression -> ( . right_hand_side_expression )
    (26) right_hand_side_expression -> . matrix
    (27) right_hand_side_expression -> . vector
    (28) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (29) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (36) right_hand_side_expression -> . matrix '
    (37) right_hand_side_expression -> . matrix_ref
    (38) right_hand_side_expression -> . value
    (39) right_hand_side_expression -> . matrix_functions
    (40) right_hand_side_expression -> . ( right_hand_side_expression )
    (41) right_hand_side_expression -> . relation_expression
    (42) right_hand_side_expression -> . unary
    (73) matrix -> . [ vectors ]
    (71) vector -> . [ ]
    (72) vector -> . [ variables ]
    (56) matrix_ref -> . ID [ id_ints ]
    (22) value -> . STRING
    (23) value -> . ID
    (24) value -> . FLOATNUM
    (25) value -> . INTNUM
    (65) matrix_functions -> . EYE ( id_int , id_int )
    (66) matrix_functions -> . EYE ( id_int )
    (67) matrix_functions -> . ONES ( id_int , id_int )
    (68) matrix_functions -> . ONES ( id_int )
    (69) matrix_functions -> . ZEROS ( id_int , id_int )
    (70) matrix_functions -> . ZEROS ( id_int )
    (59) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (61) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (62) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (63) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (64) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (43) unary -> . - right_hand_side_expression
    (               shift and go to state 28
    [               shift and go to state 31
    ID              shift and go to state 32
    STRING          shift and go to state 33
    FLOATNUM        shift and go to state 34
    INTNUM          shift and go to state 35
    EYE             shift and go to state 36
    ONES            shift and go to state 37
    ZEROS           shift and go to state 38
    -               shift and go to state 24

    right_hand_side_expression     shift and go to state 77
    matrix                         shift and go to state 22
    vector                         shift and go to state 23
    matrix_ref                     shift and go to state 25
    value                          shift and go to state 26
    matrix_functions               shift and go to state 27
    relation_expression            shift and go to state 29
    unary                          shift and go to state 30

state 29

    (41) right_hand_side_expression -> relation_expression .
    ;               reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    DOTDIVIDE       reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    DOTTIMES        reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    DOTMINUS        reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    DOTPLUS         reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    /               reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    *               reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    -               reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    +               reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    NE              reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    EQ              reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    GE              reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    LE              reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    GT              reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    LT              reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    )               reduce using rule 41 (right_hand_side_expression -> relation_expression .)


state 30

    (42) right_hand_side_expression -> unary .
    ;               reduce using rule 42 (right_hand_side_expression -> unary .)
    DOTDIVIDE       reduce using rule 42 (right_hand_side_expression -> unary .)
    DOTTIMES        reduce using rule 42 (right_hand_side_expression -> unary .)
    DOTMINUS        reduce using rule 42 (right_hand_side_expression -> unary .)
    DOTPLUS         reduce using rule 42 (right_hand_side_expression -> unary .)
    /               reduce using rule 42 (right_hand_side_expression -> unary .)
    *               reduce using rule 42 (right_hand_side_expression -> unary .)
    -               reduce using rule 42 (right_hand_side_expression -> unary .)
    +               reduce using rule 42 (right_hand_side_expression -> unary .)
    NE              reduce using rule 42 (right_hand_side_expression -> unary .)
    EQ              reduce using rule 42 (right_hand_side_expression -> unary .)
    GE              reduce using rule 42 (right_hand_side_expression -> unary .)
    LE              reduce using rule 42 (right_hand_side_expression -> unary .)
    GT              reduce using rule 42 (right_hand_side_expression -> unary .)
    LT              reduce using rule 42 (right_hand_side_expression -> unary .)
    )               reduce using rule 42 (right_hand_side_expression -> unary .)


state 31

    (73) matrix -> [ . vectors ]
    (71) vector -> [ . ]
    (72) vector -> [ . variables ]
    (74) vectors -> . vector
    (75) vectors -> . vectors , vector
    (76) variables -> . value
    (77) variables -> . variables , value
    (71) vector -> . [ ]
    (72) vector -> . [ variables ]
    (22) value -> . STRING
    (23) value -> . ID
    (24) value -> . FLOATNUM
    (25) value -> . INTNUM
    ]               shift and go to state 80
    [               shift and go to state 78
    STRING          shift and go to state 33
    ID              shift and go to state 84
    FLOATNUM        shift and go to state 34
    INTNUM          shift and go to state 35

    vectors                        shift and go to state 79
    variables                      shift and go to state 81
    vector                         shift and go to state 82
    value                          shift and go to state 83

state 32

    (56) matrix_ref -> ID . [ id_ints ]
    (23) value -> ID .
    [               shift and go to state 52
    ;               reduce using rule 23 (value -> ID .)
    DOTDIVIDE       reduce using rule 23 (value -> ID .)
    DOTTIMES        reduce using rule 23 (value -> ID .)
    DOTMINUS        reduce using rule 23 (value -> ID .)
    DOTPLUS         reduce using rule 23 (value -> ID .)
    /               reduce using rule 23 (value -> ID .)
    *               reduce using rule 23 (value -> ID .)
    -               reduce using rule 23 (value -> ID .)
    +               reduce using rule 23 (value -> ID .)
    NE              reduce using rule 23 (value -> ID .)
    EQ              reduce using rule 23 (value -> ID .)
    GE              reduce using rule 23 (value -> ID .)
    LE              reduce using rule 23 (value -> ID .)
    GT              reduce using rule 23 (value -> ID .)
    LT              reduce using rule 23 (value -> ID .)
    ,               reduce using rule 23 (value -> ID .)
    )               reduce using rule 23 (value -> ID .)


state 33

    (22) value -> STRING .
    ;               reduce using rule 22 (value -> STRING .)
    DOTDIVIDE       reduce using rule 22 (value -> STRING .)
    DOTTIMES        reduce using rule 22 (value -> STRING .)
    DOTMINUS        reduce using rule 22 (value -> STRING .)
    DOTPLUS         reduce using rule 22 (value -> STRING .)
    /               reduce using rule 22 (value -> STRING .)
    *               reduce using rule 22 (value -> STRING .)
    -               reduce using rule 22 (value -> STRING .)
    +               reduce using rule 22 (value -> STRING .)
    NE              reduce using rule 22 (value -> STRING .)
    EQ              reduce using rule 22 (value -> STRING .)
    GE              reduce using rule 22 (value -> STRING .)
    LE              reduce using rule 22 (value -> STRING .)
    GT              reduce using rule 22 (value -> STRING .)
    LT              reduce using rule 22 (value -> STRING .)
    ,               reduce using rule 22 (value -> STRING .)
    )               reduce using rule 22 (value -> STRING .)
    ]               reduce using rule 22 (value -> STRING .)


state 34

    (24) value -> FLOATNUM .
    ;               reduce using rule 24 (value -> FLOATNUM .)
    DOTDIVIDE       reduce using rule 24 (value -> FLOATNUM .)
    DOTTIMES        reduce using rule 24 (value -> FLOATNUM .)
    DOTMINUS        reduce using rule 24 (value -> FLOATNUM .)
    DOTPLUS         reduce using rule 24 (value -> FLOATNUM .)
    /               reduce using rule 24 (value -> FLOATNUM .)
    *               reduce using rule 24 (value -> FLOATNUM .)
    -               reduce using rule 24 (value -> FLOATNUM .)
    +               reduce using rule 24 (value -> FLOATNUM .)
    NE              reduce using rule 24 (value -> FLOATNUM .)
    EQ              reduce using rule 24 (value -> FLOATNUM .)
    GE              reduce using rule 24 (value -> FLOATNUM .)
    LE              reduce using rule 24 (value -> FLOATNUM .)
    GT              reduce using rule 24 (value -> FLOATNUM .)
    LT              reduce using rule 24 (value -> FLOATNUM .)
    ,               reduce using rule 24 (value -> FLOATNUM .)
    )               reduce using rule 24 (value -> FLOATNUM .)
    ]               reduce using rule 24 (value -> FLOATNUM .)


state 35

    (25) value -> INTNUM .
    ;               reduce using rule 25 (value -> INTNUM .)
    DOTDIVIDE       reduce using rule 25 (value -> INTNUM .)
    DOTTIMES        reduce using rule 25 (value -> INTNUM .)
    DOTMINUS        reduce using rule 25 (value -> INTNUM .)
    DOTPLUS         reduce using rule 25 (value -> INTNUM .)
    /               reduce using rule 25 (value -> INTNUM .)
    *               reduce using rule 25 (value -> INTNUM .)
    -               reduce using rule 25 (value -> INTNUM .)
    +               reduce using rule 25 (value -> INTNUM .)
    NE              reduce using rule 25 (value -> INTNUM .)
    EQ              reduce using rule 25 (value -> INTNUM .)
    GE              reduce using rule 25 (value -> INTNUM .)
    LE              reduce using rule 25 (value -> INTNUM .)
    GT              reduce using rule 25 (value -> INTNUM .)
    LT              reduce using rule 25 (value -> INTNUM .)
    ,               reduce using rule 25 (value -> INTNUM .)
    )               reduce using rule 25 (value -> INTNUM .)
    ]               reduce using rule 25 (value -> INTNUM .)


state 36

    (65) matrix_functions -> EYE . ( id_int , id_int )
    (66) matrix_functions -> EYE . ( id_int )
    (               shift and go to state 85


state 37

    (67) matrix_functions -> ONES . ( id_int , id_int )
    (68) matrix_functions -> ONES . ( id_int )
    (               shift and go to state 86


state 38

    (69) matrix_functions -> ZEROS . ( id_int , id_int )
    (70) matrix_functions -> ZEROS . ( id_int )
    (               shift and go to state 87


state 39

    (4) instruction -> CONTINUE ; .
    RETURN          reduce using rule 4 (instruction -> CONTINUE ; .)
    CONTINUE        reduce using rule 4 (instruction -> CONTINUE ; .)
    BREAK           reduce using rule 4 (instruction -> CONTINUE ; .)
    {               reduce using rule 4 (instruction -> CONTINUE ; .)
    PRINT           reduce using rule 4 (instruction -> CONTINUE ; .)
    (               reduce using rule 4 (instruction -> CONTINUE ; .)
    FOR             reduce using rule 4 (instruction -> CONTINUE ; .)
    WHILE           reduce using rule 4 (instruction -> CONTINUE ; .)
    IF              reduce using rule 4 (instruction -> CONTINUE ; .)
    ID              reduce using rule 4 (instruction -> CONTINUE ; .)
    $end            reduce using rule 4 (instruction -> CONTINUE ; .)
    }               reduce using rule 4 (instruction -> CONTINUE ; .)
    ELSE            reduce using rule 4 (instruction -> CONTINUE ; .)


state 40

    (5) instruction -> BREAK ; .
    RETURN          reduce using rule 5 (instruction -> BREAK ; .)
    CONTINUE        reduce using rule 5 (instruction -> BREAK ; .)
    BREAK           reduce using rule 5 (instruction -> BREAK ; .)
    {               reduce using rule 5 (instruction -> BREAK ; .)
    PRINT           reduce using rule 5 (instruction -> BREAK ; .)
    (               reduce using rule 5 (instruction -> BREAK ; .)
    FOR             reduce using rule 5 (instruction -> BREAK ; .)
    WHILE           reduce using rule 5 (instruction -> BREAK ; .)
    IF              reduce using rule 5 (instruction -> BREAK ; .)
    ID              reduce using rule 5 (instruction -> BREAK ; .)
    $end            reduce using rule 5 (instruction -> BREAK ; .)
    }               reduce using rule 5 (instruction -> BREAK ; .)
    ELSE            reduce using rule 5 (instruction -> BREAK ; .)


state 41

    (6) instruction -> { instructions . }
    (2) instructions -> instructions . instruction
    (3) instruction -> . RETURN right_hand_side_expression ;
    (4) instruction -> . CONTINUE ;
    (5) instruction -> . BREAK ;
    (6) instruction -> . { instructions }
    (7) instruction -> . print_instruction
    (8) instruction -> . full_line_instruction
    (9) instruction -> . for_instruction
    (10) instruction -> . while_instruction
    (11) instruction -> . if_instruction
    (18) print_instruction -> . PRINT printables ;
    (44) full_line_instruction -> . ( full_line_instruction )
    (45) full_line_instruction -> . assign_instruction
    (15) for_instruction -> . FOR ID = id_int : id_int instruction
    (14) while_instruction -> . WHILE ( relation_expression ) instruction
    (12) if_instruction -> . IF ( relation_expression ) instruction
    (13) if_instruction -> . IF ( relation_expression ) instruction ELSE instruction
    (46) assign_instruction -> . ID DIVIDEASSIGN right_hand_side_expression ;
    (47) assign_instruction -> . ID TIMESASSIGN right_hand_side_expression ;
    (48) assign_instruction -> . ID MINUSASSIGN right_hand_side_expression ;
    (49) assign_instruction -> . ID PLUSASSIGN right_hand_side_expression ;
    (50) assign_instruction -> . ID = right_hand_side_expression ;
    (51) assign_instruction -> . matrix_ref DIVIDEASSIGN right_hand_side_expression ;
    (52) assign_instruction -> . matrix_ref TIMESASSIGN right_hand_side_expression ;
    (53) assign_instruction -> . matrix_ref MINUSASSIGN right_hand_side_expression ;
    (54) assign_instruction -> . matrix_ref PLUSASSIGN right_hand_side_expression ;
    (55) assign_instruction -> . matrix_ref = right_hand_side_expression ;
    (56) matrix_ref -> . ID [ id_ints ]
    }               shift and go to state 88
    RETURN          shift and go to state 3
    CONTINUE        shift and go to state 4
    BREAK           shift and go to state 5
    {               shift and go to state 6
    PRINT           shift and go to state 12
    (               shift and go to state 13
    FOR             shift and go to state 15
    WHILE           shift and go to state 17
    IF              shift and go to state 18
    ID              shift and go to state 16

    instruction                    shift and go to state 20
    print_instruction              shift and go to state 7
    full_line_instruction          shift and go to state 8
    for_instruction                shift and go to state 9
    while_instruction              shift and go to state 10
    if_instruction                 shift and go to state 11
    assign_instruction             shift and go to state 14
    matrix_ref                     shift and go to state 19

state 42

    (18) print_instruction -> PRINT printables . ;
    (21) printables -> printables . , value
    ;               shift and go to state 89
    ,               shift and go to state 90


state 43

    (19) printables -> matrix_ref .
    ;               reduce using rule 19 (printables -> matrix_ref .)
    ,               reduce using rule 19 (printables -> matrix_ref .)


state 44

    (20) printables -> value .
    ;               reduce using rule 20 (printables -> value .)
    ,               reduce using rule 20 (printables -> value .)


state 45

    (44) full_line_instruction -> ( full_line_instruction . )
    )               shift and go to state 91


state 46

    (15) for_instruction -> FOR ID . = id_int : id_int instruction
    =               shift and go to state 92


state 47

    (46) assign_instruction -> ID DIVIDEASSIGN . right_hand_side_expression ;
    (26) right_hand_side_expression -> . matrix
    (27) right_hand_side_expression -> . vector
    (28) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (29) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (36) right_hand_side_expression -> . matrix '
    (37) right_hand_side_expression -> . matrix_ref
    (38) right_hand_side_expression -> . value
    (39) right_hand_side_expression -> . matrix_functions
    (40) right_hand_side_expression -> . ( right_hand_side_expression )
    (41) right_hand_side_expression -> . relation_expression
    (42) right_hand_side_expression -> . unary
    (73) matrix -> . [ vectors ]
    (71) vector -> . [ ]
    (72) vector -> . [ variables ]
    (56) matrix_ref -> . ID [ id_ints ]
    (22) value -> . STRING
    (23) value -> . ID
    (24) value -> . FLOATNUM
    (25) value -> . INTNUM
    (65) matrix_functions -> . EYE ( id_int , id_int )
    (66) matrix_functions -> . EYE ( id_int )
    (67) matrix_functions -> . ONES ( id_int , id_int )
    (68) matrix_functions -> . ONES ( id_int )
    (69) matrix_functions -> . ZEROS ( id_int , id_int )
    (70) matrix_functions -> . ZEROS ( id_int )
    (59) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (61) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (62) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (63) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (64) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (43) unary -> . - right_hand_side_expression
    (               shift and go to state 28
    [               shift and go to state 31
    ID              shift and go to state 32
    STRING          shift and go to state 33
    FLOATNUM        shift and go to state 34
    INTNUM          shift and go to state 35
    EYE             shift and go to state 36
    ONES            shift and go to state 37
    ZEROS           shift and go to state 38
    -               shift and go to state 24

    right_hand_side_expression     shift and go to state 93
    matrix                         shift and go to state 22
    vector                         shift and go to state 23
    matrix_ref                     shift and go to state 25
    value                          shift and go to state 26
    matrix_functions               shift and go to state 27
    relation_expression            shift and go to state 29
    unary                          shift and go to state 30

state 48

    (47) assign_instruction -> ID TIMESASSIGN . right_hand_side_expression ;
    (26) right_hand_side_expression -> . matrix
    (27) right_hand_side_expression -> . vector
    (28) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (29) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (36) right_hand_side_expression -> . matrix '
    (37) right_hand_side_expression -> . matrix_ref
    (38) right_hand_side_expression -> . value
    (39) right_hand_side_expression -> . matrix_functions
    (40) right_hand_side_expression -> . ( right_hand_side_expression )
    (41) right_hand_side_expression -> . relation_expression
    (42) right_hand_side_expression -> . unary
    (73) matrix -> . [ vectors ]
    (71) vector -> . [ ]
    (72) vector -> . [ variables ]
    (56) matrix_ref -> . ID [ id_ints ]
    (22) value -> . STRING
    (23) value -> . ID
    (24) value -> . FLOATNUM
    (25) value -> . INTNUM
    (65) matrix_functions -> . EYE ( id_int , id_int )
    (66) matrix_functions -> . EYE ( id_int )
    (67) matrix_functions -> . ONES ( id_int , id_int )
    (68) matrix_functions -> . ONES ( id_int )
    (69) matrix_functions -> . ZEROS ( id_int , id_int )
    (70) matrix_functions -> . ZEROS ( id_int )
    (59) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (61) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (62) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (63) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (64) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (43) unary -> . - right_hand_side_expression
    (               shift and go to state 28
    [               shift and go to state 31
    ID              shift and go to state 32
    STRING          shift and go to state 33
    FLOATNUM        shift and go to state 34
    INTNUM          shift and go to state 35
    EYE             shift and go to state 36
    ONES            shift and go to state 37
    ZEROS           shift and go to state 38
    -               shift and go to state 24

    right_hand_side_expression     shift and go to state 94
    matrix                         shift and go to state 22
    vector                         shift and go to state 23
    matrix_ref                     shift and go to state 25
    value                          shift and go to state 26
    matrix_functions               shift and go to state 27
    relation_expression            shift and go to state 29
    unary                          shift and go to state 30

state 49

    (48) assign_instruction -> ID MINUSASSIGN . right_hand_side_expression ;
    (26) right_hand_side_expression -> . matrix
    (27) right_hand_side_expression -> . vector
    (28) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (29) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (36) right_hand_side_expression -> . matrix '
    (37) right_hand_side_expression -> . matrix_ref
    (38) right_hand_side_expression -> . value
    (39) right_hand_side_expression -> . matrix_functions
    (40) right_hand_side_expression -> . ( right_hand_side_expression )
    (41) right_hand_side_expression -> . relation_expression
    (42) right_hand_side_expression -> . unary
    (73) matrix -> . [ vectors ]
    (71) vector -> . [ ]
    (72) vector -> . [ variables ]
    (56) matrix_ref -> . ID [ id_ints ]
    (22) value -> . STRING
    (23) value -> . ID
    (24) value -> . FLOATNUM
    (25) value -> . INTNUM
    (65) matrix_functions -> . EYE ( id_int , id_int )
    (66) matrix_functions -> . EYE ( id_int )
    (67) matrix_functions -> . ONES ( id_int , id_int )
    (68) matrix_functions -> . ONES ( id_int )
    (69) matrix_functions -> . ZEROS ( id_int , id_int )
    (70) matrix_functions -> . ZEROS ( id_int )
    (59) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (61) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (62) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (63) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (64) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (43) unary -> . - right_hand_side_expression
    (               shift and go to state 28
    [               shift and go to state 31
    ID              shift and go to state 32
    STRING          shift and go to state 33
    FLOATNUM        shift and go to state 34
    INTNUM          shift and go to state 35
    EYE             shift and go to state 36
    ONES            shift and go to state 37
    ZEROS           shift and go to state 38
    -               shift and go to state 24

    right_hand_side_expression     shift and go to state 95
    matrix                         shift and go to state 22
    vector                         shift and go to state 23
    matrix_ref                     shift and go to state 25
    value                          shift and go to state 26
    matrix_functions               shift and go to state 27
    relation_expression            shift and go to state 29
    unary                          shift and go to state 30

state 50

    (49) assign_instruction -> ID PLUSASSIGN . right_hand_side_expression ;
    (26) right_hand_side_expression -> . matrix
    (27) right_hand_side_expression -> . vector
    (28) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (29) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (36) right_hand_side_expression -> . matrix '
    (37) right_hand_side_expression -> . matrix_ref
    (38) right_hand_side_expression -> . value
    (39) right_hand_side_expression -> . matrix_functions
    (40) right_hand_side_expression -> . ( right_hand_side_expression )
    (41) right_hand_side_expression -> . relation_expression
    (42) right_hand_side_expression -> . unary
    (73) matrix -> . [ vectors ]
    (71) vector -> . [ ]
    (72) vector -> . [ variables ]
    (56) matrix_ref -> . ID [ id_ints ]
    (22) value -> . STRING
    (23) value -> . ID
    (24) value -> . FLOATNUM
    (25) value -> . INTNUM
    (65) matrix_functions -> . EYE ( id_int , id_int )
    (66) matrix_functions -> . EYE ( id_int )
    (67) matrix_functions -> . ONES ( id_int , id_int )
    (68) matrix_functions -> . ONES ( id_int )
    (69) matrix_functions -> . ZEROS ( id_int , id_int )
    (70) matrix_functions -> . ZEROS ( id_int )
    (59) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (61) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (62) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (63) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (64) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (43) unary -> . - right_hand_side_expression
    (               shift and go to state 28
    [               shift and go to state 31
    ID              shift and go to state 32
    STRING          shift and go to state 33
    FLOATNUM        shift and go to state 34
    INTNUM          shift and go to state 35
    EYE             shift and go to state 36
    ONES            shift and go to state 37
    ZEROS           shift and go to state 38
    -               shift and go to state 24

    right_hand_side_expression     shift and go to state 96
    matrix                         shift and go to state 22
    vector                         shift and go to state 23
    matrix_ref                     shift and go to state 25
    value                          shift and go to state 26
    matrix_functions               shift and go to state 27
    relation_expression            shift and go to state 29
    unary                          shift and go to state 30

state 51

    (50) assign_instruction -> ID = . right_hand_side_expression ;
    (26) right_hand_side_expression -> . matrix
    (27) right_hand_side_expression -> . vector
    (28) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (29) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (36) right_hand_side_expression -> . matrix '
    (37) right_hand_side_expression -> . matrix_ref
    (38) right_hand_side_expression -> . value
    (39) right_hand_side_expression -> . matrix_functions
    (40) right_hand_side_expression -> . ( right_hand_side_expression )
    (41) right_hand_side_expression -> . relation_expression
    (42) right_hand_side_expression -> . unary
    (73) matrix -> . [ vectors ]
    (71) vector -> . [ ]
    (72) vector -> . [ variables ]
    (56) matrix_ref -> . ID [ id_ints ]
    (22) value -> . STRING
    (23) value -> . ID
    (24) value -> . FLOATNUM
    (25) value -> . INTNUM
    (65) matrix_functions -> . EYE ( id_int , id_int )
    (66) matrix_functions -> . EYE ( id_int )
    (67) matrix_functions -> . ONES ( id_int , id_int )
    (68) matrix_functions -> . ONES ( id_int )
    (69) matrix_functions -> . ZEROS ( id_int , id_int )
    (70) matrix_functions -> . ZEROS ( id_int )
    (59) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (61) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (62) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (63) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (64) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (43) unary -> . - right_hand_side_expression
    (               shift and go to state 28
    [               shift and go to state 31
    ID              shift and go to state 32
    STRING          shift and go to state 33
    FLOATNUM        shift and go to state 34
    INTNUM          shift and go to state 35
    EYE             shift and go to state 36
    ONES            shift and go to state 37
    ZEROS           shift and go to state 38
    -               shift and go to state 24

    right_hand_side_expression     shift and go to state 97
    matrix                         shift and go to state 22
    vector                         shift and go to state 23
    matrix_ref                     shift and go to state 25
    value                          shift and go to state 26
    matrix_functions               shift and go to state 27
    relation_expression            shift and go to state 29
    unary                          shift and go to state 30

state 52

    (56) matrix_ref -> ID [ . id_ints ]
    (57) id_ints -> . id_int
    (58) id_ints -> . id_ints , id_int
    (16) id_int -> . ID
    (17) id_int -> . INTNUM
    ID              shift and go to state 98
    INTNUM          shift and go to state 101

    id_ints                        shift and go to state 99
    id_int                         shift and go to state 100

state 53

    (14) while_instruction -> WHILE ( . relation_expression ) instruction
    (59) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (61) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (62) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (63) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (64) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (26) right_hand_side_expression -> . matrix
    (27) right_hand_side_expression -> . vector
    (28) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (29) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (36) right_hand_side_expression -> . matrix '
    (37) right_hand_side_expression -> . matrix_ref
    (38) right_hand_side_expression -> . value
    (39) right_hand_side_expression -> . matrix_functions
    (40) right_hand_side_expression -> . ( right_hand_side_expression )
    (41) right_hand_side_expression -> . relation_expression
    (42) right_hand_side_expression -> . unary
    (73) matrix -> . [ vectors ]
    (71) vector -> . [ ]
    (72) vector -> . [ variables ]
    (56) matrix_ref -> . ID [ id_ints ]
    (22) value -> . STRING
    (23) value -> . ID
    (24) value -> . FLOATNUM
    (25) value -> . INTNUM
    (65) matrix_functions -> . EYE ( id_int , id_int )
    (66) matrix_functions -> . EYE ( id_int )
    (67) matrix_functions -> . ONES ( id_int , id_int )
    (68) matrix_functions -> . ONES ( id_int )
    (69) matrix_functions -> . ZEROS ( id_int , id_int )
    (70) matrix_functions -> . ZEROS ( id_int )
    (43) unary -> . - right_hand_side_expression
    (               shift and go to state 28
    [               shift and go to state 31
    ID              shift and go to state 32
    STRING          shift and go to state 33
    FLOATNUM        shift and go to state 34
    INTNUM          shift and go to state 35
    EYE             shift and go to state 36
    ONES            shift and go to state 37
    ZEROS           shift and go to state 38
    -               shift and go to state 24

    relation_expression            shift and go to state 102
    right_hand_side_expression     shift and go to state 103
    matrix                         shift and go to state 22
    vector                         shift and go to state 23
    matrix_ref                     shift and go to state 25
    value                          shift and go to state 26
    matrix_functions               shift and go to state 27
    unary                          shift and go to state 30

state 54

    (12) if_instruction -> IF ( . relation_expression ) instruction
    (13) if_instruction -> IF ( . relation_expression ) instruction ELSE instruction
    (59) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (61) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (62) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (63) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (64) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (26) right_hand_side_expression -> . matrix
    (27) right_hand_side_expression -> . vector
    (28) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (29) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (36) right_hand_side_expression -> . matrix '
    (37) right_hand_side_expression -> . matrix_ref
    (38) right_hand_side_expression -> . value
    (39) right_hand_side_expression -> . matrix_functions
    (40) right_hand_side_expression -> . ( right_hand_side_expression )
    (41) right_hand_side_expression -> . relation_expression
    (42) right_hand_side_expression -> . unary
    (73) matrix -> . [ vectors ]
    (71) vector -> . [ ]
    (72) vector -> . [ variables ]
    (56) matrix_ref -> . ID [ id_ints ]
    (22) value -> . STRING
    (23) value -> . ID
    (24) value -> . FLOATNUM
    (25) value -> . INTNUM
    (65) matrix_functions -> . EYE ( id_int , id_int )
    (66) matrix_functions -> . EYE ( id_int )
    (67) matrix_functions -> . ONES ( id_int , id_int )
    (68) matrix_functions -> . ONES ( id_int )
    (69) matrix_functions -> . ZEROS ( id_int , id_int )
    (70) matrix_functions -> . ZEROS ( id_int )
    (43) unary -> . - right_hand_side_expression
    (               shift and go to state 28
    [               shift and go to state 31
    ID              shift and go to state 32
    STRING          shift and go to state 33
    FLOATNUM        shift and go to state 34
    INTNUM          shift and go to state 35
    EYE             shift and go to state 36
    ONES            shift and go to state 37
    ZEROS           shift and go to state 38
    -               shift and go to state 24

    relation_expression            shift and go to state 104
    right_hand_side_expression     shift and go to state 103
    matrix                         shift and go to state 22
    vector                         shift and go to state 23
    matrix_ref                     shift and go to state 25
    value                          shift and go to state 26
    matrix_functions               shift and go to state 27
    unary                          shift and go to state 30

state 55

    (51) assign_instruction -> matrix_ref DIVIDEASSIGN . right_hand_side_expression ;
    (26) right_hand_side_expression -> . matrix
    (27) right_hand_side_expression -> . vector
    (28) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (29) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (36) right_hand_side_expression -> . matrix '
    (37) right_hand_side_expression -> . matrix_ref
    (38) right_hand_side_expression -> . value
    (39) right_hand_side_expression -> . matrix_functions
    (40) right_hand_side_expression -> . ( right_hand_side_expression )
    (41) right_hand_side_expression -> . relation_expression
    (42) right_hand_side_expression -> . unary
    (73) matrix -> . [ vectors ]
    (71) vector -> . [ ]
    (72) vector -> . [ variables ]
    (56) matrix_ref -> . ID [ id_ints ]
    (22) value -> . STRING
    (23) value -> . ID
    (24) value -> . FLOATNUM
    (25) value -> . INTNUM
    (65) matrix_functions -> . EYE ( id_int , id_int )
    (66) matrix_functions -> . EYE ( id_int )
    (67) matrix_functions -> . ONES ( id_int , id_int )
    (68) matrix_functions -> . ONES ( id_int )
    (69) matrix_functions -> . ZEROS ( id_int , id_int )
    (70) matrix_functions -> . ZEROS ( id_int )
    (59) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (61) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (62) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (63) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (64) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (43) unary -> . - right_hand_side_expression
    (               shift and go to state 28
    [               shift and go to state 31
    ID              shift and go to state 32
    STRING          shift and go to state 33
    FLOATNUM        shift and go to state 34
    INTNUM          shift and go to state 35
    EYE             shift and go to state 36
    ONES            shift and go to state 37
    ZEROS           shift and go to state 38
    -               shift and go to state 24

    matrix_ref                     shift and go to state 25
    right_hand_side_expression     shift and go to state 105
    matrix                         shift and go to state 22
    vector                         shift and go to state 23
    value                          shift and go to state 26
    matrix_functions               shift and go to state 27
    relation_expression            shift and go to state 29
    unary                          shift and go to state 30

state 56

    (52) assign_instruction -> matrix_ref TIMESASSIGN . right_hand_side_expression ;
    (26) right_hand_side_expression -> . matrix
    (27) right_hand_side_expression -> . vector
    (28) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (29) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (36) right_hand_side_expression -> . matrix '
    (37) right_hand_side_expression -> . matrix_ref
    (38) right_hand_side_expression -> . value
    (39) right_hand_side_expression -> . matrix_functions
    (40) right_hand_side_expression -> . ( right_hand_side_expression )
    (41) right_hand_side_expression -> . relation_expression
    (42) right_hand_side_expression -> . unary
    (73) matrix -> . [ vectors ]
    (71) vector -> . [ ]
    (72) vector -> . [ variables ]
    (56) matrix_ref -> . ID [ id_ints ]
    (22) value -> . STRING
    (23) value -> . ID
    (24) value -> . FLOATNUM
    (25) value -> . INTNUM
    (65) matrix_functions -> . EYE ( id_int , id_int )
    (66) matrix_functions -> . EYE ( id_int )
    (67) matrix_functions -> . ONES ( id_int , id_int )
    (68) matrix_functions -> . ONES ( id_int )
    (69) matrix_functions -> . ZEROS ( id_int , id_int )
    (70) matrix_functions -> . ZEROS ( id_int )
    (59) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (61) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (62) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (63) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (64) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (43) unary -> . - right_hand_side_expression
    (               shift and go to state 28
    [               shift and go to state 31
    ID              shift and go to state 32
    STRING          shift and go to state 33
    FLOATNUM        shift and go to state 34
    INTNUM          shift and go to state 35
    EYE             shift and go to state 36
    ONES            shift and go to state 37
    ZEROS           shift and go to state 38
    -               shift and go to state 24

    matrix_ref                     shift and go to state 25
    right_hand_side_expression     shift and go to state 106
    matrix                         shift and go to state 22
    vector                         shift and go to state 23
    value                          shift and go to state 26
    matrix_functions               shift and go to state 27
    relation_expression            shift and go to state 29
    unary                          shift and go to state 30

state 57

    (53) assign_instruction -> matrix_ref MINUSASSIGN . right_hand_side_expression ;
    (26) right_hand_side_expression -> . matrix
    (27) right_hand_side_expression -> . vector
    (28) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (29) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (36) right_hand_side_expression -> . matrix '
    (37) right_hand_side_expression -> . matrix_ref
    (38) right_hand_side_expression -> . value
    (39) right_hand_side_expression -> . matrix_functions
    (40) right_hand_side_expression -> . ( right_hand_side_expression )
    (41) right_hand_side_expression -> . relation_expression
    (42) right_hand_side_expression -> . unary
    (73) matrix -> . [ vectors ]
    (71) vector -> . [ ]
    (72) vector -> . [ variables ]
    (56) matrix_ref -> . ID [ id_ints ]
    (22) value -> . STRING
    (23) value -> . ID
    (24) value -> . FLOATNUM
    (25) value -> . INTNUM
    (65) matrix_functions -> . EYE ( id_int , id_int )
    (66) matrix_functions -> . EYE ( id_int )
    (67) matrix_functions -> . ONES ( id_int , id_int )
    (68) matrix_functions -> . ONES ( id_int )
    (69) matrix_functions -> . ZEROS ( id_int , id_int )
    (70) matrix_functions -> . ZEROS ( id_int )
    (59) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (61) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (62) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (63) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (64) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (43) unary -> . - right_hand_side_expression
    (               shift and go to state 28
    [               shift and go to state 31
    ID              shift and go to state 32
    STRING          shift and go to state 33
    FLOATNUM        shift and go to state 34
    INTNUM          shift and go to state 35
    EYE             shift and go to state 36
    ONES            shift and go to state 37
    ZEROS           shift and go to state 38
    -               shift and go to state 24

    matrix_ref                     shift and go to state 25
    right_hand_side_expression     shift and go to state 107
    matrix                         shift and go to state 22
    vector                         shift and go to state 23
    value                          shift and go to state 26
    matrix_functions               shift and go to state 27
    relation_expression            shift and go to state 29
    unary                          shift and go to state 30

state 58

    (54) assign_instruction -> matrix_ref PLUSASSIGN . right_hand_side_expression ;
    (26) right_hand_side_expression -> . matrix
    (27) right_hand_side_expression -> . vector
    (28) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (29) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (36) right_hand_side_expression -> . matrix '
    (37) right_hand_side_expression -> . matrix_ref
    (38) right_hand_side_expression -> . value
    (39) right_hand_side_expression -> . matrix_functions
    (40) right_hand_side_expression -> . ( right_hand_side_expression )
    (41) right_hand_side_expression -> . relation_expression
    (42) right_hand_side_expression -> . unary
    (73) matrix -> . [ vectors ]
    (71) vector -> . [ ]
    (72) vector -> . [ variables ]
    (56) matrix_ref -> . ID [ id_ints ]
    (22) value -> . STRING
    (23) value -> . ID
    (24) value -> . FLOATNUM
    (25) value -> . INTNUM
    (65) matrix_functions -> . EYE ( id_int , id_int )
    (66) matrix_functions -> . EYE ( id_int )
    (67) matrix_functions -> . ONES ( id_int , id_int )
    (68) matrix_functions -> . ONES ( id_int )
    (69) matrix_functions -> . ZEROS ( id_int , id_int )
    (70) matrix_functions -> . ZEROS ( id_int )
    (59) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (61) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (62) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (63) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (64) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (43) unary -> . - right_hand_side_expression
    (               shift and go to state 28
    [               shift and go to state 31
    ID              shift and go to state 32
    STRING          shift and go to state 33
    FLOATNUM        shift and go to state 34
    INTNUM          shift and go to state 35
    EYE             shift and go to state 36
    ONES            shift and go to state 37
    ZEROS           shift and go to state 38
    -               shift and go to state 24

    matrix_ref                     shift and go to state 25
    right_hand_side_expression     shift and go to state 108
    matrix                         shift and go to state 22
    vector                         shift and go to state 23
    value                          shift and go to state 26
    matrix_functions               shift and go to state 27
    relation_expression            shift and go to state 29
    unary                          shift and go to state 30

state 59

    (55) assign_instruction -> matrix_ref = . right_hand_side_expression ;
    (26) right_hand_side_expression -> . matrix
    (27) right_hand_side_expression -> . vector
    (28) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (29) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (36) right_hand_side_expression -> . matrix '
    (37) right_hand_side_expression -> . matrix_ref
    (38) right_hand_side_expression -> . value
    (39) right_hand_side_expression -> . matrix_functions
    (40) right_hand_side_expression -> . ( right_hand_side_expression )
    (41) right_hand_side_expression -> . relation_expression
    (42) right_hand_side_expression -> . unary
    (73) matrix -> . [ vectors ]
    (71) vector -> . [ ]
    (72) vector -> . [ variables ]
    (56) matrix_ref -> . ID [ id_ints ]
    (22) value -> . STRING
    (23) value -> . ID
    (24) value -> . FLOATNUM
    (25) value -> . INTNUM
    (65) matrix_functions -> . EYE ( id_int , id_int )
    (66) matrix_functions -> . EYE ( id_int )
    (67) matrix_functions -> . ONES ( id_int , id_int )
    (68) matrix_functions -> . ONES ( id_int )
    (69) matrix_functions -> . ZEROS ( id_int , id_int )
    (70) matrix_functions -> . ZEROS ( id_int )
    (59) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (61) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (62) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (63) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (64) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (43) unary -> . - right_hand_side_expression
    (               shift and go to state 28
    [               shift and go to state 31
    ID              shift and go to state 32
    STRING          shift and go to state 33
    FLOATNUM        shift and go to state 34
    INTNUM          shift and go to state 35
    EYE             shift and go to state 36
    ONES            shift and go to state 37
    ZEROS           shift and go to state 38
    -               shift and go to state 24

    matrix_ref                     shift and go to state 25
    right_hand_side_expression     shift and go to state 109
    matrix                         shift and go to state 22
    vector                         shift and go to state 23
    value                          shift and go to state 26
    matrix_functions               shift and go to state 27
    relation_expression            shift and go to state 29
    unary                          shift and go to state 30

state 60

    (3) instruction -> RETURN right_hand_side_expression ; .
    RETURN          reduce using rule 3 (instruction -> RETURN right_hand_side_expression ; .)
    CONTINUE        reduce using rule 3 (instruction -> RETURN right_hand_side_expression ; .)
    BREAK           reduce using rule 3 (instruction -> RETURN right_hand_side_expression ; .)
    {               reduce using rule 3 (instruction -> RETURN right_hand_side_expression ; .)
    PRINT           reduce using rule 3 (instruction -> RETURN right_hand_side_expression ; .)
    (               reduce using rule 3 (instruction -> RETURN right_hand_side_expression ; .)
    FOR             reduce using rule 3 (instruction -> RETURN right_hand_side_expression ; .)
    WHILE           reduce using rule 3 (instruction -> RETURN right_hand_side_expression ; .)
    IF              reduce using rule 3 (instruction -> RETURN right_hand_side_expression ; .)
    ID              reduce using rule 3 (instruction -> RETURN right_hand_side_expression ; .)
    $end            reduce using rule 3 (instruction -> RETURN right_hand_side_expression ; .)
    }               reduce using rule 3 (instruction -> RETURN right_hand_side_expression ; .)
    ELSE            reduce using rule 3 (instruction -> RETURN right_hand_side_expression ; .)


state 61

    (28) right_hand_side_expression -> right_hand_side_expression DOTDIVIDE . right_hand_side_expression
    (26) right_hand_side_expression -> . matrix
    (27) right_hand_side_expression -> . vector
    (28) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (29) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (36) right_hand_side_expression -> . matrix '
    (37) right_hand_side_expression -> . matrix_ref
    (38) right_hand_side_expression -> . value
    (39) right_hand_side_expression -> . matrix_functions
    (40) right_hand_side_expression -> . ( right_hand_side_expression )
    (41) right_hand_side_expression -> . relation_expression
    (42) right_hand_side_expression -> . unary
    (73) matrix -> . [ vectors ]
    (71) vector -> . [ ]
    (72) vector -> . [ variables ]
    (56) matrix_ref -> . ID [ id_ints ]
    (22) value -> . STRING
    (23) value -> . ID
    (24) value -> . FLOATNUM
    (25) value -> . INTNUM
    (65) matrix_functions -> . EYE ( id_int , id_int )
    (66) matrix_functions -> . EYE ( id_int )
    (67) matrix_functions -> . ONES ( id_int , id_int )
    (68) matrix_functions -> . ONES ( id_int )
    (69) matrix_functions -> . ZEROS ( id_int , id_int )
    (70) matrix_functions -> . ZEROS ( id_int )
    (59) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (61) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (62) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (63) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (64) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (43) unary -> . - right_hand_side_expression
    (               shift and go to state 28
    [               shift and go to state 31
    ID              shift and go to state 32
    STRING          shift and go to state 33
    FLOATNUM        shift and go to state 34
    INTNUM          shift and go to state 35
    EYE             shift and go to state 36
    ONES            shift and go to state 37
    ZEROS           shift and go to state 38
    -               shift and go to state 24

    right_hand_side_expression     shift and go to state 110
    matrix                         shift and go to state 22
    vector                         shift and go to state 23
    matrix_ref                     shift and go to state 25
    value                          shift and go to state 26
    matrix_functions               shift and go to state 27
    relation_expression            shift and go to state 29
    unary                          shift and go to state 30

state 62

    (29) right_hand_side_expression -> right_hand_side_expression DOTTIMES . right_hand_side_expression
    (26) right_hand_side_expression -> . matrix
    (27) right_hand_side_expression -> . vector
    (28) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (29) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (36) right_hand_side_expression -> . matrix '
    (37) right_hand_side_expression -> . matrix_ref
    (38) right_hand_side_expression -> . value
    (39) right_hand_side_expression -> . matrix_functions
    (40) right_hand_side_expression -> . ( right_hand_side_expression )
    (41) right_hand_side_expression -> . relation_expression
    (42) right_hand_side_expression -> . unary
    (73) matrix -> . [ vectors ]
    (71) vector -> . [ ]
    (72) vector -> . [ variables ]
    (56) matrix_ref -> . ID [ id_ints ]
    (22) value -> . STRING
    (23) value -> . ID
    (24) value -> . FLOATNUM
    (25) value -> . INTNUM
    (65) matrix_functions -> . EYE ( id_int , id_int )
    (66) matrix_functions -> . EYE ( id_int )
    (67) matrix_functions -> . ONES ( id_int , id_int )
    (68) matrix_functions -> . ONES ( id_int )
    (69) matrix_functions -> . ZEROS ( id_int , id_int )
    (70) matrix_functions -> . ZEROS ( id_int )
    (59) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (61) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (62) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (63) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (64) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (43) unary -> . - right_hand_side_expression
    (               shift and go to state 28
    [               shift and go to state 31
    ID              shift and go to state 32
    STRING          shift and go to state 33
    FLOATNUM        shift and go to state 34
    INTNUM          shift and go to state 35
    EYE             shift and go to state 36
    ONES            shift and go to state 37
    ZEROS           shift and go to state 38
    -               shift and go to state 24

    right_hand_side_expression     shift and go to state 111
    matrix                         shift and go to state 22
    vector                         shift and go to state 23
    matrix_ref                     shift and go to state 25
    value                          shift and go to state 26
    matrix_functions               shift and go to state 27
    relation_expression            shift and go to state 29
    unary                          shift and go to state 30

state 63

    (30) right_hand_side_expression -> right_hand_side_expression DOTMINUS . right_hand_side_expression
    (26) right_hand_side_expression -> . matrix
    (27) right_hand_side_expression -> . vector
    (28) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (29) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (36) right_hand_side_expression -> . matrix '
    (37) right_hand_side_expression -> . matrix_ref
    (38) right_hand_side_expression -> . value
    (39) right_hand_side_expression -> . matrix_functions
    (40) right_hand_side_expression -> . ( right_hand_side_expression )
    (41) right_hand_side_expression -> . relation_expression
    (42) right_hand_side_expression -> . unary
    (73) matrix -> . [ vectors ]
    (71) vector -> . [ ]
    (72) vector -> . [ variables ]
    (56) matrix_ref -> . ID [ id_ints ]
    (22) value -> . STRING
    (23) value -> . ID
    (24) value -> . FLOATNUM
    (25) value -> . INTNUM
    (65) matrix_functions -> . EYE ( id_int , id_int )
    (66) matrix_functions -> . EYE ( id_int )
    (67) matrix_functions -> . ONES ( id_int , id_int )
    (68) matrix_functions -> . ONES ( id_int )
    (69) matrix_functions -> . ZEROS ( id_int , id_int )
    (70) matrix_functions -> . ZEROS ( id_int )
    (59) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (61) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (62) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (63) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (64) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (43) unary -> . - right_hand_side_expression
    (               shift and go to state 28
    [               shift and go to state 31
    ID              shift and go to state 32
    STRING          shift and go to state 33
    FLOATNUM        shift and go to state 34
    INTNUM          shift and go to state 35
    EYE             shift and go to state 36
    ONES            shift and go to state 37
    ZEROS           shift and go to state 38
    -               shift and go to state 24

    right_hand_side_expression     shift and go to state 112
    matrix                         shift and go to state 22
    vector                         shift and go to state 23
    matrix_ref                     shift and go to state 25
    value                          shift and go to state 26
    matrix_functions               shift and go to state 27
    relation_expression            shift and go to state 29
    unary                          shift and go to state 30

state 64

    (31) right_hand_side_expression -> right_hand_side_expression DOTPLUS . right_hand_side_expression
    (26) right_hand_side_expression -> . matrix
    (27) right_hand_side_expression -> . vector
    (28) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (29) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (36) right_hand_side_expression -> . matrix '
    (37) right_hand_side_expression -> . matrix_ref
    (38) right_hand_side_expression -> . value
    (39) right_hand_side_expression -> . matrix_functions
    (40) right_hand_side_expression -> . ( right_hand_side_expression )
    (41) right_hand_side_expression -> . relation_expression
    (42) right_hand_side_expression -> . unary
    (73) matrix -> . [ vectors ]
    (71) vector -> . [ ]
    (72) vector -> . [ variables ]
    (56) matrix_ref -> . ID [ id_ints ]
    (22) value -> . STRING
    (23) value -> . ID
    (24) value -> . FLOATNUM
    (25) value -> . INTNUM
    (65) matrix_functions -> . EYE ( id_int , id_int )
    (66) matrix_functions -> . EYE ( id_int )
    (67) matrix_functions -> . ONES ( id_int , id_int )
    (68) matrix_functions -> . ONES ( id_int )
    (69) matrix_functions -> . ZEROS ( id_int , id_int )
    (70) matrix_functions -> . ZEROS ( id_int )
    (59) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (61) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (62) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (63) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (64) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (43) unary -> . - right_hand_side_expression
    (               shift and go to state 28
    [               shift and go to state 31
    ID              shift and go to state 32
    STRING          shift and go to state 33
    FLOATNUM        shift and go to state 34
    INTNUM          shift and go to state 35
    EYE             shift and go to state 36
    ONES            shift and go to state 37
    ZEROS           shift and go to state 38
    -               shift and go to state 24

    right_hand_side_expression     shift and go to state 113
    matrix                         shift and go to state 22
    vector                         shift and go to state 23
    matrix_ref                     shift and go to state 25
    value                          shift and go to state 26
    matrix_functions               shift and go to state 27
    relation_expression            shift and go to state 29
    unary                          shift and go to state 30

state 65

    (32) right_hand_side_expression -> right_hand_side_expression / . right_hand_side_expression
    (26) right_hand_side_expression -> . matrix
    (27) right_hand_side_expression -> . vector
    (28) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (29) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (36) right_hand_side_expression -> . matrix '
    (37) right_hand_side_expression -> . matrix_ref
    (38) right_hand_side_expression -> . value
    (39) right_hand_side_expression -> . matrix_functions
    (40) right_hand_side_expression -> . ( right_hand_side_expression )
    (41) right_hand_side_expression -> . relation_expression
    (42) right_hand_side_expression -> . unary
    (73) matrix -> . [ vectors ]
    (71) vector -> . [ ]
    (72) vector -> . [ variables ]
    (56) matrix_ref -> . ID [ id_ints ]
    (22) value -> . STRING
    (23) value -> . ID
    (24) value -> . FLOATNUM
    (25) value -> . INTNUM
    (65) matrix_functions -> . EYE ( id_int , id_int )
    (66) matrix_functions -> . EYE ( id_int )
    (67) matrix_functions -> . ONES ( id_int , id_int )
    (68) matrix_functions -> . ONES ( id_int )
    (69) matrix_functions -> . ZEROS ( id_int , id_int )
    (70) matrix_functions -> . ZEROS ( id_int )
    (59) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (61) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (62) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (63) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (64) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (43) unary -> . - right_hand_side_expression
    (               shift and go to state 28
    [               shift and go to state 31
    ID              shift and go to state 32
    STRING          shift and go to state 33
    FLOATNUM        shift and go to state 34
    INTNUM          shift and go to state 35
    EYE             shift and go to state 36
    ONES            shift and go to state 37
    ZEROS           shift and go to state 38
    -               shift and go to state 24

    right_hand_side_expression     shift and go to state 114
    matrix                         shift and go to state 22
    vector                         shift and go to state 23
    matrix_ref                     shift and go to state 25
    value                          shift and go to state 26
    matrix_functions               shift and go to state 27
    relation_expression            shift and go to state 29
    unary                          shift and go to state 30

state 66

    (33) right_hand_side_expression -> right_hand_side_expression * . right_hand_side_expression
    (26) right_hand_side_expression -> . matrix
    (27) right_hand_side_expression -> . vector
    (28) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (29) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (36) right_hand_side_expression -> . matrix '
    (37) right_hand_side_expression -> . matrix_ref
    (38) right_hand_side_expression -> . value
    (39) right_hand_side_expression -> . matrix_functions
    (40) right_hand_side_expression -> . ( right_hand_side_expression )
    (41) right_hand_side_expression -> . relation_expression
    (42) right_hand_side_expression -> . unary
    (73) matrix -> . [ vectors ]
    (71) vector -> . [ ]
    (72) vector -> . [ variables ]
    (56) matrix_ref -> . ID [ id_ints ]
    (22) value -> . STRING
    (23) value -> . ID
    (24) value -> . FLOATNUM
    (25) value -> . INTNUM
    (65) matrix_functions -> . EYE ( id_int , id_int )
    (66) matrix_functions -> . EYE ( id_int )
    (67) matrix_functions -> . ONES ( id_int , id_int )
    (68) matrix_functions -> . ONES ( id_int )
    (69) matrix_functions -> . ZEROS ( id_int , id_int )
    (70) matrix_functions -> . ZEROS ( id_int )
    (59) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (61) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (62) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (63) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (64) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (43) unary -> . - right_hand_side_expression
    (               shift and go to state 28
    [               shift and go to state 31
    ID              shift and go to state 32
    STRING          shift and go to state 33
    FLOATNUM        shift and go to state 34
    INTNUM          shift and go to state 35
    EYE             shift and go to state 36
    ONES            shift and go to state 37
    ZEROS           shift and go to state 38
    -               shift and go to state 24

    right_hand_side_expression     shift and go to state 115
    matrix                         shift and go to state 22
    vector                         shift and go to state 23
    matrix_ref                     shift and go to state 25
    value                          shift and go to state 26
    matrix_functions               shift and go to state 27
    relation_expression            shift and go to state 29
    unary                          shift and go to state 30

state 67

    (34) right_hand_side_expression -> right_hand_side_expression - . right_hand_side_expression
    (26) right_hand_side_expression -> . matrix
    (27) right_hand_side_expression -> . vector
    (28) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (29) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (36) right_hand_side_expression -> . matrix '
    (37) right_hand_side_expression -> . matrix_ref
    (38) right_hand_side_expression -> . value
    (39) right_hand_side_expression -> . matrix_functions
    (40) right_hand_side_expression -> . ( right_hand_side_expression )
    (41) right_hand_side_expression -> . relation_expression
    (42) right_hand_side_expression -> . unary
    (73) matrix -> . [ vectors ]
    (71) vector -> . [ ]
    (72) vector -> . [ variables ]
    (56) matrix_ref -> . ID [ id_ints ]
    (22) value -> . STRING
    (23) value -> . ID
    (24) value -> . FLOATNUM
    (25) value -> . INTNUM
    (65) matrix_functions -> . EYE ( id_int , id_int )
    (66) matrix_functions -> . EYE ( id_int )
    (67) matrix_functions -> . ONES ( id_int , id_int )
    (68) matrix_functions -> . ONES ( id_int )
    (69) matrix_functions -> . ZEROS ( id_int , id_int )
    (70) matrix_functions -> . ZEROS ( id_int )
    (59) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (61) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (62) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (63) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (64) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (43) unary -> . - right_hand_side_expression
    (               shift and go to state 28
    [               shift and go to state 31
    ID              shift and go to state 32
    STRING          shift and go to state 33
    FLOATNUM        shift and go to state 34
    INTNUM          shift and go to state 35
    EYE             shift and go to state 36
    ONES            shift and go to state 37
    ZEROS           shift and go to state 38
    -               shift and go to state 24

    right_hand_side_expression     shift and go to state 116
    matrix                         shift and go to state 22
    vector                         shift and go to state 23
    matrix_ref                     shift and go to state 25
    value                          shift and go to state 26
    matrix_functions               shift and go to state 27
    relation_expression            shift and go to state 29
    unary                          shift and go to state 30

state 68

    (35) right_hand_side_expression -> right_hand_side_expression + . right_hand_side_expression
    (26) right_hand_side_expression -> . matrix
    (27) right_hand_side_expression -> . vector
    (28) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (29) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (36) right_hand_side_expression -> . matrix '
    (37) right_hand_side_expression -> . matrix_ref
    (38) right_hand_side_expression -> . value
    (39) right_hand_side_expression -> . matrix_functions
    (40) right_hand_side_expression -> . ( right_hand_side_expression )
    (41) right_hand_side_expression -> . relation_expression
    (42) right_hand_side_expression -> . unary
    (73) matrix -> . [ vectors ]
    (71) vector -> . [ ]
    (72) vector -> . [ variables ]
    (56) matrix_ref -> . ID [ id_ints ]
    (22) value -> . STRING
    (23) value -> . ID
    (24) value -> . FLOATNUM
    (25) value -> . INTNUM
    (65) matrix_functions -> . EYE ( id_int , id_int )
    (66) matrix_functions -> . EYE ( id_int )
    (67) matrix_functions -> . ONES ( id_int , id_int )
    (68) matrix_functions -> . ONES ( id_int )
    (69) matrix_functions -> . ZEROS ( id_int , id_int )
    (70) matrix_functions -> . ZEROS ( id_int )
    (59) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (61) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (62) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (63) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (64) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (43) unary -> . - right_hand_side_expression
    (               shift and go to state 28
    [               shift and go to state 31
    ID              shift and go to state 32
    STRING          shift and go to state 33
    FLOATNUM        shift and go to state 34
    INTNUM          shift and go to state 35
    EYE             shift and go to state 36
    ONES            shift and go to state 37
    ZEROS           shift and go to state 38
    -               shift and go to state 24

    right_hand_side_expression     shift and go to state 117
    matrix                         shift and go to state 22
    vector                         shift and go to state 23
    matrix_ref                     shift and go to state 25
    value                          shift and go to state 26
    matrix_functions               shift and go to state 27
    relation_expression            shift and go to state 29
    unary                          shift and go to state 30

state 69

    (59) relation_expression -> right_hand_side_expression NE . right_hand_side_expression
    (26) right_hand_side_expression -> . matrix
    (27) right_hand_side_expression -> . vector
    (28) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (29) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (36) right_hand_side_expression -> . matrix '
    (37) right_hand_side_expression -> . matrix_ref
    (38) right_hand_side_expression -> . value
    (39) right_hand_side_expression -> . matrix_functions
    (40) right_hand_side_expression -> . ( right_hand_side_expression )
    (41) right_hand_side_expression -> . relation_expression
    (42) right_hand_side_expression -> . unary
    (73) matrix -> . [ vectors ]
    (71) vector -> . [ ]
    (72) vector -> . [ variables ]
    (56) matrix_ref -> . ID [ id_ints ]
    (22) value -> . STRING
    (23) value -> . ID
    (24) value -> . FLOATNUM
    (25) value -> . INTNUM
    (65) matrix_functions -> . EYE ( id_int , id_int )
    (66) matrix_functions -> . EYE ( id_int )
    (67) matrix_functions -> . ONES ( id_int , id_int )
    (68) matrix_functions -> . ONES ( id_int )
    (69) matrix_functions -> . ZEROS ( id_int , id_int )
    (70) matrix_functions -> . ZEROS ( id_int )
    (59) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (61) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (62) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (63) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (64) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (43) unary -> . - right_hand_side_expression
    (               shift and go to state 28
    [               shift and go to state 31
    ID              shift and go to state 32
    STRING          shift and go to state 33
    FLOATNUM        shift and go to state 34
    INTNUM          shift and go to state 35
    EYE             shift and go to state 36
    ONES            shift and go to state 37
    ZEROS           shift and go to state 38
    -               shift and go to state 24

    right_hand_side_expression     shift and go to state 118
    matrix                         shift and go to state 22
    vector                         shift and go to state 23
    matrix_ref                     shift and go to state 25
    value                          shift and go to state 26
    matrix_functions               shift and go to state 27
    relation_expression            shift and go to state 29
    unary                          shift and go to state 30

state 70

    (60) relation_expression -> right_hand_side_expression EQ . right_hand_side_expression
    (26) right_hand_side_expression -> . matrix
    (27) right_hand_side_expression -> . vector
    (28) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (29) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (36) right_hand_side_expression -> . matrix '
    (37) right_hand_side_expression -> . matrix_ref
    (38) right_hand_side_expression -> . value
    (39) right_hand_side_expression -> . matrix_functions
    (40) right_hand_side_expression -> . ( right_hand_side_expression )
    (41) right_hand_side_expression -> . relation_expression
    (42) right_hand_side_expression -> . unary
    (73) matrix -> . [ vectors ]
    (71) vector -> . [ ]
    (72) vector -> . [ variables ]
    (56) matrix_ref -> . ID [ id_ints ]
    (22) value -> . STRING
    (23) value -> . ID
    (24) value -> . FLOATNUM
    (25) value -> . INTNUM
    (65) matrix_functions -> . EYE ( id_int , id_int )
    (66) matrix_functions -> . EYE ( id_int )
    (67) matrix_functions -> . ONES ( id_int , id_int )
    (68) matrix_functions -> . ONES ( id_int )
    (69) matrix_functions -> . ZEROS ( id_int , id_int )
    (70) matrix_functions -> . ZEROS ( id_int )
    (59) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (61) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (62) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (63) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (64) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (43) unary -> . - right_hand_side_expression
    (               shift and go to state 28
    [               shift and go to state 31
    ID              shift and go to state 32
    STRING          shift and go to state 33
    FLOATNUM        shift and go to state 34
    INTNUM          shift and go to state 35
    EYE             shift and go to state 36
    ONES            shift and go to state 37
    ZEROS           shift and go to state 38
    -               shift and go to state 24

    right_hand_side_expression     shift and go to state 119
    matrix                         shift and go to state 22
    vector                         shift and go to state 23
    matrix_ref                     shift and go to state 25
    value                          shift and go to state 26
    matrix_functions               shift and go to state 27
    relation_expression            shift and go to state 29
    unary                          shift and go to state 30

state 71

    (61) relation_expression -> right_hand_side_expression GE . right_hand_side_expression
    (26) right_hand_side_expression -> . matrix
    (27) right_hand_side_expression -> . vector
    (28) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (29) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (36) right_hand_side_expression -> . matrix '
    (37) right_hand_side_expression -> . matrix_ref
    (38) right_hand_side_expression -> . value
    (39) right_hand_side_expression -> . matrix_functions
    (40) right_hand_side_expression -> . ( right_hand_side_expression )
    (41) right_hand_side_expression -> . relation_expression
    (42) right_hand_side_expression -> . unary
    (73) matrix -> . [ vectors ]
    (71) vector -> . [ ]
    (72) vector -> . [ variables ]
    (56) matrix_ref -> . ID [ id_ints ]
    (22) value -> . STRING
    (23) value -> . ID
    (24) value -> . FLOATNUM
    (25) value -> . INTNUM
    (65) matrix_functions -> . EYE ( id_int , id_int )
    (66) matrix_functions -> . EYE ( id_int )
    (67) matrix_functions -> . ONES ( id_int , id_int )
    (68) matrix_functions -> . ONES ( id_int )
    (69) matrix_functions -> . ZEROS ( id_int , id_int )
    (70) matrix_functions -> . ZEROS ( id_int )
    (59) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (61) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (62) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (63) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (64) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (43) unary -> . - right_hand_side_expression
    (               shift and go to state 28
    [               shift and go to state 31
    ID              shift and go to state 32
    STRING          shift and go to state 33
    FLOATNUM        shift and go to state 34
    INTNUM          shift and go to state 35
    EYE             shift and go to state 36
    ONES            shift and go to state 37
    ZEROS           shift and go to state 38
    -               shift and go to state 24

    right_hand_side_expression     shift and go to state 120
    matrix                         shift and go to state 22
    vector                         shift and go to state 23
    matrix_ref                     shift and go to state 25
    value                          shift and go to state 26
    matrix_functions               shift and go to state 27
    relation_expression            shift and go to state 29
    unary                          shift and go to state 30

state 72

    (62) relation_expression -> right_hand_side_expression LE . right_hand_side_expression
    (26) right_hand_side_expression -> . matrix
    (27) right_hand_side_expression -> . vector
    (28) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (29) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (36) right_hand_side_expression -> . matrix '
    (37) right_hand_side_expression -> . matrix_ref
    (38) right_hand_side_expression -> . value
    (39) right_hand_side_expression -> . matrix_functions
    (40) right_hand_side_expression -> . ( right_hand_side_expression )
    (41) right_hand_side_expression -> . relation_expression
    (42) right_hand_side_expression -> . unary
    (73) matrix -> . [ vectors ]
    (71) vector -> . [ ]
    (72) vector -> . [ variables ]
    (56) matrix_ref -> . ID [ id_ints ]
    (22) value -> . STRING
    (23) value -> . ID
    (24) value -> . FLOATNUM
    (25) value -> . INTNUM
    (65) matrix_functions -> . EYE ( id_int , id_int )
    (66) matrix_functions -> . EYE ( id_int )
    (67) matrix_functions -> . ONES ( id_int , id_int )
    (68) matrix_functions -> . ONES ( id_int )
    (69) matrix_functions -> . ZEROS ( id_int , id_int )
    (70) matrix_functions -> . ZEROS ( id_int )
    (59) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (61) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (62) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (63) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (64) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (43) unary -> . - right_hand_side_expression
    (               shift and go to state 28
    [               shift and go to state 31
    ID              shift and go to state 32
    STRING          shift and go to state 33
    FLOATNUM        shift and go to state 34
    INTNUM          shift and go to state 35
    EYE             shift and go to state 36
    ONES            shift and go to state 37
    ZEROS           shift and go to state 38
    -               shift and go to state 24

    right_hand_side_expression     shift and go to state 121
    matrix                         shift and go to state 22
    vector                         shift and go to state 23
    matrix_ref                     shift and go to state 25
    value                          shift and go to state 26
    matrix_functions               shift and go to state 27
    relation_expression            shift and go to state 29
    unary                          shift and go to state 30

state 73

    (63) relation_expression -> right_hand_side_expression GT . right_hand_side_expression
    (26) right_hand_side_expression -> . matrix
    (27) right_hand_side_expression -> . vector
    (28) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (29) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (36) right_hand_side_expression -> . matrix '
    (37) right_hand_side_expression -> . matrix_ref
    (38) right_hand_side_expression -> . value
    (39) right_hand_side_expression -> . matrix_functions
    (40) right_hand_side_expression -> . ( right_hand_side_expression )
    (41) right_hand_side_expression -> . relation_expression
    (42) right_hand_side_expression -> . unary
    (73) matrix -> . [ vectors ]
    (71) vector -> . [ ]
    (72) vector -> . [ variables ]
    (56) matrix_ref -> . ID [ id_ints ]
    (22) value -> . STRING
    (23) value -> . ID
    (24) value -> . FLOATNUM
    (25) value -> . INTNUM
    (65) matrix_functions -> . EYE ( id_int , id_int )
    (66) matrix_functions -> . EYE ( id_int )
    (67) matrix_functions -> . ONES ( id_int , id_int )
    (68) matrix_functions -> . ONES ( id_int )
    (69) matrix_functions -> . ZEROS ( id_int , id_int )
    (70) matrix_functions -> . ZEROS ( id_int )
    (59) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (61) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (62) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (63) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (64) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (43) unary -> . - right_hand_side_expression
    (               shift and go to state 28
    [               shift and go to state 31
    ID              shift and go to state 32
    STRING          shift and go to state 33
    FLOATNUM        shift and go to state 34
    INTNUM          shift and go to state 35
    EYE             shift and go to state 36
    ONES            shift and go to state 37
    ZEROS           shift and go to state 38
    -               shift and go to state 24

    right_hand_side_expression     shift and go to state 122
    matrix                         shift and go to state 22
    vector                         shift and go to state 23
    matrix_ref                     shift and go to state 25
    value                          shift and go to state 26
    matrix_functions               shift and go to state 27
    relation_expression            shift and go to state 29
    unary                          shift and go to state 30

state 74

    (64) relation_expression -> right_hand_side_expression LT . right_hand_side_expression
    (26) right_hand_side_expression -> . matrix
    (27) right_hand_side_expression -> . vector
    (28) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (29) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (36) right_hand_side_expression -> . matrix '
    (37) right_hand_side_expression -> . matrix_ref
    (38) right_hand_side_expression -> . value
    (39) right_hand_side_expression -> . matrix_functions
    (40) right_hand_side_expression -> . ( right_hand_side_expression )
    (41) right_hand_side_expression -> . relation_expression
    (42) right_hand_side_expression -> . unary
    (73) matrix -> . [ vectors ]
    (71) vector -> . [ ]
    (72) vector -> . [ variables ]
    (56) matrix_ref -> . ID [ id_ints ]
    (22) value -> . STRING
    (23) value -> . ID
    (24) value -> . FLOATNUM
    (25) value -> . INTNUM
    (65) matrix_functions -> . EYE ( id_int , id_int )
    (66) matrix_functions -> . EYE ( id_int )
    (67) matrix_functions -> . ONES ( id_int , id_int )
    (68) matrix_functions -> . ONES ( id_int )
    (69) matrix_functions -> . ZEROS ( id_int , id_int )
    (70) matrix_functions -> . ZEROS ( id_int )
    (59) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (61) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (62) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (63) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (64) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (43) unary -> . - right_hand_side_expression
    (               shift and go to state 28
    [               shift and go to state 31
    ID              shift and go to state 32
    STRING          shift and go to state 33
    FLOATNUM        shift and go to state 34
    INTNUM          shift and go to state 35
    EYE             shift and go to state 36
    ONES            shift and go to state 37
    ZEROS           shift and go to state 38
    -               shift and go to state 24

    right_hand_side_expression     shift and go to state 123
    matrix                         shift and go to state 22
    vector                         shift and go to state 23
    matrix_ref                     shift and go to state 25
    value                          shift and go to state 26
    matrix_functions               shift and go to state 27
    relation_expression            shift and go to state 29
    unary                          shift and go to state 30

state 75

    (36) right_hand_side_expression -> matrix ' .
    ;               reduce using rule 36 (right_hand_side_expression -> matrix ' .)
    DOTDIVIDE       reduce using rule 36 (right_hand_side_expression -> matrix ' .)
    DOTTIMES        reduce using rule 36 (right_hand_side_expression -> matrix ' .)
    DOTMINUS        reduce using rule 36 (right_hand_side_expression -> matrix ' .)
    DOTPLUS         reduce using rule 36 (right_hand_side_expression -> matrix ' .)
    /               reduce using rule 36 (right_hand_side_expression -> matrix ' .)
    *               reduce using rule 36 (right_hand_side_expression -> matrix ' .)
    -               reduce using rule 36 (right_hand_side_expression -> matrix ' .)
    +               reduce using rule 36 (right_hand_side_expression -> matrix ' .)
    NE              reduce using rule 36 (right_hand_side_expression -> matrix ' .)
    EQ              reduce using rule 36 (right_hand_side_expression -> matrix ' .)
    GE              reduce using rule 36 (right_hand_side_expression -> matrix ' .)
    LE              reduce using rule 36 (right_hand_side_expression -> matrix ' .)
    GT              reduce using rule 36 (right_hand_side_expression -> matrix ' .)
    LT              reduce using rule 36 (right_hand_side_expression -> matrix ' .)
    )               reduce using rule 36 (right_hand_side_expression -> matrix ' .)


state 76

    (43) unary -> - right_hand_side_expression .
    (28) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (29) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    (59) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (61) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (62) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (63) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (64) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
    ;               reduce using rule 43 (unary -> - right_hand_side_expression .)
    DOTDIVIDE       reduce using rule 43 (unary -> - right_hand_side_expression .)
    DOTTIMES        reduce using rule 43 (unary -> - right_hand_side_expression .)
    DOTMINUS        reduce using rule 43 (unary -> - right_hand_side_expression .)
    DOTPLUS         reduce using rule 43 (unary -> - right_hand_side_expression .)
    /               reduce using rule 43 (unary -> - right_hand_side_expression .)
    *               reduce using rule 43 (unary -> - right_hand_side_expression .)
    -               reduce using rule 43 (unary -> - right_hand_side_expression .)
    +               reduce using rule 43 (unary -> - right_hand_side_expression .)
    NE              reduce using rule 43 (unary -> - right_hand_side_expression .)
    EQ              reduce using rule 43 (unary -> - right_hand_side_expression .)
    GE              reduce using rule 43 (unary -> - right_hand_side_expression .)
    LE              reduce using rule 43 (unary -> - right_hand_side_expression .)
    GT              reduce using rule 43 (unary -> - right_hand_side_expression .)
    LT              reduce using rule 43 (unary -> - right_hand_side_expression .)
    )               reduce using rule 43 (unary -> - right_hand_side_expression .)


state 77

    (40) right_hand_side_expression -> ( right_hand_side_expression . )
    (28) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (29) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    (59) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (61) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (62) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (63) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (64) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
    )               shift and go to state 124
    DOTDIVIDE       shift and go to state 61
    DOTTIMES        shift and go to state 62
    DOTMINUS        shift and go to state 63
    DOTPLUS         shift and go to state 64
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68
    NE              shift and go to state 69
    EQ              shift and go to state 70
    GE              shift and go to state 71
    LE              shift and go to state 72
    GT              shift and go to state 73
    LT              shift and go to state 74


state 78

    (71) vector -> [ . ]
    (72) vector -> [ . variables ]
    (76) variables -> . value
    (77) variables -> . variables , value
    (22) value -> . STRING
    (23) value -> . ID
    (24) value -> . FLOATNUM
    (25) value -> . INTNUM
    ]               shift and go to state 80
    STRING          shift and go to state 33
    ID              shift and go to state 84
    FLOATNUM        shift and go to state 34
    INTNUM          shift and go to state 35

    variables                      shift and go to state 81
    value                          shift and go to state 83

state 79

    (73) matrix -> [ vectors . ]
    (75) vectors -> vectors . , vector
    ]               shift and go to state 125
    ,               shift and go to state 126


state 80

    (71) vector -> [ ] .
    ;               reduce using rule 71 (vector -> [ ] .)
    DOTDIVIDE       reduce using rule 71 (vector -> [ ] .)
    DOTTIMES        reduce using rule 71 (vector -> [ ] .)
    DOTMINUS        reduce using rule 71 (vector -> [ ] .)
    DOTPLUS         reduce using rule 71 (vector -> [ ] .)
    /               reduce using rule 71 (vector -> [ ] .)
    *               reduce using rule 71 (vector -> [ ] .)
    -               reduce using rule 71 (vector -> [ ] .)
    +               reduce using rule 71 (vector -> [ ] .)
    NE              reduce using rule 71 (vector -> [ ] .)
    EQ              reduce using rule 71 (vector -> [ ] .)
    GE              reduce using rule 71 (vector -> [ ] .)
    LE              reduce using rule 71 (vector -> [ ] .)
    GT              reduce using rule 71 (vector -> [ ] .)
    LT              reduce using rule 71 (vector -> [ ] .)
    )               reduce using rule 71 (vector -> [ ] .)
    ]               reduce using rule 71 (vector -> [ ] .)
    ,               reduce using rule 71 (vector -> [ ] .)


state 81

    (72) vector -> [ variables . ]
    (77) variables -> variables . , value
    ]               shift and go to state 127
    ,               shift and go to state 128


state 82

    (74) vectors -> vector .
    ]               reduce using rule 74 (vectors -> vector .)
    ,               reduce using rule 74 (vectors -> vector .)


state 83

    (76) variables -> value .
    ]               reduce using rule 76 (variables -> value .)
    ,               reduce using rule 76 (variables -> value .)


state 84

    (23) value -> ID .
    ]               reduce using rule 23 (value -> ID .)
    ,               reduce using rule 23 (value -> ID .)
    ;               reduce using rule 23 (value -> ID .)


state 85

    (65) matrix_functions -> EYE ( . id_int , id_int )
    (66) matrix_functions -> EYE ( . id_int )
    (16) id_int -> . ID
    (17) id_int -> . INTNUM
    ID              shift and go to state 98
    INTNUM          shift and go to state 101

    id_int                         shift and go to state 129

state 86

    (67) matrix_functions -> ONES ( . id_int , id_int )
    (68) matrix_functions -> ONES ( . id_int )
    (16) id_int -> . ID
    (17) id_int -> . INTNUM
    ID              shift and go to state 98
    INTNUM          shift and go to state 101

    id_int                         shift and go to state 130

state 87

    (69) matrix_functions -> ZEROS ( . id_int , id_int )
    (70) matrix_functions -> ZEROS ( . id_int )
    (16) id_int -> . ID
    (17) id_int -> . INTNUM
    ID              shift and go to state 98
    INTNUM          shift and go to state 101

    id_int                         shift and go to state 131

state 88

    (6) instruction -> { instructions } .
    RETURN          reduce using rule 6 (instruction -> { instructions } .)
    CONTINUE        reduce using rule 6 (instruction -> { instructions } .)
    BREAK           reduce using rule 6 (instruction -> { instructions } .)
    {               reduce using rule 6 (instruction -> { instructions } .)
    PRINT           reduce using rule 6 (instruction -> { instructions } .)
    (               reduce using rule 6 (instruction -> { instructions } .)
    FOR             reduce using rule 6 (instruction -> { instructions } .)
    WHILE           reduce using rule 6 (instruction -> { instructions } .)
    IF              reduce using rule 6 (instruction -> { instructions } .)
    ID              reduce using rule 6 (instruction -> { instructions } .)
    $end            reduce using rule 6 (instruction -> { instructions } .)
    }               reduce using rule 6 (instruction -> { instructions } .)
    ELSE            reduce using rule 6 (instruction -> { instructions } .)


state 89

    (18) print_instruction -> PRINT printables ; .
    RETURN          reduce using rule 18 (print_instruction -> PRINT printables ; .)
    CONTINUE        reduce using rule 18 (print_instruction -> PRINT printables ; .)
    BREAK           reduce using rule 18 (print_instruction -> PRINT printables ; .)
    {               reduce using rule 18 (print_instruction -> PRINT printables ; .)
    PRINT           reduce using rule 18 (print_instruction -> PRINT printables ; .)
    (               reduce using rule 18 (print_instruction -> PRINT printables ; .)
    FOR             reduce using rule 18 (print_instruction -> PRINT printables ; .)
    WHILE           reduce using rule 18 (print_instruction -> PRINT printables ; .)
    IF              reduce using rule 18 (print_instruction -> PRINT printables ; .)
    ID              reduce using rule 18 (print_instruction -> PRINT printables ; .)
    $end            reduce using rule 18 (print_instruction -> PRINT printables ; .)
    }               reduce using rule 18 (print_instruction -> PRINT printables ; .)
    ELSE            reduce using rule 18 (print_instruction -> PRINT printables ; .)


state 90

    (21) printables -> printables , . value
    (22) value -> . STRING
    (23) value -> . ID
    (24) value -> . FLOATNUM
    (25) value -> . INTNUM
    STRING          shift and go to state 33
    ID              shift and go to state 84
    FLOATNUM        shift and go to state 34
    INTNUM          shift and go to state 35

    value                          shift and go to state 132

state 91

    (44) full_line_instruction -> ( full_line_instruction ) .
    RETURN          reduce using rule 44 (full_line_instruction -> ( full_line_instruction ) .)
    CONTINUE        reduce using rule 44 (full_line_instruction -> ( full_line_instruction ) .)
    BREAK           reduce using rule 44 (full_line_instruction -> ( full_line_instruction ) .)
    {               reduce using rule 44 (full_line_instruction -> ( full_line_instruction ) .)
    PRINT           reduce using rule 44 (full_line_instruction -> ( full_line_instruction ) .)
    (               reduce using rule 44 (full_line_instruction -> ( full_line_instruction ) .)
    FOR             reduce using rule 44 (full_line_instruction -> ( full_line_instruction ) .)
    WHILE           reduce using rule 44 (full_line_instruction -> ( full_line_instruction ) .)
    IF              reduce using rule 44 (full_line_instruction -> ( full_line_instruction ) .)
    ID              reduce using rule 44 (full_line_instruction -> ( full_line_instruction ) .)
    $end            reduce using rule 44 (full_line_instruction -> ( full_line_instruction ) .)
    }               reduce using rule 44 (full_line_instruction -> ( full_line_instruction ) .)
    )               reduce using rule 44 (full_line_instruction -> ( full_line_instruction ) .)
    ELSE            reduce using rule 44 (full_line_instruction -> ( full_line_instruction ) .)


state 92

    (15) for_instruction -> FOR ID = . id_int : id_int instruction
    (16) id_int -> . ID
    (17) id_int -> . INTNUM
    ID              shift and go to state 98
    INTNUM          shift and go to state 101

    id_int                         shift and go to state 133

state 93

    (46) assign_instruction -> ID DIVIDEASSIGN right_hand_side_expression . ;
    (28) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (29) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    (59) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (61) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (62) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (63) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (64) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
    ;               shift and go to state 134
    DOTDIVIDE       shift and go to state 61
    DOTTIMES        shift and go to state 62
    DOTMINUS        shift and go to state 63
    DOTPLUS         shift and go to state 64
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68
    NE              shift and go to state 69
    EQ              shift and go to state 70
    GE              shift and go to state 71
    LE              shift and go to state 72
    GT              shift and go to state 73
    LT              shift and go to state 74


state 94

    (47) assign_instruction -> ID TIMESASSIGN right_hand_side_expression . ;
    (28) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (29) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    (59) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (61) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (62) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (63) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (64) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
    ;               shift and go to state 135
    DOTDIVIDE       shift and go to state 61
    DOTTIMES        shift and go to state 62
    DOTMINUS        shift and go to state 63
    DOTPLUS         shift and go to state 64
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68
    NE              shift and go to state 69
    EQ              shift and go to state 70
    GE              shift and go to state 71
    LE              shift and go to state 72
    GT              shift and go to state 73
    LT              shift and go to state 74


state 95

    (48) assign_instruction -> ID MINUSASSIGN right_hand_side_expression . ;
    (28) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (29) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    (59) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (61) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (62) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (63) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (64) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
    ;               shift and go to state 136
    DOTDIVIDE       shift and go to state 61
    DOTTIMES        shift and go to state 62
    DOTMINUS        shift and go to state 63
    DOTPLUS         shift and go to state 64
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68
    NE              shift and go to state 69
    EQ              shift and go to state 70
    GE              shift and go to state 71
    LE              shift and go to state 72
    GT              shift and go to state 73
    LT              shift and go to state 74


state 96

    (49) assign_instruction -> ID PLUSASSIGN right_hand_side_expression . ;
    (28) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (29) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    (59) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (61) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (62) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (63) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (64) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
    ;               shift and go to state 137
    DOTDIVIDE       shift and go to state 61
    DOTTIMES        shift and go to state 62
    DOTMINUS        shift and go to state 63
    DOTPLUS         shift and go to state 64
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68
    NE              shift and go to state 69
    EQ              shift and go to state 70
    GE              shift and go to state 71
    LE              shift and go to state 72
    GT              shift and go to state 73
    LT              shift and go to state 74


state 97

    (50) assign_instruction -> ID = right_hand_side_expression . ;
    (28) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (29) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    (59) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (61) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (62) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (63) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (64) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
    ;               shift and go to state 138
    DOTDIVIDE       shift and go to state 61
    DOTTIMES        shift and go to state 62
    DOTMINUS        shift and go to state 63
    DOTPLUS         shift and go to state 64
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68
    NE              shift and go to state 69
    EQ              shift and go to state 70
    GE              shift and go to state 71
    LE              shift and go to state 72
    GT              shift and go to state 73
    LT              shift and go to state 74


state 98

    (16) id_int -> ID .
    ]               reduce using rule 16 (id_int -> ID .)
    ,               reduce using rule 16 (id_int -> ID .)
    )               reduce using rule 16 (id_int -> ID .)
    :               reduce using rule 16 (id_int -> ID .)
    RETURN          reduce using rule 16 (id_int -> ID .)
    CONTINUE        reduce using rule 16 (id_int -> ID .)
    BREAK           reduce using rule 16 (id_int -> ID .)
    {               reduce using rule 16 (id_int -> ID .)
    PRINT           reduce using rule 16 (id_int -> ID .)
    (               reduce using rule 16 (id_int -> ID .)
    FOR             reduce using rule 16 (id_int -> ID .)
    WHILE           reduce using rule 16 (id_int -> ID .)
    IF              reduce using rule 16 (id_int -> ID .)
    ID              reduce using rule 16 (id_int -> ID .)


state 99

    (56) matrix_ref -> ID [ id_ints . ]
    (58) id_ints -> id_ints . , id_int
    ]               shift and go to state 139
    ,               shift and go to state 140


state 100

    (57) id_ints -> id_int .
    ]               reduce using rule 57 (id_ints -> id_int .)
    ,               reduce using rule 57 (id_ints -> id_int .)


state 101

    (17) id_int -> INTNUM .
    ]               reduce using rule 17 (id_int -> INTNUM .)
    ,               reduce using rule 17 (id_int -> INTNUM .)
    )               reduce using rule 17 (id_int -> INTNUM .)
    :               reduce using rule 17 (id_int -> INTNUM .)
    RETURN          reduce using rule 17 (id_int -> INTNUM .)
    CONTINUE        reduce using rule 17 (id_int -> INTNUM .)
    BREAK           reduce using rule 17 (id_int -> INTNUM .)
    {               reduce using rule 17 (id_int -> INTNUM .)
    PRINT           reduce using rule 17 (id_int -> INTNUM .)
    (               reduce using rule 17 (id_int -> INTNUM .)
    FOR             reduce using rule 17 (id_int -> INTNUM .)
    WHILE           reduce using rule 17 (id_int -> INTNUM .)
    IF              reduce using rule 17 (id_int -> INTNUM .)
    ID              reduce using rule 17 (id_int -> INTNUM .)


state 102

    (14) while_instruction -> WHILE ( relation_expression . ) instruction
    (41) right_hand_side_expression -> relation_expression .
    )               shift and go to state 141
    NE              reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    EQ              reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    GE              reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    LE              reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    GT              reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    LT              reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    DOTDIVIDE       reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    DOTTIMES        reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    DOTMINUS        reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    DOTPLUS         reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    /               reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    *               reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    -               reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    +               reduce using rule 41 (right_hand_side_expression -> relation_expression .)


state 103

    (59) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (61) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (62) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (63) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (64) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
    (28) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (29) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    NE              shift and go to state 69
    EQ              shift and go to state 70
    GE              shift and go to state 71
    LE              shift and go to state 72
    GT              shift and go to state 73
    LT              shift and go to state 74
    DOTDIVIDE       shift and go to state 61
    DOTTIMES        shift and go to state 62
    DOTMINUS        shift and go to state 63
    DOTPLUS         shift and go to state 64
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68


state 104

    (12) if_instruction -> IF ( relation_expression . ) instruction
    (13) if_instruction -> IF ( relation_expression . ) instruction ELSE instruction
    (41) right_hand_side_expression -> relation_expression .
    )               shift and go to state 142
    NE              reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    EQ              reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    GE              reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    LE              reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    GT              reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    LT              reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    DOTDIVIDE       reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    DOTTIMES        reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    DOTMINUS        reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    DOTPLUS         reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    /               reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    *               reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    -               reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    +               reduce using rule 41 (right_hand_side_expression -> relation_expression .)


state 105

    (51) assign_instruction -> matrix_ref DIVIDEASSIGN right_hand_side_expression . ;
    (28) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (29) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    (59) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (61) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (62) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (63) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (64) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
    ;               shift and go to state 143
    DOTDIVIDE       shift and go to state 61
    DOTTIMES        shift and go to state 62
    DOTMINUS        shift and go to state 63
    DOTPLUS         shift and go to state 64
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68
    NE              shift and go to state 69
    EQ              shift and go to state 70
    GE              shift and go to state 71
    LE              shift and go to state 72
    GT              shift and go to state 73
    LT              shift and go to state 74


state 106

    (52) assign_instruction -> matrix_ref TIMESASSIGN right_hand_side_expression . ;
    (28) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (29) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    (59) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (61) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (62) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (63) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (64) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
    ;               shift and go to state 144
    DOTDIVIDE       shift and go to state 61
    DOTTIMES        shift and go to state 62
    DOTMINUS        shift and go to state 63
    DOTPLUS         shift and go to state 64
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68
    NE              shift and go to state 69
    EQ              shift and go to state 70
    GE              shift and go to state 71
    LE              shift and go to state 72
    GT              shift and go to state 73
    LT              shift and go to state 74


state 107

    (53) assign_instruction -> matrix_ref MINUSASSIGN right_hand_side_expression . ;
    (28) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (29) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    (59) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (61) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (62) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (63) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (64) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
    ;               shift and go to state 145
    DOTDIVIDE       shift and go to state 61
    DOTTIMES        shift and go to state 62
    DOTMINUS        shift and go to state 63
    DOTPLUS         shift and go to state 64
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68
    NE              shift and go to state 69
    EQ              shift and go to state 70
    GE              shift and go to state 71
    LE              shift and go to state 72
    GT              shift and go to state 73
    LT              shift and go to state 74


state 108

    (54) assign_instruction -> matrix_ref PLUSASSIGN right_hand_side_expression . ;
    (28) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (29) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    (59) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (61) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (62) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (63) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (64) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
    ;               shift and go to state 146
    DOTDIVIDE       shift and go to state 61
    DOTTIMES        shift and go to state 62
    DOTMINUS        shift and go to state 63
    DOTPLUS         shift and go to state 64
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68
    NE              shift and go to state 69
    EQ              shift and go to state 70
    GE              shift and go to state 71
    LE              shift and go to state 72
    GT              shift and go to state 73
    LT              shift and go to state 74


state 109

    (55) assign_instruction -> matrix_ref = right_hand_side_expression . ;
    (28) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (29) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    (59) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (61) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (62) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (63) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (64) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
    ;               shift and go to state 147
    DOTDIVIDE       shift and go to state 61
    DOTTIMES        shift and go to state 62
    DOTMINUS        shift and go to state 63
    DOTPLUS         shift and go to state 64
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68
    NE              shift and go to state 69
    EQ              shift and go to state 70
    GE              shift and go to state 71
    LE              shift and go to state 72
    GT              shift and go to state 73
    LT              shift and go to state 74


state 110

    (28) right_hand_side_expression -> right_hand_side_expression DOTDIVIDE right_hand_side_expression .
    (28) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (29) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    (59) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (61) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (62) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (63) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (64) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
    ;               reduce using rule 28 (right_hand_side_expression -> right_hand_side_expression DOTDIVIDE right_hand_side_expression .)
    DOTDIVIDE       reduce using rule 28 (right_hand_side_expression -> right_hand_side_expression DOTDIVIDE right_hand_side_expression .)
    DOTTIMES        reduce using rule 28 (right_hand_side_expression -> right_hand_side_expression DOTDIVIDE right_hand_side_expression .)
    DOTMINUS        reduce using rule 28 (right_hand_side_expression -> right_hand_side_expression DOTDIVIDE right_hand_side_expression .)
    DOTPLUS         reduce using rule 28 (right_hand_side_expression -> right_hand_side_expression DOTDIVIDE right_hand_side_expression .)
    /               reduce using rule 28 (right_hand_side_expression -> right_hand_side_expression DOTDIVIDE right_hand_side_expression .)
    *               reduce using rule 28 (right_hand_side_expression -> right_hand_side_expression DOTDIVIDE right_hand_side_expression .)
    -               reduce using rule 28 (right_hand_side_expression -> right_hand_side_expression DOTDIVIDE right_hand_side_expression .)
    +               reduce using rule 28 (right_hand_side_expression -> right_hand_side_expression DOTDIVIDE right_hand_side_expression .)
    NE              reduce using rule 28 (right_hand_side_expression -> right_hand_side_expression DOTDIVIDE right_hand_side_expression .)
    EQ              reduce using rule 28 (right_hand_side_expression -> right_hand_side_expression DOTDIVIDE right_hand_side_expression .)
    GE              reduce using rule 28 (right_hand_side_expression -> right_hand_side_expression DOTDIVIDE right_hand_side_expression .)
    LE              reduce using rule 28 (right_hand_side_expression -> right_hand_side_expression DOTDIVIDE right_hand_side_expression .)
    GT              reduce using rule 28 (right_hand_side_expression -> right_hand_side_expression DOTDIVIDE right_hand_side_expression .)
    LT              reduce using rule 28 (right_hand_side_expression -> right_hand_side_expression DOTDIVIDE right_hand_side_expression .)
    )               reduce using rule 28 (right_hand_side_expression -> right_hand_side_expression DOTDIVIDE right_hand_side_expression .)


state 111

    (29) right_hand_side_expression -> right_hand_side_expression DOTTIMES right_hand_side_expression .
    (28) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (29) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    (59) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (61) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (62) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (63) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (64) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
    ;               reduce using rule 29 (right_hand_side_expression -> right_hand_side_expression DOTTIMES right_hand_side_expression .)
    DOTDIVIDE       reduce using rule 29 (right_hand_side_expression -> right_hand_side_expression DOTTIMES right_hand_side_expression .)
    DOTTIMES        reduce using rule 29 (right_hand_side_expression -> right_hand_side_expression DOTTIMES right_hand_side_expression .)
    DOTMINUS        reduce using rule 29 (right_hand_side_expression -> right_hand_side_expression DOTTIMES right_hand_side_expression .)
    DOTPLUS         reduce using rule 29 (right_hand_side_expression -> right_hand_side_expression DOTTIMES right_hand_side_expression .)
    /               reduce using rule 29 (right_hand_side_expression -> right_hand_side_expression DOTTIMES right_hand_side_expression .)
    *               reduce using rule 29 (right_hand_side_expression -> right_hand_side_expression DOTTIMES right_hand_side_expression .)
    -               reduce using rule 29 (right_hand_side_expression -> right_hand_side_expression DOTTIMES right_hand_side_expression .)
    +               reduce using rule 29 (right_hand_side_expression -> right_hand_side_expression DOTTIMES right_hand_side_expression .)
    NE              reduce using rule 29 (right_hand_side_expression -> right_hand_side_expression DOTTIMES right_hand_side_expression .)
    EQ              reduce using rule 29 (right_hand_side_expression -> right_hand_side_expression DOTTIMES right_hand_side_expression .)
    GE              reduce using rule 29 (right_hand_side_expression -> right_hand_side_expression DOTTIMES right_hand_side_expression .)
    LE              reduce using rule 29 (right_hand_side_expression -> right_hand_side_expression DOTTIMES right_hand_side_expression .)
    GT              reduce using rule 29 (right_hand_side_expression -> right_hand_side_expression DOTTIMES right_hand_side_expression .)
    LT              reduce using rule 29 (right_hand_side_expression -> right_hand_side_expression DOTTIMES right_hand_side_expression .)
    )               reduce using rule 29 (right_hand_side_expression -> right_hand_side_expression DOTTIMES right_hand_side_expression .)


state 112

    (30) right_hand_side_expression -> right_hand_side_expression DOTMINUS right_hand_side_expression .
    (28) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (29) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    (59) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (61) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (62) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (63) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (64) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
    ;               reduce using rule 30 (right_hand_side_expression -> right_hand_side_expression DOTMINUS right_hand_side_expression .)
    DOTMINUS        reduce using rule 30 (right_hand_side_expression -> right_hand_side_expression DOTMINUS right_hand_side_expression .)
    DOTPLUS         reduce using rule 30 (right_hand_side_expression -> right_hand_side_expression DOTMINUS right_hand_side_expression .)
    -               reduce using rule 30 (right_hand_side_expression -> right_hand_side_expression DOTMINUS right_hand_side_expression .)
    +               reduce using rule 30 (right_hand_side_expression -> right_hand_side_expression DOTMINUS right_hand_side_expression .)
    NE              reduce using rule 30 (right_hand_side_expression -> right_hand_side_expression DOTMINUS right_hand_side_expression .)
    EQ              reduce using rule 30 (right_hand_side_expression -> right_hand_side_expression DOTMINUS right_hand_side_expression .)
    GE              reduce using rule 30 (right_hand_side_expression -> right_hand_side_expression DOTMINUS right_hand_side_expression .)
    LE              reduce using rule 30 (right_hand_side_expression -> right_hand_side_expression DOTMINUS right_hand_side_expression .)
    GT              reduce using rule 30 (right_hand_side_expression -> right_hand_side_expression DOTMINUS right_hand_side_expression .)
    LT              reduce using rule 30 (right_hand_side_expression -> right_hand_side_expression DOTMINUS right_hand_side_expression .)
    )               reduce using rule 30 (right_hand_side_expression -> right_hand_side_expression DOTMINUS right_hand_side_expression .)
    DOTDIVIDE       shift and go to state 61
    DOTTIMES        shift and go to state 62
    /               shift and go to state 65
    *               shift and go to state 66


state 113

    (31) right_hand_side_expression -> right_hand_side_expression DOTPLUS right_hand_side_expression .
    (28) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (29) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    (59) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (61) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (62) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (63) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (64) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
    ;               reduce using rule 31 (right_hand_side_expression -> right_hand_side_expression DOTPLUS right_hand_side_expression .)
    DOTMINUS        reduce using rule 31 (right_hand_side_expression -> right_hand_side_expression DOTPLUS right_hand_side_expression .)
    DOTPLUS         reduce using rule 31 (right_hand_side_expression -> right_hand_side_expression DOTPLUS right_hand_side_expression .)
    -               reduce using rule 31 (right_hand_side_expression -> right_hand_side_expression DOTPLUS right_hand_side_expression .)
    +               reduce using rule 31 (right_hand_side_expression -> right_hand_side_expression DOTPLUS right_hand_side_expression .)
    NE              reduce using rule 31 (right_hand_side_expression -> right_hand_side_expression DOTPLUS right_hand_side_expression .)
    EQ              reduce using rule 31 (right_hand_side_expression -> right_hand_side_expression DOTPLUS right_hand_side_expression .)
    GE              reduce using rule 31 (right_hand_side_expression -> right_hand_side_expression DOTPLUS right_hand_side_expression .)
    LE              reduce using rule 31 (right_hand_side_expression -> right_hand_side_expression DOTPLUS right_hand_side_expression .)
    GT              reduce using rule 31 (right_hand_side_expression -> right_hand_side_expression DOTPLUS right_hand_side_expression .)
    LT              reduce using rule 31 (right_hand_side_expression -> right_hand_side_expression DOTPLUS right_hand_side_expression .)
    )               reduce using rule 31 (right_hand_side_expression -> right_hand_side_expression DOTPLUS right_hand_side_expression .)
    DOTDIVIDE       shift and go to state 61
    DOTTIMES        shift and go to state 62
    /               shift and go to state 65
    *               shift and go to state 66


state 114

    (32) right_hand_side_expression -> right_hand_side_expression / right_hand_side_expression .
    (28) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (29) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    (59) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (61) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (62) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (63) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (64) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
    ;               reduce using rule 32 (right_hand_side_expression -> right_hand_side_expression / right_hand_side_expression .)
    DOTDIVIDE       reduce using rule 32 (right_hand_side_expression -> right_hand_side_expression / right_hand_side_expression .)
    DOTTIMES        reduce using rule 32 (right_hand_side_expression -> right_hand_side_expression / right_hand_side_expression .)
    DOTMINUS        reduce using rule 32 (right_hand_side_expression -> right_hand_side_expression / right_hand_side_expression .)
    DOTPLUS         reduce using rule 32 (right_hand_side_expression -> right_hand_side_expression / right_hand_side_expression .)
    /               reduce using rule 32 (right_hand_side_expression -> right_hand_side_expression / right_hand_side_expression .)
    *               reduce using rule 32 (right_hand_side_expression -> right_hand_side_expression / right_hand_side_expression .)
    -               reduce using rule 32 (right_hand_side_expression -> right_hand_side_expression / right_hand_side_expression .)
    +               reduce using rule 32 (right_hand_side_expression -> right_hand_side_expression / right_hand_side_expression .)
    NE              reduce using rule 32 (right_hand_side_expression -> right_hand_side_expression / right_hand_side_expression .)
    EQ              reduce using rule 32 (right_hand_side_expression -> right_hand_side_expression / right_hand_side_expression .)
    GE              reduce using rule 32 (right_hand_side_expression -> right_hand_side_expression / right_hand_side_expression .)
    LE              reduce using rule 32 (right_hand_side_expression -> right_hand_side_expression / right_hand_side_expression .)
    GT              reduce using rule 32 (right_hand_side_expression -> right_hand_side_expression / right_hand_side_expression .)
    LT              reduce using rule 32 (right_hand_side_expression -> right_hand_side_expression / right_hand_side_expression .)
    )               reduce using rule 32 (right_hand_side_expression -> right_hand_side_expression / right_hand_side_expression .)


state 115

    (33) right_hand_side_expression -> right_hand_side_expression * right_hand_side_expression .
    (28) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (29) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    (59) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (61) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (62) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (63) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (64) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
    ;               reduce using rule 33 (right_hand_side_expression -> right_hand_side_expression * right_hand_side_expression .)
    DOTDIVIDE       reduce using rule 33 (right_hand_side_expression -> right_hand_side_expression * right_hand_side_expression .)
    DOTTIMES        reduce using rule 33 (right_hand_side_expression -> right_hand_side_expression * right_hand_side_expression .)
    DOTMINUS        reduce using rule 33 (right_hand_side_expression -> right_hand_side_expression * right_hand_side_expression .)
    DOTPLUS         reduce using rule 33 (right_hand_side_expression -> right_hand_side_expression * right_hand_side_expression .)
    /               reduce using rule 33 (right_hand_side_expression -> right_hand_side_expression * right_hand_side_expression .)
    *               reduce using rule 33 (right_hand_side_expression -> right_hand_side_expression * right_hand_side_expression .)
    -               reduce using rule 33 (right_hand_side_expression -> right_hand_side_expression * right_hand_side_expression .)
    +               reduce using rule 33 (right_hand_side_expression -> right_hand_side_expression * right_hand_side_expression .)
    NE              reduce using rule 33 (right_hand_side_expression -> right_hand_side_expression * right_hand_side_expression .)
    EQ              reduce using rule 33 (right_hand_side_expression -> right_hand_side_expression * right_hand_side_expression .)
    GE              reduce using rule 33 (right_hand_side_expression -> right_hand_side_expression * right_hand_side_expression .)
    LE              reduce using rule 33 (right_hand_side_expression -> right_hand_side_expression * right_hand_side_expression .)
    GT              reduce using rule 33 (right_hand_side_expression -> right_hand_side_expression * right_hand_side_expression .)
    LT              reduce using rule 33 (right_hand_side_expression -> right_hand_side_expression * right_hand_side_expression .)
    )               reduce using rule 33 (right_hand_side_expression -> right_hand_side_expression * right_hand_side_expression .)


state 116

    (34) right_hand_side_expression -> right_hand_side_expression - right_hand_side_expression .
    (28) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (29) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    (59) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (61) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (62) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (63) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (64) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
    ;               reduce using rule 34 (right_hand_side_expression -> right_hand_side_expression - right_hand_side_expression .)
    DOTMINUS        reduce using rule 34 (right_hand_side_expression -> right_hand_side_expression - right_hand_side_expression .)
    DOTPLUS         reduce using rule 34 (right_hand_side_expression -> right_hand_side_expression - right_hand_side_expression .)
    -               reduce using rule 34 (right_hand_side_expression -> right_hand_side_expression - right_hand_side_expression .)
    +               reduce using rule 34 (right_hand_side_expression -> right_hand_side_expression - right_hand_side_expression .)
    NE              reduce using rule 34 (right_hand_side_expression -> right_hand_side_expression - right_hand_side_expression .)
    EQ              reduce using rule 34 (right_hand_side_expression -> right_hand_side_expression - right_hand_side_expression .)
    GE              reduce using rule 34 (right_hand_side_expression -> right_hand_side_expression - right_hand_side_expression .)
    LE              reduce using rule 34 (right_hand_side_expression -> right_hand_side_expression - right_hand_side_expression .)
    GT              reduce using rule 34 (right_hand_side_expression -> right_hand_side_expression - right_hand_side_expression .)
    LT              reduce using rule 34 (right_hand_side_expression -> right_hand_side_expression - right_hand_side_expression .)
    )               reduce using rule 34 (right_hand_side_expression -> right_hand_side_expression - right_hand_side_expression .)
    DOTDIVIDE       shift and go to state 61
    DOTTIMES        shift and go to state 62
    /               shift and go to state 65
    *               shift and go to state 66


state 117

    (35) right_hand_side_expression -> right_hand_side_expression + right_hand_side_expression .
    (28) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (29) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    (59) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (61) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (62) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (63) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (64) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
    ;               reduce using rule 35 (right_hand_side_expression -> right_hand_side_expression + right_hand_side_expression .)
    DOTMINUS        reduce using rule 35 (right_hand_side_expression -> right_hand_side_expression + right_hand_side_expression .)
    DOTPLUS         reduce using rule 35 (right_hand_side_expression -> right_hand_side_expression + right_hand_side_expression .)
    -               reduce using rule 35 (right_hand_side_expression -> right_hand_side_expression + right_hand_side_expression .)
    +               reduce using rule 35 (right_hand_side_expression -> right_hand_side_expression + right_hand_side_expression .)
    NE              reduce using rule 35 (right_hand_side_expression -> right_hand_side_expression + right_hand_side_expression .)
    EQ              reduce using rule 35 (right_hand_side_expression -> right_hand_side_expression + right_hand_side_expression .)
    GE              reduce using rule 35 (right_hand_side_expression -> right_hand_side_expression + right_hand_side_expression .)
    LE              reduce using rule 35 (right_hand_side_expression -> right_hand_side_expression + right_hand_side_expression .)
    GT              reduce using rule 35 (right_hand_side_expression -> right_hand_side_expression + right_hand_side_expression .)
    LT              reduce using rule 35 (right_hand_side_expression -> right_hand_side_expression + right_hand_side_expression .)
    )               reduce using rule 35 (right_hand_side_expression -> right_hand_side_expression + right_hand_side_expression .)
    DOTDIVIDE       shift and go to state 61
    DOTTIMES        shift and go to state 62
    /               shift and go to state 65
    *               shift and go to state 66


state 118

    (59) relation_expression -> right_hand_side_expression NE right_hand_side_expression .
    (28) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (29) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    (59) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (61) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (62) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (63) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (64) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
    ;               reduce using rule 59 (relation_expression -> right_hand_side_expression NE right_hand_side_expression .)
    NE              reduce using rule 59 (relation_expression -> right_hand_side_expression NE right_hand_side_expression .)
    EQ              reduce using rule 59 (relation_expression -> right_hand_side_expression NE right_hand_side_expression .)
    GE              reduce using rule 59 (relation_expression -> right_hand_side_expression NE right_hand_side_expression .)
    LE              reduce using rule 59 (relation_expression -> right_hand_side_expression NE right_hand_side_expression .)
    GT              reduce using rule 59 (relation_expression -> right_hand_side_expression NE right_hand_side_expression .)
    LT              reduce using rule 59 (relation_expression -> right_hand_side_expression NE right_hand_side_expression .)
    )               reduce using rule 59 (relation_expression -> right_hand_side_expression NE right_hand_side_expression .)
    DOTDIVIDE       shift and go to state 61
    DOTTIMES        shift and go to state 62
    DOTMINUS        shift and go to state 63
    DOTPLUS         shift and go to state 64
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68


state 119

    (60) relation_expression -> right_hand_side_expression EQ right_hand_side_expression .
    (28) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (29) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    (59) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (61) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (62) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (63) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (64) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
    ;               reduce using rule 60 (relation_expression -> right_hand_side_expression EQ right_hand_side_expression .)
    NE              reduce using rule 60 (relation_expression -> right_hand_side_expression EQ right_hand_side_expression .)
    EQ              reduce using rule 60 (relation_expression -> right_hand_side_expression EQ right_hand_side_expression .)
    GE              reduce using rule 60 (relation_expression -> right_hand_side_expression EQ right_hand_side_expression .)
    LE              reduce using rule 60 (relation_expression -> right_hand_side_expression EQ right_hand_side_expression .)
    GT              reduce using rule 60 (relation_expression -> right_hand_side_expression EQ right_hand_side_expression .)
    LT              reduce using rule 60 (relation_expression -> right_hand_side_expression EQ right_hand_side_expression .)
    )               reduce using rule 60 (relation_expression -> right_hand_side_expression EQ right_hand_side_expression .)
    DOTDIVIDE       shift and go to state 61
    DOTTIMES        shift and go to state 62
    DOTMINUS        shift and go to state 63
    DOTPLUS         shift and go to state 64
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68


state 120

    (61) relation_expression -> right_hand_side_expression GE right_hand_side_expression .
    (28) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (29) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    (59) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (61) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (62) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (63) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (64) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
    ;               reduce using rule 61 (relation_expression -> right_hand_side_expression GE right_hand_side_expression .)
    NE              reduce using rule 61 (relation_expression -> right_hand_side_expression GE right_hand_side_expression .)
    EQ              reduce using rule 61 (relation_expression -> right_hand_side_expression GE right_hand_side_expression .)
    GE              reduce using rule 61 (relation_expression -> right_hand_side_expression GE right_hand_side_expression .)
    LE              reduce using rule 61 (relation_expression -> right_hand_side_expression GE right_hand_side_expression .)
    GT              reduce using rule 61 (relation_expression -> right_hand_side_expression GE right_hand_side_expression .)
    LT              reduce using rule 61 (relation_expression -> right_hand_side_expression GE right_hand_side_expression .)
    )               reduce using rule 61 (relation_expression -> right_hand_side_expression GE right_hand_side_expression .)
    DOTDIVIDE       shift and go to state 61
    DOTTIMES        shift and go to state 62
    DOTMINUS        shift and go to state 63
    DOTPLUS         shift and go to state 64
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68


state 121

    (62) relation_expression -> right_hand_side_expression LE right_hand_side_expression .
    (28) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (29) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    (59) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (61) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (62) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (63) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (64) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
    ;               reduce using rule 62 (relation_expression -> right_hand_side_expression LE right_hand_side_expression .)
    NE              reduce using rule 62 (relation_expression -> right_hand_side_expression LE right_hand_side_expression .)
    EQ              reduce using rule 62 (relation_expression -> right_hand_side_expression LE right_hand_side_expression .)
    GE              reduce using rule 62 (relation_expression -> right_hand_side_expression LE right_hand_side_expression .)
    LE              reduce using rule 62 (relation_expression -> right_hand_side_expression LE right_hand_side_expression .)
    GT              reduce using rule 62 (relation_expression -> right_hand_side_expression LE right_hand_side_expression .)
    LT              reduce using rule 62 (relation_expression -> right_hand_side_expression LE right_hand_side_expression .)
    )               reduce using rule 62 (relation_expression -> right_hand_side_expression LE right_hand_side_expression .)
    DOTDIVIDE       shift and go to state 61
    DOTTIMES        shift and go to state 62
    DOTMINUS        shift and go to state 63
    DOTPLUS         shift and go to state 64
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68


state 122

    (63) relation_expression -> right_hand_side_expression GT right_hand_side_expression .
    (28) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (29) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    (59) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (61) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (62) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (63) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (64) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
    ;               reduce using rule 63 (relation_expression -> right_hand_side_expression GT right_hand_side_expression .)
    NE              reduce using rule 63 (relation_expression -> right_hand_side_expression GT right_hand_side_expression .)
    EQ              reduce using rule 63 (relation_expression -> right_hand_side_expression GT right_hand_side_expression .)
    GE              reduce using rule 63 (relation_expression -> right_hand_side_expression GT right_hand_side_expression .)
    LE              reduce using rule 63 (relation_expression -> right_hand_side_expression GT right_hand_side_expression .)
    GT              reduce using rule 63 (relation_expression -> right_hand_side_expression GT right_hand_side_expression .)
    LT              reduce using rule 63 (relation_expression -> right_hand_side_expression GT right_hand_side_expression .)
    )               reduce using rule 63 (relation_expression -> right_hand_side_expression GT right_hand_side_expression .)
    DOTDIVIDE       shift and go to state 61
    DOTTIMES        shift and go to state 62
    DOTMINUS        shift and go to state 63
    DOTPLUS         shift and go to state 64
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68


state 123

    (64) relation_expression -> right_hand_side_expression LT right_hand_side_expression .
    (28) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (29) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    (59) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (61) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (62) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (63) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (64) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
    ;               reduce using rule 64 (relation_expression -> right_hand_side_expression LT right_hand_side_expression .)
    NE              reduce using rule 64 (relation_expression -> right_hand_side_expression LT right_hand_side_expression .)
    EQ              reduce using rule 64 (relation_expression -> right_hand_side_expression LT right_hand_side_expression .)
    GE              reduce using rule 64 (relation_expression -> right_hand_side_expression LT right_hand_side_expression .)
    LE              reduce using rule 64 (relation_expression -> right_hand_side_expression LT right_hand_side_expression .)
    GT              reduce using rule 64 (relation_expression -> right_hand_side_expression LT right_hand_side_expression .)
    LT              reduce using rule 64 (relation_expression -> right_hand_side_expression LT right_hand_side_expression .)
    )               reduce using rule 64 (relation_expression -> right_hand_side_expression LT right_hand_side_expression .)
    DOTDIVIDE       shift and go to state 61
    DOTTIMES        shift and go to state 62
    DOTMINUS        shift and go to state 63
    DOTPLUS         shift and go to state 64
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68


state 124

    (40) right_hand_side_expression -> ( right_hand_side_expression ) .
    ;               reduce using rule 40 (right_hand_side_expression -> ( right_hand_side_expression ) .)
    DOTDIVIDE       reduce using rule 40 (right_hand_side_expression -> ( right_hand_side_expression ) .)
    DOTTIMES        reduce using rule 40 (right_hand_side_expression -> ( right_hand_side_expression ) .)
    DOTMINUS        reduce using rule 40 (right_hand_side_expression -> ( right_hand_side_expression ) .)
    DOTPLUS         reduce using rule 40 (right_hand_side_expression -> ( right_hand_side_expression ) .)
    /               reduce using rule 40 (right_hand_side_expression -> ( right_hand_side_expression ) .)
    *               reduce using rule 40 (right_hand_side_expression -> ( right_hand_side_expression ) .)
    -               reduce using rule 40 (right_hand_side_expression -> ( right_hand_side_expression ) .)
    +               reduce using rule 40 (right_hand_side_expression -> ( right_hand_side_expression ) .)
    NE              reduce using rule 40 (right_hand_side_expression -> ( right_hand_side_expression ) .)
    EQ              reduce using rule 40 (right_hand_side_expression -> ( right_hand_side_expression ) .)
    GE              reduce using rule 40 (right_hand_side_expression -> ( right_hand_side_expression ) .)
    LE              reduce using rule 40 (right_hand_side_expression -> ( right_hand_side_expression ) .)
    GT              reduce using rule 40 (right_hand_side_expression -> ( right_hand_side_expression ) .)
    LT              reduce using rule 40 (right_hand_side_expression -> ( right_hand_side_expression ) .)
    )               reduce using rule 40 (right_hand_side_expression -> ( right_hand_side_expression ) .)


state 125

    (73) matrix -> [ vectors ] .
    '               reduce using rule 73 (matrix -> [ vectors ] .)
    ;               reduce using rule 73 (matrix -> [ vectors ] .)
    DOTDIVIDE       reduce using rule 73 (matrix -> [ vectors ] .)
    DOTTIMES        reduce using rule 73 (matrix -> [ vectors ] .)
    DOTMINUS        reduce using rule 73 (matrix -> [ vectors ] .)
    DOTPLUS         reduce using rule 73 (matrix -> [ vectors ] .)
    /               reduce using rule 73 (matrix -> [ vectors ] .)
    *               reduce using rule 73 (matrix -> [ vectors ] .)
    -               reduce using rule 73 (matrix -> [ vectors ] .)
    +               reduce using rule 73 (matrix -> [ vectors ] .)
    NE              reduce using rule 73 (matrix -> [ vectors ] .)
    EQ              reduce using rule 73 (matrix -> [ vectors ] .)
    GE              reduce using rule 73 (matrix -> [ vectors ] .)
    LE              reduce using rule 73 (matrix -> [ vectors ] .)
    GT              reduce using rule 73 (matrix -> [ vectors ] .)
    LT              reduce using rule 73 (matrix -> [ vectors ] .)
    )               reduce using rule 73 (matrix -> [ vectors ] .)


state 126

    (75) vectors -> vectors , . vector
    (71) vector -> . [ ]
    (72) vector -> . [ variables ]
    [               shift and go to state 78

    vector                         shift and go to state 148

state 127

    (72) vector -> [ variables ] .
    ;               reduce using rule 72 (vector -> [ variables ] .)
    DOTDIVIDE       reduce using rule 72 (vector -> [ variables ] .)
    DOTTIMES        reduce using rule 72 (vector -> [ variables ] .)
    DOTMINUS        reduce using rule 72 (vector -> [ variables ] .)
    DOTPLUS         reduce using rule 72 (vector -> [ variables ] .)
    /               reduce using rule 72 (vector -> [ variables ] .)
    *               reduce using rule 72 (vector -> [ variables ] .)
    -               reduce using rule 72 (vector -> [ variables ] .)
    +               reduce using rule 72 (vector -> [ variables ] .)
    NE              reduce using rule 72 (vector -> [ variables ] .)
    EQ              reduce using rule 72 (vector -> [ variables ] .)
    GE              reduce using rule 72 (vector -> [ variables ] .)
    LE              reduce using rule 72 (vector -> [ variables ] .)
    GT              reduce using rule 72 (vector -> [ variables ] .)
    LT              reduce using rule 72 (vector -> [ variables ] .)
    )               reduce using rule 72 (vector -> [ variables ] .)
    ]               reduce using rule 72 (vector -> [ variables ] .)
    ,               reduce using rule 72 (vector -> [ variables ] .)


state 128

    (77) variables -> variables , . value
    (22) value -> . STRING
    (23) value -> . ID
    (24) value -> . FLOATNUM
    (25) value -> . INTNUM
    STRING          shift and go to state 33
    ID              shift and go to state 84
    FLOATNUM        shift and go to state 34
    INTNUM          shift and go to state 35

    value                          shift and go to state 149

state 129

    (65) matrix_functions -> EYE ( id_int . , id_int )
    (66) matrix_functions -> EYE ( id_int . )
    ,               shift and go to state 150
    )               shift and go to state 151


state 130

    (67) matrix_functions -> ONES ( id_int . , id_int )
    (68) matrix_functions -> ONES ( id_int . )
    ,               shift and go to state 152
    )               shift and go to state 153


state 131

    (69) matrix_functions -> ZEROS ( id_int . , id_int )
    (70) matrix_functions -> ZEROS ( id_int . )
    ,               shift and go to state 154
    )               shift and go to state 155


state 132

    (21) printables -> printables , value .
    ;               reduce using rule 21 (printables -> printables , value .)
    ,               reduce using rule 21 (printables -> printables , value .)


state 133

    (15) for_instruction -> FOR ID = id_int . : id_int instruction
    :               shift and go to state 156


state 134

    (46) assign_instruction -> ID DIVIDEASSIGN right_hand_side_expression ; .
    RETURN          reduce using rule 46 (assign_instruction -> ID DIVIDEASSIGN right_hand_side_expression ; .)
    CONTINUE        reduce using rule 46 (assign_instruction -> ID DIVIDEASSIGN right_hand_side_expression ; .)
    BREAK           reduce using rule 46 (assign_instruction -> ID DIVIDEASSIGN right_hand_side_expression ; .)
    {               reduce using rule 46 (assign_instruction -> ID DIVIDEASSIGN right_hand_side_expression ; .)
    PRINT           reduce using rule 46 (assign_instruction -> ID DIVIDEASSIGN right_hand_side_expression ; .)
    (               reduce using rule 46 (assign_instruction -> ID DIVIDEASSIGN right_hand_side_expression ; .)
    FOR             reduce using rule 46 (assign_instruction -> ID DIVIDEASSIGN right_hand_side_expression ; .)
    WHILE           reduce using rule 46 (assign_instruction -> ID DIVIDEASSIGN right_hand_side_expression ; .)
    IF              reduce using rule 46 (assign_instruction -> ID DIVIDEASSIGN right_hand_side_expression ; .)
    ID              reduce using rule 46 (assign_instruction -> ID DIVIDEASSIGN right_hand_side_expression ; .)
    $end            reduce using rule 46 (assign_instruction -> ID DIVIDEASSIGN right_hand_side_expression ; .)
    }               reduce using rule 46 (assign_instruction -> ID DIVIDEASSIGN right_hand_side_expression ; .)
    )               reduce using rule 46 (assign_instruction -> ID DIVIDEASSIGN right_hand_side_expression ; .)
    ELSE            reduce using rule 46 (assign_instruction -> ID DIVIDEASSIGN right_hand_side_expression ; .)


state 135

    (47) assign_instruction -> ID TIMESASSIGN right_hand_side_expression ; .
    RETURN          reduce using rule 47 (assign_instruction -> ID TIMESASSIGN right_hand_side_expression ; .)
    CONTINUE        reduce using rule 47 (assign_instruction -> ID TIMESASSIGN right_hand_side_expression ; .)
    BREAK           reduce using rule 47 (assign_instruction -> ID TIMESASSIGN right_hand_side_expression ; .)
    {               reduce using rule 47 (assign_instruction -> ID TIMESASSIGN right_hand_side_expression ; .)
    PRINT           reduce using rule 47 (assign_instruction -> ID TIMESASSIGN right_hand_side_expression ; .)
    (               reduce using rule 47 (assign_instruction -> ID TIMESASSIGN right_hand_side_expression ; .)
    FOR             reduce using rule 47 (assign_instruction -> ID TIMESASSIGN right_hand_side_expression ; .)
    WHILE           reduce using rule 47 (assign_instruction -> ID TIMESASSIGN right_hand_side_expression ; .)
    IF              reduce using rule 47 (assign_instruction -> ID TIMESASSIGN right_hand_side_expression ; .)
    ID              reduce using rule 47 (assign_instruction -> ID TIMESASSIGN right_hand_side_expression ; .)
    $end            reduce using rule 47 (assign_instruction -> ID TIMESASSIGN right_hand_side_expression ; .)
    }               reduce using rule 47 (assign_instruction -> ID TIMESASSIGN right_hand_side_expression ; .)
    )               reduce using rule 47 (assign_instruction -> ID TIMESASSIGN right_hand_side_expression ; .)
    ELSE            reduce using rule 47 (assign_instruction -> ID TIMESASSIGN right_hand_side_expression ; .)


state 136

    (48) assign_instruction -> ID MINUSASSIGN right_hand_side_expression ; .
    RETURN          reduce using rule 48 (assign_instruction -> ID MINUSASSIGN right_hand_side_expression ; .)
    CONTINUE        reduce using rule 48 (assign_instruction -> ID MINUSASSIGN right_hand_side_expression ; .)
    BREAK           reduce using rule 48 (assign_instruction -> ID MINUSASSIGN right_hand_side_expression ; .)
    {               reduce using rule 48 (assign_instruction -> ID MINUSASSIGN right_hand_side_expression ; .)
    PRINT           reduce using rule 48 (assign_instruction -> ID MINUSASSIGN right_hand_side_expression ; .)
    (               reduce using rule 48 (assign_instruction -> ID MINUSASSIGN right_hand_side_expression ; .)
    FOR             reduce using rule 48 (assign_instruction -> ID MINUSASSIGN right_hand_side_expression ; .)
    WHILE           reduce using rule 48 (assign_instruction -> ID MINUSASSIGN right_hand_side_expression ; .)
    IF              reduce using rule 48 (assign_instruction -> ID MINUSASSIGN right_hand_side_expression ; .)
    ID              reduce using rule 48 (assign_instruction -> ID MINUSASSIGN right_hand_side_expression ; .)
    $end            reduce using rule 48 (assign_instruction -> ID MINUSASSIGN right_hand_side_expression ; .)
    }               reduce using rule 48 (assign_instruction -> ID MINUSASSIGN right_hand_side_expression ; .)
    )               reduce using rule 48 (assign_instruction -> ID MINUSASSIGN right_hand_side_expression ; .)
    ELSE            reduce using rule 48 (assign_instruction -> ID MINUSASSIGN right_hand_side_expression ; .)


state 137

    (49) assign_instruction -> ID PLUSASSIGN right_hand_side_expression ; .
    RETURN          reduce using rule 49 (assign_instruction -> ID PLUSASSIGN right_hand_side_expression ; .)
    CONTINUE        reduce using rule 49 (assign_instruction -> ID PLUSASSIGN right_hand_side_expression ; .)
    BREAK           reduce using rule 49 (assign_instruction -> ID PLUSASSIGN right_hand_side_expression ; .)
    {               reduce using rule 49 (assign_instruction -> ID PLUSASSIGN right_hand_side_expression ; .)
    PRINT           reduce using rule 49 (assign_instruction -> ID PLUSASSIGN right_hand_side_expression ; .)
    (               reduce using rule 49 (assign_instruction -> ID PLUSASSIGN right_hand_side_expression ; .)
    FOR             reduce using rule 49 (assign_instruction -> ID PLUSASSIGN right_hand_side_expression ; .)
    WHILE           reduce using rule 49 (assign_instruction -> ID PLUSASSIGN right_hand_side_expression ; .)
    IF              reduce using rule 49 (assign_instruction -> ID PLUSASSIGN right_hand_side_expression ; .)
    ID              reduce using rule 49 (assign_instruction -> ID PLUSASSIGN right_hand_side_expression ; .)
    $end            reduce using rule 49 (assign_instruction -> ID PLUSASSIGN right_hand_side_expression ; .)
    }               reduce using rule 49 (assign_instruction -> ID PLUSASSIGN right_hand_side_expression ; .)
    )               reduce using rule 49 (assign_instruction -> ID PLUSASSIGN right_hand_side_expression ; .)
    ELSE            reduce using rule 49 (assign_instruction -> ID PLUSASSIGN right_hand_side_expression ; .)


state 138

    (50) assign_instruction -> ID = right_hand_side_expression ; .
    RETURN          reduce using rule 50 (assign_instruction -> ID = right_hand_side_expression ; .)
    CONTINUE        reduce using rule 50 (assign_instruction -> ID = right_hand_side_expression ; .)
    BREAK           reduce using rule 50 (assign_instruction -> ID = right_hand_side_expression ; .)
    {               reduce using rule 50 (assign_instruction -> ID = right_hand_side_expression ; .)
    PRINT           reduce using rule 50 (assign_instruction -> ID = right_hand_side_expression ; .)
    (               reduce using rule 50 (assign_instruction -> ID = right_hand_side_expression ; .)
    FOR             reduce using rule 50 (assign_instruction -> ID = right_hand_side_expression ; .)
    WHILE           reduce using rule 50 (assign_instruction -> ID = right_hand_side_expression ; .)
    IF              reduce using rule 50 (assign_instruction -> ID = right_hand_side_expression ; .)
    ID              reduce using rule 50 (assign_instruction -> ID = right_hand_side_expression ; .)
    $end            reduce using rule 50 (assign_instruction -> ID = right_hand_side_expression ; .)
    }               reduce using rule 50 (assign_instruction -> ID = right_hand_side_expression ; .)
    )               reduce using rule 50 (assign_instruction -> ID = right_hand_side_expression ; .)
    ELSE            reduce using rule 50 (assign_instruction -> ID = right_hand_side_expression ; .)


state 139

    (56) matrix_ref -> ID [ id_ints ] .
    DIVIDEASSIGN    reduce using rule 56 (matrix_ref -> ID [ id_ints ] .)
    TIMESASSIGN     reduce using rule 56 (matrix_ref -> ID [ id_ints ] .)
    MINUSASSIGN     reduce using rule 56 (matrix_ref -> ID [ id_ints ] .)
    PLUSASSIGN      reduce using rule 56 (matrix_ref -> ID [ id_ints ] .)
    =               reduce using rule 56 (matrix_ref -> ID [ id_ints ] .)
    ;               reduce using rule 56 (matrix_ref -> ID [ id_ints ] .)
    DOTDIVIDE       reduce using rule 56 (matrix_ref -> ID [ id_ints ] .)
    DOTTIMES        reduce using rule 56 (matrix_ref -> ID [ id_ints ] .)
    DOTMINUS        reduce using rule 56 (matrix_ref -> ID [ id_ints ] .)
    DOTPLUS         reduce using rule 56 (matrix_ref -> ID [ id_ints ] .)
    /               reduce using rule 56 (matrix_ref -> ID [ id_ints ] .)
    *               reduce using rule 56 (matrix_ref -> ID [ id_ints ] .)
    -               reduce using rule 56 (matrix_ref -> ID [ id_ints ] .)
    +               reduce using rule 56 (matrix_ref -> ID [ id_ints ] .)
    NE              reduce using rule 56 (matrix_ref -> ID [ id_ints ] .)
    EQ              reduce using rule 56 (matrix_ref -> ID [ id_ints ] .)
    GE              reduce using rule 56 (matrix_ref -> ID [ id_ints ] .)
    LE              reduce using rule 56 (matrix_ref -> ID [ id_ints ] .)
    GT              reduce using rule 56 (matrix_ref -> ID [ id_ints ] .)
    LT              reduce using rule 56 (matrix_ref -> ID [ id_ints ] .)
    ,               reduce using rule 56 (matrix_ref -> ID [ id_ints ] .)
    )               reduce using rule 56 (matrix_ref -> ID [ id_ints ] .)


state 140

    (58) id_ints -> id_ints , . id_int
    (16) id_int -> . ID
    (17) id_int -> . INTNUM
    ID              shift and go to state 98
    INTNUM          shift and go to state 101

    id_int                         shift and go to state 157

state 141

    (14) while_instruction -> WHILE ( relation_expression ) . instruction
    (3) instruction -> . RETURN right_hand_side_expression ;
    (4) instruction -> . CONTINUE ;
    (5) instruction -> . BREAK ;
    (6) instruction -> . { instructions }
    (7) instruction -> . print_instruction
    (8) instruction -> . full_line_instruction
    (9) instruction -> . for_instruction
    (10) instruction -> . while_instruction
    (11) instruction -> . if_instruction
    (18) print_instruction -> . PRINT printables ;
    (44) full_line_instruction -> . ( full_line_instruction )
    (45) full_line_instruction -> . assign_instruction
    (15) for_instruction -> . FOR ID = id_int : id_int instruction
    (14) while_instruction -> . WHILE ( relation_expression ) instruction
    (12) if_instruction -> . IF ( relation_expression ) instruction
    (13) if_instruction -> . IF ( relation_expression ) instruction ELSE instruction
    (46) assign_instruction -> . ID DIVIDEASSIGN right_hand_side_expression ;
    (47) assign_instruction -> . ID TIMESASSIGN right_hand_side_expression ;
    (48) assign_instruction -> . ID MINUSASSIGN right_hand_side_expression ;
    (49) assign_instruction -> . ID PLUSASSIGN right_hand_side_expression ;
    (50) assign_instruction -> . ID = right_hand_side_expression ;
    (51) assign_instruction -> . matrix_ref DIVIDEASSIGN right_hand_side_expression ;
    (52) assign_instruction -> . matrix_ref TIMESASSIGN right_hand_side_expression ;
    (53) assign_instruction -> . matrix_ref MINUSASSIGN right_hand_side_expression ;
    (54) assign_instruction -> . matrix_ref PLUSASSIGN right_hand_side_expression ;
    (55) assign_instruction -> . matrix_ref = right_hand_side_expression ;
    (56) matrix_ref -> . ID [ id_ints ]
    RETURN          shift and go to state 3
    CONTINUE        shift and go to state 4
    BREAK           shift and go to state 5
    {               shift and go to state 6
    PRINT           shift and go to state 12
    (               shift and go to state 13
    FOR             shift and go to state 15
    WHILE           shift and go to state 17
    IF              shift and go to state 18
    ID              shift and go to state 16

    instruction                    shift and go to state 158
    print_instruction              shift and go to state 7
    full_line_instruction          shift and go to state 8
    for_instruction                shift and go to state 9
    while_instruction              shift and go to state 10
    if_instruction                 shift and go to state 11
    assign_instruction             shift and go to state 14
    matrix_ref                     shift and go to state 19

state 142

    (12) if_instruction -> IF ( relation_expression ) . instruction
    (13) if_instruction -> IF ( relation_expression ) . instruction ELSE instruction
    (3) instruction -> . RETURN right_hand_side_expression ;
    (4) instruction -> . CONTINUE ;
    (5) instruction -> . BREAK ;
    (6) instruction -> . { instructions }
    (7) instruction -> . print_instruction
    (8) instruction -> . full_line_instruction
    (9) instruction -> . for_instruction
    (10) instruction -> . while_instruction
    (11) instruction -> . if_instruction
    (18) print_instruction -> . PRINT printables ;
    (44) full_line_instruction -> . ( full_line_instruction )
    (45) full_line_instruction -> . assign_instruction
    (15) for_instruction -> . FOR ID = id_int : id_int instruction
    (14) while_instruction -> . WHILE ( relation_expression ) instruction
    (12) if_instruction -> . IF ( relation_expression ) instruction
    (13) if_instruction -> . IF ( relation_expression ) instruction ELSE instruction
    (46) assign_instruction -> . ID DIVIDEASSIGN right_hand_side_expression ;
    (47) assign_instruction -> . ID TIMESASSIGN right_hand_side_expression ;
    (48) assign_instruction -> . ID MINUSASSIGN right_hand_side_expression ;
    (49) assign_instruction -> . ID PLUSASSIGN right_hand_side_expression ;
    (50) assign_instruction -> . ID = right_hand_side_expression ;
    (51) assign_instruction -> . matrix_ref DIVIDEASSIGN right_hand_side_expression ;
    (52) assign_instruction -> . matrix_ref TIMESASSIGN right_hand_side_expression ;
    (53) assign_instruction -> . matrix_ref MINUSASSIGN right_hand_side_expression ;
    (54) assign_instruction -> . matrix_ref PLUSASSIGN right_hand_side_expression ;
    (55) assign_instruction -> . matrix_ref = right_hand_side_expression ;
    (56) matrix_ref -> . ID [ id_ints ]
    RETURN          shift and go to state 3
    CONTINUE        shift and go to state 4
    BREAK           shift and go to state 5
    {               shift and go to state 6
    PRINT           shift and go to state 12
    (               shift and go to state 13
    FOR             shift and go to state 15
    WHILE           shift and go to state 17
    IF              shift and go to state 18
    ID              shift and go to state 16

    instruction                    shift and go to state 159
    print_instruction              shift and go to state 7
    full_line_instruction          shift and go to state 8
    for_instruction                shift and go to state 9
    while_instruction              shift and go to state 10
    if_instruction                 shift and go to state 11
    assign_instruction             shift and go to state 14
    matrix_ref                     shift and go to state 19

state 143

    (51) assign_instruction -> matrix_ref DIVIDEASSIGN right_hand_side_expression ; .
    RETURN          reduce using rule 51 (assign_instruction -> matrix_ref DIVIDEASSIGN right_hand_side_expression ; .)
    CONTINUE        reduce using rule 51 (assign_instruction -> matrix_ref DIVIDEASSIGN right_hand_side_expression ; .)
    BREAK           reduce using rule 51 (assign_instruction -> matrix_ref DIVIDEASSIGN right_hand_side_expression ; .)
    {               reduce using rule 51 (assign_instruction -> matrix_ref DIVIDEASSIGN right_hand_side_expression ; .)
    PRINT           reduce using rule 51 (assign_instruction -> matrix_ref DIVIDEASSIGN right_hand_side_expression ; .)
    (               reduce using rule 51 (assign_instruction -> matrix_ref DIVIDEASSIGN right_hand_side_expression ; .)
    FOR             reduce using rule 51 (assign_instruction -> matrix_ref DIVIDEASSIGN right_hand_side_expression ; .)
    WHILE           reduce using rule 51 (assign_instruction -> matrix_ref DIVIDEASSIGN right_hand_side_expression ; .)
    IF              reduce using rule 51 (assign_instruction -> matrix_ref DIVIDEASSIGN right_hand_side_expression ; .)
    ID              reduce using rule 51 (assign_instruction -> matrix_ref DIVIDEASSIGN right_hand_side_expression ; .)
    $end            reduce using rule 51 (assign_instruction -> matrix_ref DIVIDEASSIGN right_hand_side_expression ; .)
    }               reduce using rule 51 (assign_instruction -> matrix_ref DIVIDEASSIGN right_hand_side_expression ; .)
    )               reduce using rule 51 (assign_instruction -> matrix_ref DIVIDEASSIGN right_hand_side_expression ; .)
    ELSE            reduce using rule 51 (assign_instruction -> matrix_ref DIVIDEASSIGN right_hand_side_expression ; .)


state 144

    (52) assign_instruction -> matrix_ref TIMESASSIGN right_hand_side_expression ; .
    RETURN          reduce using rule 52 (assign_instruction -> matrix_ref TIMESASSIGN right_hand_side_expression ; .)
    CONTINUE        reduce using rule 52 (assign_instruction -> matrix_ref TIMESASSIGN right_hand_side_expression ; .)
    BREAK           reduce using rule 52 (assign_instruction -> matrix_ref TIMESASSIGN right_hand_side_expression ; .)
    {               reduce using rule 52 (assign_instruction -> matrix_ref TIMESASSIGN right_hand_side_expression ; .)
    PRINT           reduce using rule 52 (assign_instruction -> matrix_ref TIMESASSIGN right_hand_side_expression ; .)
    (               reduce using rule 52 (assign_instruction -> matrix_ref TIMESASSIGN right_hand_side_expression ; .)
    FOR             reduce using rule 52 (assign_instruction -> matrix_ref TIMESASSIGN right_hand_side_expression ; .)
    WHILE           reduce using rule 52 (assign_instruction -> matrix_ref TIMESASSIGN right_hand_side_expression ; .)
    IF              reduce using rule 52 (assign_instruction -> matrix_ref TIMESASSIGN right_hand_side_expression ; .)
    ID              reduce using rule 52 (assign_instruction -> matrix_ref TIMESASSIGN right_hand_side_expression ; .)
    $end            reduce using rule 52 (assign_instruction -> matrix_ref TIMESASSIGN right_hand_side_expression ; .)
    }               reduce using rule 52 (assign_instruction -> matrix_ref TIMESASSIGN right_hand_side_expression ; .)
    )               reduce using rule 52 (assign_instruction -> matrix_ref TIMESASSIGN right_hand_side_expression ; .)
    ELSE            reduce using rule 52 (assign_instruction -> matrix_ref TIMESASSIGN right_hand_side_expression ; .)


state 145

    (53) assign_instruction -> matrix_ref MINUSASSIGN right_hand_side_expression ; .
    RETURN          reduce using rule 53 (assign_instruction -> matrix_ref MINUSASSIGN right_hand_side_expression ; .)
    CONTINUE        reduce using rule 53 (assign_instruction -> matrix_ref MINUSASSIGN right_hand_side_expression ; .)
    BREAK           reduce using rule 53 (assign_instruction -> matrix_ref MINUSASSIGN right_hand_side_expression ; .)
    {               reduce using rule 53 (assign_instruction -> matrix_ref MINUSASSIGN right_hand_side_expression ; .)
    PRINT           reduce using rule 53 (assign_instruction -> matrix_ref MINUSASSIGN right_hand_side_expression ; .)
    (               reduce using rule 53 (assign_instruction -> matrix_ref MINUSASSIGN right_hand_side_expression ; .)
    FOR             reduce using rule 53 (assign_instruction -> matrix_ref MINUSASSIGN right_hand_side_expression ; .)
    WHILE           reduce using rule 53 (assign_instruction -> matrix_ref MINUSASSIGN right_hand_side_expression ; .)
    IF              reduce using rule 53 (assign_instruction -> matrix_ref MINUSASSIGN right_hand_side_expression ; .)
    ID              reduce using rule 53 (assign_instruction -> matrix_ref MINUSASSIGN right_hand_side_expression ; .)
    $end            reduce using rule 53 (assign_instruction -> matrix_ref MINUSASSIGN right_hand_side_expression ; .)
    }               reduce using rule 53 (assign_instruction -> matrix_ref MINUSASSIGN right_hand_side_expression ; .)
    )               reduce using rule 53 (assign_instruction -> matrix_ref MINUSASSIGN right_hand_side_expression ; .)
    ELSE            reduce using rule 53 (assign_instruction -> matrix_ref MINUSASSIGN right_hand_side_expression ; .)


state 146

    (54) assign_instruction -> matrix_ref PLUSASSIGN right_hand_side_expression ; .
    RETURN          reduce using rule 54 (assign_instruction -> matrix_ref PLUSASSIGN right_hand_side_expression ; .)
    CONTINUE        reduce using rule 54 (assign_instruction -> matrix_ref PLUSASSIGN right_hand_side_expression ; .)
    BREAK           reduce using rule 54 (assign_instruction -> matrix_ref PLUSASSIGN right_hand_side_expression ; .)
    {               reduce using rule 54 (assign_instruction -> matrix_ref PLUSASSIGN right_hand_side_expression ; .)
    PRINT           reduce using rule 54 (assign_instruction -> matrix_ref PLUSASSIGN right_hand_side_expression ; .)
    (               reduce using rule 54 (assign_instruction -> matrix_ref PLUSASSIGN right_hand_side_expression ; .)
    FOR             reduce using rule 54 (assign_instruction -> matrix_ref PLUSASSIGN right_hand_side_expression ; .)
    WHILE           reduce using rule 54 (assign_instruction -> matrix_ref PLUSASSIGN right_hand_side_expression ; .)
    IF              reduce using rule 54 (assign_instruction -> matrix_ref PLUSASSIGN right_hand_side_expression ; .)
    ID              reduce using rule 54 (assign_instruction -> matrix_ref PLUSASSIGN right_hand_side_expression ; .)
    $end            reduce using rule 54 (assign_instruction -> matrix_ref PLUSASSIGN right_hand_side_expression ; .)
    }               reduce using rule 54 (assign_instruction -> matrix_ref PLUSASSIGN right_hand_side_expression ; .)
    )               reduce using rule 54 (assign_instruction -> matrix_ref PLUSASSIGN right_hand_side_expression ; .)
    ELSE            reduce using rule 54 (assign_instruction -> matrix_ref PLUSASSIGN right_hand_side_expression ; .)


state 147

    (55) assign_instruction -> matrix_ref = right_hand_side_expression ; .
    RETURN          reduce using rule 55 (assign_instruction -> matrix_ref = right_hand_side_expression ; .)
    CONTINUE        reduce using rule 55 (assign_instruction -> matrix_ref = right_hand_side_expression ; .)
    BREAK           reduce using rule 55 (assign_instruction -> matrix_ref = right_hand_side_expression ; .)
    {               reduce using rule 55 (assign_instruction -> matrix_ref = right_hand_side_expression ; .)
    PRINT           reduce using rule 55 (assign_instruction -> matrix_ref = right_hand_side_expression ; .)
    (               reduce using rule 55 (assign_instruction -> matrix_ref = right_hand_side_expression ; .)
    FOR             reduce using rule 55 (assign_instruction -> matrix_ref = right_hand_side_expression ; .)
    WHILE           reduce using rule 55 (assign_instruction -> matrix_ref = right_hand_side_expression ; .)
    IF              reduce using rule 55 (assign_instruction -> matrix_ref = right_hand_side_expression ; .)
    ID              reduce using rule 55 (assign_instruction -> matrix_ref = right_hand_side_expression ; .)
    $end            reduce using rule 55 (assign_instruction -> matrix_ref = right_hand_side_expression ; .)
    }               reduce using rule 55 (assign_instruction -> matrix_ref = right_hand_side_expression ; .)
    )               reduce using rule 55 (assign_instruction -> matrix_ref = right_hand_side_expression ; .)
    ELSE            reduce using rule 55 (assign_instruction -> matrix_ref = right_hand_side_expression ; .)


state 148

    (75) vectors -> vectors , vector .
    ]               reduce using rule 75 (vectors -> vectors , vector .)
    ,               reduce using rule 75 (vectors -> vectors , vector .)


state 149

    (77) variables -> variables , value .
    ]               reduce using rule 77 (variables -> variables , value .)
    ,               reduce using rule 77 (variables -> variables , value .)


state 150

    (65) matrix_functions -> EYE ( id_int , . id_int )
    (16) id_int -> . ID
    (17) id_int -> . INTNUM
    ID              shift and go to state 98
    INTNUM          shift and go to state 101

    id_int                         shift and go to state 160

state 151

    (66) matrix_functions -> EYE ( id_int ) .
    ;               reduce using rule 66 (matrix_functions -> EYE ( id_int ) .)
    DOTDIVIDE       reduce using rule 66 (matrix_functions -> EYE ( id_int ) .)
    DOTTIMES        reduce using rule 66 (matrix_functions -> EYE ( id_int ) .)
    DOTMINUS        reduce using rule 66 (matrix_functions -> EYE ( id_int ) .)
    DOTPLUS         reduce using rule 66 (matrix_functions -> EYE ( id_int ) .)
    /               reduce using rule 66 (matrix_functions -> EYE ( id_int ) .)
    *               reduce using rule 66 (matrix_functions -> EYE ( id_int ) .)
    -               reduce using rule 66 (matrix_functions -> EYE ( id_int ) .)
    +               reduce using rule 66 (matrix_functions -> EYE ( id_int ) .)
    NE              reduce using rule 66 (matrix_functions -> EYE ( id_int ) .)
    EQ              reduce using rule 66 (matrix_functions -> EYE ( id_int ) .)
    GE              reduce using rule 66 (matrix_functions -> EYE ( id_int ) .)
    LE              reduce using rule 66 (matrix_functions -> EYE ( id_int ) .)
    GT              reduce using rule 66 (matrix_functions -> EYE ( id_int ) .)
    LT              reduce using rule 66 (matrix_functions -> EYE ( id_int ) .)
    )               reduce using rule 66 (matrix_functions -> EYE ( id_int ) .)


state 152

    (67) matrix_functions -> ONES ( id_int , . id_int )
    (16) id_int -> . ID
    (17) id_int -> . INTNUM
    ID              shift and go to state 98
    INTNUM          shift and go to state 101

    id_int                         shift and go to state 161

state 153

    (68) matrix_functions -> ONES ( id_int ) .
    ;               reduce using rule 68 (matrix_functions -> ONES ( id_int ) .)
    DOTDIVIDE       reduce using rule 68 (matrix_functions -> ONES ( id_int ) .)
    DOTTIMES        reduce using rule 68 (matrix_functions -> ONES ( id_int ) .)
    DOTMINUS        reduce using rule 68 (matrix_functions -> ONES ( id_int ) .)
    DOTPLUS         reduce using rule 68 (matrix_functions -> ONES ( id_int ) .)
    /               reduce using rule 68 (matrix_functions -> ONES ( id_int ) .)
    *               reduce using rule 68 (matrix_functions -> ONES ( id_int ) .)
    -               reduce using rule 68 (matrix_functions -> ONES ( id_int ) .)
    +               reduce using rule 68 (matrix_functions -> ONES ( id_int ) .)
    NE              reduce using rule 68 (matrix_functions -> ONES ( id_int ) .)
    EQ              reduce using rule 68 (matrix_functions -> ONES ( id_int ) .)
    GE              reduce using rule 68 (matrix_functions -> ONES ( id_int ) .)
    LE              reduce using rule 68 (matrix_functions -> ONES ( id_int ) .)
    GT              reduce using rule 68 (matrix_functions -> ONES ( id_int ) .)
    LT              reduce using rule 68 (matrix_functions -> ONES ( id_int ) .)
    )               reduce using rule 68 (matrix_functions -> ONES ( id_int ) .)


state 154

    (69) matrix_functions -> ZEROS ( id_int , . id_int )
    (16) id_int -> . ID
    (17) id_int -> . INTNUM
    ID              shift and go to state 98
    INTNUM          shift and go to state 101

    id_int                         shift and go to state 162

state 155

    (70) matrix_functions -> ZEROS ( id_int ) .
    ;               reduce using rule 70 (matrix_functions -> ZEROS ( id_int ) .)
    DOTDIVIDE       reduce using rule 70 (matrix_functions -> ZEROS ( id_int ) .)
    DOTTIMES        reduce using rule 70 (matrix_functions -> ZEROS ( id_int ) .)
    DOTMINUS        reduce using rule 70 (matrix_functions -> ZEROS ( id_int ) .)
    DOTPLUS         reduce using rule 70 (matrix_functions -> ZEROS ( id_int ) .)
    /               reduce using rule 70 (matrix_functions -> ZEROS ( id_int ) .)
    *               reduce using rule 70 (matrix_functions -> ZEROS ( id_int ) .)
    -               reduce using rule 70 (matrix_functions -> ZEROS ( id_int ) .)
    +               reduce using rule 70 (matrix_functions -> ZEROS ( id_int ) .)
    NE              reduce using rule 70 (matrix_functions -> ZEROS ( id_int ) .)
    EQ              reduce using rule 70 (matrix_functions -> ZEROS ( id_int ) .)
    GE              reduce using rule 70 (matrix_functions -> ZEROS ( id_int ) .)
    LE              reduce using rule 70 (matrix_functions -> ZEROS ( id_int ) .)
    GT              reduce using rule 70 (matrix_functions -> ZEROS ( id_int ) .)
    LT              reduce using rule 70 (matrix_functions -> ZEROS ( id_int ) .)
    )               reduce using rule 70 (matrix_functions -> ZEROS ( id_int ) .)


state 156

    (15) for_instruction -> FOR ID = id_int : . id_int instruction
    (16) id_int -> . ID
    (17) id_int -> . INTNUM
    ID              shift and go to state 98
    INTNUM          shift and go to state 101

    id_int                         shift and go to state 163

state 157

    (58) id_ints -> id_ints , id_int .
    ]               reduce using rule 58 (id_ints -> id_ints , id_int .)
    ,               reduce using rule 58 (id_ints -> id_ints , id_int .)


state 158

    (14) while_instruction -> WHILE ( relation_expression ) instruction .
    RETURN          reduce using rule 14 (while_instruction -> WHILE ( relation_expression ) instruction .)
    CONTINUE        reduce using rule 14 (while_instruction -> WHILE ( relation_expression ) instruction .)
    BREAK           reduce using rule 14 (while_instruction -> WHILE ( relation_expression ) instruction .)
    {               reduce using rule 14 (while_instruction -> WHILE ( relation_expression ) instruction .)
    PRINT           reduce using rule 14 (while_instruction -> WHILE ( relation_expression ) instruction .)
    (               reduce using rule 14 (while_instruction -> WHILE ( relation_expression ) instruction .)
    FOR             reduce using rule 14 (while_instruction -> WHILE ( relation_expression ) instruction .)
    WHILE           reduce using rule 14 (while_instruction -> WHILE ( relation_expression ) instruction .)
    IF              reduce using rule 14 (while_instruction -> WHILE ( relation_expression ) instruction .)
    ID              reduce using rule 14 (while_instruction -> WHILE ( relation_expression ) instruction .)
    $end            reduce using rule 14 (while_instruction -> WHILE ( relation_expression ) instruction .)
    }               reduce using rule 14 (while_instruction -> WHILE ( relation_expression ) instruction .)
    ELSE            reduce using rule 14 (while_instruction -> WHILE ( relation_expression ) instruction .)


state 159

    (12) if_instruction -> IF ( relation_expression ) instruction .
    (13) if_instruction -> IF ( relation_expression ) instruction . ELSE instruction
    RETURN          reduce using rule 12 (if_instruction -> IF ( relation_expression ) instruction .)
    CONTINUE        reduce using rule 12 (if_instruction -> IF ( relation_expression ) instruction .)
    BREAK           reduce using rule 12 (if_instruction -> IF ( relation_expression ) instruction .)
    {               reduce using rule 12 (if_instruction -> IF ( relation_expression ) instruction .)
    PRINT           reduce using rule 12 (if_instruction -> IF ( relation_expression ) instruction .)
    (               reduce using rule 12 (if_instruction -> IF ( relation_expression ) instruction .)
    FOR             reduce using rule 12 (if_instruction -> IF ( relation_expression ) instruction .)
    WHILE           reduce using rule 12 (if_instruction -> IF ( relation_expression ) instruction .)
    IF              reduce using rule 12 (if_instruction -> IF ( relation_expression ) instruction .)
    ID              reduce using rule 12 (if_instruction -> IF ( relation_expression ) instruction .)
    $end            reduce using rule 12 (if_instruction -> IF ( relation_expression ) instruction .)
    }               reduce using rule 12 (if_instruction -> IF ( relation_expression ) instruction .)
    ELSE            shift and go to state 164


state 160

    (65) matrix_functions -> EYE ( id_int , id_int . )
    )               shift and go to state 165


state 161

    (67) matrix_functions -> ONES ( id_int , id_int . )
    )               shift and go to state 166


state 162

    (69) matrix_functions -> ZEROS ( id_int , id_int . )
    )               shift and go to state 167


state 163

    (15) for_instruction -> FOR ID = id_int : id_int . instruction
    (3) instruction -> . RETURN right_hand_side_expression ;
    (4) instruction -> . CONTINUE ;
    (5) instruction -> . BREAK ;
    (6) instruction -> . { instructions }
    (7) instruction -> . print_instruction
    (8) instruction -> . full_line_instruction
    (9) instruction -> . for_instruction
    (10) instruction -> . while_instruction
    (11) instruction -> . if_instruction
    (18) print_instruction -> . PRINT printables ;
    (44) full_line_instruction -> . ( full_line_instruction )
    (45) full_line_instruction -> . assign_instruction
    (15) for_instruction -> . FOR ID = id_int : id_int instruction
    (14) while_instruction -> . WHILE ( relation_expression ) instruction
    (12) if_instruction -> . IF ( relation_expression ) instruction
    (13) if_instruction -> . IF ( relation_expression ) instruction ELSE instruction
    (46) assign_instruction -> . ID DIVIDEASSIGN right_hand_side_expression ;
    (47) assign_instruction -> . ID TIMESASSIGN right_hand_side_expression ;
    (48) assign_instruction -> . ID MINUSASSIGN right_hand_side_expression ;
    (49) assign_instruction -> . ID PLUSASSIGN right_hand_side_expression ;
    (50) assign_instruction -> . ID = right_hand_side_expression ;
    (51) assign_instruction -> . matrix_ref DIVIDEASSIGN right_hand_side_expression ;
    (52) assign_instruction -> . matrix_ref TIMESASSIGN right_hand_side_expression ;
    (53) assign_instruction -> . matrix_ref MINUSASSIGN right_hand_side_expression ;
    (54) assign_instruction -> . matrix_ref PLUSASSIGN right_hand_side_expression ;
    (55) assign_instruction -> . matrix_ref = right_hand_side_expression ;
    (56) matrix_ref -> . ID [ id_ints ]
    RETURN          shift and go to state 3
    CONTINUE        shift and go to state 4
    BREAK           shift and go to state 5
    {               shift and go to state 6
    PRINT           shift and go to state 12
    (               shift and go to state 13
    FOR             shift and go to state 15
    WHILE           shift and go to state 17
    IF              shift and go to state 18
    ID              shift and go to state 16

    instruction                    shift and go to state 168
    print_instruction              shift and go to state 7
    full_line_instruction          shift and go to state 8
    for_instruction                shift and go to state 9
    while_instruction              shift and go to state 10
    if_instruction                 shift and go to state 11
    assign_instruction             shift and go to state 14
    matrix_ref                     shift and go to state 19

state 164

    (13) if_instruction -> IF ( relation_expression ) instruction ELSE . instruction
    (3) instruction -> . RETURN right_hand_side_expression ;
    (4) instruction -> . CONTINUE ;
    (5) instruction -> . BREAK ;
    (6) instruction -> . { instructions }
    (7) instruction -> . print_instruction
    (8) instruction -> . full_line_instruction
    (9) instruction -> . for_instruction
    (10) instruction -> . while_instruction
    (11) instruction -> . if_instruction
    (18) print_instruction -> . PRINT printables ;
    (44) full_line_instruction -> . ( full_line_instruction )
    (45) full_line_instruction -> . assign_instruction
    (15) for_instruction -> . FOR ID = id_int : id_int instruction
    (14) while_instruction -> . WHILE ( relation_expression ) instruction
    (12) if_instruction -> . IF ( relation_expression ) instruction
    (13) if_instruction -> . IF ( relation_expression ) instruction ELSE instruction
    (46) assign_instruction -> . ID DIVIDEASSIGN right_hand_side_expression ;
    (47) assign_instruction -> . ID TIMESASSIGN right_hand_side_expression ;
    (48) assign_instruction -> . ID MINUSASSIGN right_hand_side_expression ;
    (49) assign_instruction -> . ID PLUSASSIGN right_hand_side_expression ;
    (50) assign_instruction -> . ID = right_hand_side_expression ;
    (51) assign_instruction -> . matrix_ref DIVIDEASSIGN right_hand_side_expression ;
    (52) assign_instruction -> . matrix_ref TIMESASSIGN right_hand_side_expression ;
    (53) assign_instruction -> . matrix_ref MINUSASSIGN right_hand_side_expression ;
    (54) assign_instruction -> . matrix_ref PLUSASSIGN right_hand_side_expression ;
    (55) assign_instruction -> . matrix_ref = right_hand_side_expression ;
    (56) matrix_ref -> . ID [ id_ints ]
    RETURN          shift and go to state 3
    CONTINUE        shift and go to state 4
    BREAK           shift and go to state 5
    {               shift and go to state 6
    PRINT           shift and go to state 12
    (               shift and go to state 13
    FOR             shift and go to state 15
    WHILE           shift and go to state 17
    IF              shift and go to state 18
    ID              shift and go to state 16

    instruction                    shift and go to state 169
    print_instruction              shift and go to state 7
    full_line_instruction          shift and go to state 8
    for_instruction                shift and go to state 9
    while_instruction              shift and go to state 10
    if_instruction                 shift and go to state 11
    assign_instruction             shift and go to state 14
    matrix_ref                     shift and go to state 19

state 165

    (65) matrix_functions -> EYE ( id_int , id_int ) .
    ;               reduce using rule 65 (matrix_functions -> EYE ( id_int , id_int ) .)
    DOTDIVIDE       reduce using rule 65 (matrix_functions -> EYE ( id_int , id_int ) .)
    DOTTIMES        reduce using rule 65 (matrix_functions -> EYE ( id_int , id_int ) .)
    DOTMINUS        reduce using rule 65 (matrix_functions -> EYE ( id_int , id_int ) .)
    DOTPLUS         reduce using rule 65 (matrix_functions -> EYE ( id_int , id_int ) .)
    /               reduce using rule 65 (matrix_functions -> EYE ( id_int , id_int ) .)
    *               reduce using rule 65 (matrix_functions -> EYE ( id_int , id_int ) .)
    -               reduce using rule 65 (matrix_functions -> EYE ( id_int , id_int ) .)
    +               reduce using rule 65 (matrix_functions -> EYE ( id_int , id_int ) .)
    NE              reduce using rule 65 (matrix_functions -> EYE ( id_int , id_int ) .)
    EQ              reduce using rule 65 (matrix_functions -> EYE ( id_int , id_int ) .)
    GE              reduce using rule 65 (matrix_functions -> EYE ( id_int , id_int ) .)
    LE              reduce using rule 65 (matrix_functions -> EYE ( id_int , id_int ) .)
    GT              reduce using rule 65 (matrix_functions -> EYE ( id_int , id_int ) .)
    LT              reduce using rule 65 (matrix_functions -> EYE ( id_int , id_int ) .)
    )               reduce using rule 65 (matrix_functions -> EYE ( id_int , id_int ) .)


state 166

    (67) matrix_functions -> ONES ( id_int , id_int ) .
    ;               reduce using rule 67 (matrix_functions -> ONES ( id_int , id_int ) .)
    DOTDIVIDE       reduce using rule 67 (matrix_functions -> ONES ( id_int , id_int ) .)
    DOTTIMES        reduce using rule 67 (matrix_functions -> ONES ( id_int , id_int ) .)
    DOTMINUS        reduce using rule 67 (matrix_functions -> ONES ( id_int , id_int ) .)
    DOTPLUS         reduce using rule 67 (matrix_functions -> ONES ( id_int , id_int ) .)
    /               reduce using rule 67 (matrix_functions -> ONES ( id_int , id_int ) .)
    *               reduce using rule 67 (matrix_functions -> ONES ( id_int , id_int ) .)
    -               reduce using rule 67 (matrix_functions -> ONES ( id_int , id_int ) .)
    +               reduce using rule 67 (matrix_functions -> ONES ( id_int , id_int ) .)
    NE              reduce using rule 67 (matrix_functions -> ONES ( id_int , id_int ) .)
    EQ              reduce using rule 67 (matrix_functions -> ONES ( id_int , id_int ) .)
    GE              reduce using rule 67 (matrix_functions -> ONES ( id_int , id_int ) .)
    LE              reduce using rule 67 (matrix_functions -> ONES ( id_int , id_int ) .)
    GT              reduce using rule 67 (matrix_functions -> ONES ( id_int , id_int ) .)
    LT              reduce using rule 67 (matrix_functions -> ONES ( id_int , id_int ) .)
    )               reduce using rule 67 (matrix_functions -> ONES ( id_int , id_int ) .)


state 167

    (69) matrix_functions -> ZEROS ( id_int , id_int ) .
    ;               reduce using rule 69 (matrix_functions -> ZEROS ( id_int , id_int ) .)
    DOTDIVIDE       reduce using rule 69 (matrix_functions -> ZEROS ( id_int , id_int ) .)
    DOTTIMES        reduce using rule 69 (matrix_functions -> ZEROS ( id_int , id_int ) .)
    DOTMINUS        reduce using rule 69 (matrix_functions -> ZEROS ( id_int , id_int ) .)
    DOTPLUS         reduce using rule 69 (matrix_functions -> ZEROS ( id_int , id_int ) .)
    /               reduce using rule 69 (matrix_functions -> ZEROS ( id_int , id_int ) .)
    *               reduce using rule 69 (matrix_functions -> ZEROS ( id_int , id_int ) .)
    -               reduce using rule 69 (matrix_functions -> ZEROS ( id_int , id_int ) .)
    +               reduce using rule 69 (matrix_functions -> ZEROS ( id_int , id_int ) .)
    NE              reduce using rule 69 (matrix_functions -> ZEROS ( id_int , id_int ) .)
    EQ              reduce using rule 69 (matrix_functions -> ZEROS ( id_int , id_int ) .)
    GE              reduce using rule 69 (matrix_functions -> ZEROS ( id_int , id_int ) .)
    LE              reduce using rule 69 (matrix_functions -> ZEROS ( id_int , id_int ) .)
    GT              reduce using rule 69 (matrix_functions -> ZEROS ( id_int , id_int ) .)
    LT              reduce using rule 69 (matrix_functions -> ZEROS ( id_int , id_int ) .)
    )               reduce using rule 69 (matrix_functions -> ZEROS ( id_int , id_int ) .)


state 168

    (15) for_instruction -> FOR ID = id_int : id_int instruction .
    RETURN          reduce using rule 15 (for_instruction -> FOR ID = id_int : id_int instruction .)
    CONTINUE        reduce using rule 15 (for_instruction -> FOR ID = id_int : id_int instruction .)
    BREAK           reduce using rule 15 (for_instruction -> FOR ID = id_int : id_int instruction .)
    {               reduce using rule 15 (for_instruction -> FOR ID = id_int : id_int instruction .)
    PRINT           reduce using rule 15 (for_instruction -> FOR ID = id_int : id_int instruction .)
    (               reduce using rule 15 (for_instruction -> FOR ID = id_int : id_int instruction .)
    FOR             reduce using rule 15 (for_instruction -> FOR ID = id_int : id_int instruction .)
    WHILE           reduce using rule 15 (for_instruction -> FOR ID = id_int : id_int instruction .)
    IF              reduce using rule 15 (for_instruction -> FOR ID = id_int : id_int instruction .)
    ID              reduce using rule 15 (for_instruction -> FOR ID = id_int : id_int instruction .)
    $end            reduce using rule 15 (for_instruction -> FOR ID = id_int : id_int instruction .)
    }               reduce using rule 15 (for_instruction -> FOR ID = id_int : id_int instruction .)
    ELSE            reduce using rule 15 (for_instruction -> FOR ID = id_int : id_int instruction .)


state 169

    (13) if_instruction -> IF ( relation_expression ) instruction ELSE instruction .
    RETURN          reduce using rule 13 (if_instruction -> IF ( relation_expression ) instruction ELSE instruction .)
    CONTINUE        reduce using rule 13 (if_instruction -> IF ( relation_expression ) instruction ELSE instruction .)
    BREAK           reduce using rule 13 (if_instruction -> IF ( relation_expression ) instruction ELSE instruction .)
    {               reduce using rule 13 (if_instruction -> IF ( relation_expression ) instruction ELSE instruction .)
    PRINT           reduce using rule 13 (if_instruction -> IF ( relation_expression ) instruction ELSE instruction .)
    (               reduce using rule 13 (if_instruction -> IF ( relation_expression ) instruction ELSE instruction .)
    FOR             reduce using rule 13 (if_instruction -> IF ( relation_expression ) instruction ELSE instruction .)
    WHILE           reduce using rule 13 (if_instruction -> IF ( relation_expression ) instruction ELSE instruction .)
    IF              reduce using rule 13 (if_instruction -> IF ( relation_expression ) instruction ELSE instruction .)
    ID              reduce using rule 13 (if_instruction -> IF ( relation_expression ) instruction ELSE instruction .)
    $end            reduce using rule 13 (if_instruction -> IF ( relation_expression ) instruction ELSE instruction .)
    }               reduce using rule 13 (if_instruction -> IF ( relation_expression ) instruction ELSE instruction .)
    ELSE            reduce using rule 13 (if_instruction -> IF ( relation_expression ) instruction ELSE instruction .)
