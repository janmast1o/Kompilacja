Grammar:

Rule 0     S' -> program
Rule 1     program -> instructions_or_empty
Rule 2     instructions_or_empty -> <empty>
Rule 3     instructions_or_empty -> instructions
Rule 4     instructions -> instruction
Rule 5     instructions -> instructions instruction
Rule 6     instruction -> { instructions }
Rule 7     instruction -> print_i ;
Rule 8     instruction -> assign ;
Rule 9     instruction -> while_l
Rule 10    instruction -> for_l
Rule 11    instruction -> CONTINUE ;
Rule 12    instruction -> BREAK ;
Rule 13    instruction -> return_i ;
Rule 14    instruction -> if_i
Rule 15    if_i -> IF ( expr ) instruction ELSE instruction  [precedence=nonassoc, level=2]
Rule 16    if_i -> IF ( expr ) instruction  [precedence=nonassoc, level=1]
Rule 17    while_l -> WHILE ( expr ) instruction
Rule 18    for_l -> FOR ID = expr : expr instruction
Rule 19    return_i -> RETURN expr
Rule 20    return_i -> RETURN
Rule 21    print_i -> PRINT printargs
Rule 22    printargs -> expr
Rule 23    printargs -> expr , printargs
Rule 24    expr -> mat_fun ( expr )
Rule 25    expr -> matrix
Rule 26    expr -> expr DOTMINUS expr  [precedence=left, level=4]
Rule 27    expr -> expr DOTPLUS expr  [precedence=left, level=4]
Rule 28    expr -> expr DOTDIVIDE expr  [precedence=left, level=5]
Rule 29    expr -> expr DOTTIMES expr  [precedence=left, level=5]
Rule 30    expr -> expr GE expr  [precedence=nonassoc, level=3]
Rule 31    expr -> expr LE expr  [precedence=nonassoc, level=3]
Rule 32    expr -> expr GT expr  [precedence=nonassoc, level=3]
Rule 33    expr -> expr LT expr  [precedence=nonassoc, level=3]
Rule 34    expr -> expr NE expr  [precedence=nonassoc, level=3]
Rule 35    expr -> expr EQ expr  [precedence=nonassoc, level=3]
Rule 36    expr -> expr / expr  [precedence=left, level=5]
Rule 37    expr -> expr * expr  [precedence=left, level=5]
Rule 38    expr -> expr - expr  [precedence=left, level=4]
Rule 39    expr -> expr + expr  [precedence=left, level=4]
Rule 40    expr -> expr '  [precedence=left, level=6]
Rule 41    expr -> - expr  [precedence=left, level=7]
Rule 42    expr -> STRING
Rule 43    expr -> FLOAT
Rule 44    expr -> INT
Rule 45    expr -> ( expr )
Rule 46    expr -> var
Rule 47    var -> lists
Rule 48    var -> ID
Rule 49    lists -> ID [ expr , expr ]
Rule 50    assign -> var DIVIDEASSIGN expr
Rule 51    assign -> var TIMESASSIGN expr
Rule 52    assign -> var MINUSASSIGN expr
Rule 53    assign -> var PLUSASSIGN expr
Rule 54    assign -> var = expr
Rule 55    matrix -> [ vectors ]
Rule 56    vectors -> vector
Rule 57    vectors -> vectors , vector
Rule 58    vector -> [ variables ]
Rule 59    variables -> variable
Rule 60    variables -> variables , variable
Rule 61    variable -> expr
Rule 62    mat_fun -> ONES
Rule 63    mat_fun -> EYE
Rule 64    mat_fun -> ZEROS

Terminals, with rules where they appear:

'                    : 40
(                    : 15 16 17 24 45
)                    : 15 16 17 24 45
*                    : 37
+                    : 39
,                    : 23 49 57 60
-                    : 38 41
/                    : 36
:                    : 18
;                    : 7 8 11 12 13
=                    : 18 54
BREAK                : 12
CONTINUE             : 11
DIVIDEASSIGN         : 50
DOTDIVIDE            : 28
DOTMINUS             : 26
DOTPLUS              : 27
DOTTIMES             : 29
ELSE                 : 15
EQ                   : 35
EYE                  : 63
FLOAT                : 43
FOR                  : 18
GE                   : 30
GT                   : 32
ID                   : 18 48 49
IF                   : 15 16
INT                  : 44
LE                   : 31
LT                   : 33
MINUSASSIGN          : 52
NE                   : 34
ONES                 : 62
PLUSASSIGN           : 53
PRINT                : 21
RETURN               : 19 20
STRING               : 42
TIMESASSIGN          : 51
WHILE                : 17
ZEROS                : 64
[                    : 49 55 58
]                    : 49 55 58
error                : 
{                    : 6
}                    : 6

Nonterminals, with rules where they appear:

assign               : 8
expr                 : 15 16 17 18 18 19 22 23 24 26 26 27 27 28 28 29 29 30 30 31 31 32 32 33 33 34 34 35 35 36 36 37 37 38 38 39 39 40 41 45 49 49 50 51 52 53 54 61
for_l                : 10
if_i                 : 14
instruction          : 4 5 15 15 16 17 18
instructions         : 3 5 6
instructions_or_empty : 1
lists                : 47
mat_fun              : 24
matrix               : 25
print_i              : 7
printargs            : 21 23
program              : 0
return_i             : 13
var                  : 46 50 51 52 53 54
variable             : 59 60
variables            : 58 60
vector               : 56 57
vectors              : 55 57
while_l              : 9


state 0

    (0) S' -> . program
    (1) program -> . instructions_or_empty
    (2) instructions_or_empty -> .
    (3) instructions_or_empty -> . instructions
    (4) instructions -> . instruction
    (5) instructions -> . instructions instruction
    (6) instruction -> . { instructions }
    (7) instruction -> . print_i ;
    (8) instruction -> . assign ;
    (9) instruction -> . while_l
    (10) instruction -> . for_l
    (11) instruction -> . CONTINUE ;
    (12) instruction -> . BREAK ;
    (13) instruction -> . return_i ;
    (14) instruction -> . if_i
    (21) print_i -> . PRINT printargs
    (50) assign -> . var DIVIDEASSIGN expr
    (51) assign -> . var TIMESASSIGN expr
    (52) assign -> . var MINUSASSIGN expr
    (53) assign -> . var PLUSASSIGN expr
    (54) assign -> . var = expr
    (17) while_l -> . WHILE ( expr ) instruction
    (18) for_l -> . FOR ID = expr : expr instruction
    (19) return_i -> . RETURN expr
    (20) return_i -> . RETURN
    (15) if_i -> . IF ( expr ) instruction ELSE instruction
    (16) if_i -> . IF ( expr ) instruction
    (47) var -> . lists
    (48) var -> . ID
    (49) lists -> . ID [ expr , expr ]
    $end            reduce using rule 2 (instructions_or_empty -> .)
    {               shift and go to state 5
    CONTINUE        shift and go to state 10
    BREAK           shift and go to state 11
    PRINT           shift and go to state 14
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    RETURN          shift and go to state 19
    IF              shift and go to state 20
    ID              shift and go to state 18

    program                        shift and go to state 1
    instructions_or_empty          shift and go to state 2
    instructions                   shift and go to state 3
    instruction                    shift and go to state 4
    print_i                        shift and go to state 6
    assign                         shift and go to state 7
    while_l                        shift and go to state 8
    for_l                          shift and go to state 9
    return_i                       shift and go to state 12
    if_i                           shift and go to state 13
    var                            shift and go to state 15
    lists                          shift and go to state 21

state 1

    (0) S' -> program .


state 2

    (1) program -> instructions_or_empty .
    $end            reduce using rule 1 (program -> instructions_or_empty .)


state 3

    (3) instructions_or_empty -> instructions .
    (5) instructions -> instructions . instruction
    (6) instruction -> . { instructions }
    (7) instruction -> . print_i ;
    (8) instruction -> . assign ;
    (9) instruction -> . while_l
    (10) instruction -> . for_l
    (11) instruction -> . CONTINUE ;
    (12) instruction -> . BREAK ;
    (13) instruction -> . return_i ;
    (14) instruction -> . if_i
    (21) print_i -> . PRINT printargs
    (50) assign -> . var DIVIDEASSIGN expr
    (51) assign -> . var TIMESASSIGN expr
    (52) assign -> . var MINUSASSIGN expr
    (53) assign -> . var PLUSASSIGN expr
    (54) assign -> . var = expr
    (17) while_l -> . WHILE ( expr ) instruction
    (18) for_l -> . FOR ID = expr : expr instruction
    (19) return_i -> . RETURN expr
    (20) return_i -> . RETURN
    (15) if_i -> . IF ( expr ) instruction ELSE instruction
    (16) if_i -> . IF ( expr ) instruction
    (47) var -> . lists
    (48) var -> . ID
    (49) lists -> . ID [ expr , expr ]
    $end            reduce using rule 3 (instructions_or_empty -> instructions .)
    {               shift and go to state 5
    CONTINUE        shift and go to state 10
    BREAK           shift and go to state 11
    PRINT           shift and go to state 14
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    RETURN          shift and go to state 19
    IF              shift and go to state 20
    ID              shift and go to state 18

    instruction                    shift and go to state 22
    print_i                        shift and go to state 6
    assign                         shift and go to state 7
    while_l                        shift and go to state 8
    for_l                          shift and go to state 9
    return_i                       shift and go to state 12
    if_i                           shift and go to state 13
    var                            shift and go to state 15
    lists                          shift and go to state 21

state 4

    (4) instructions -> instruction .
    {               reduce using rule 4 (instructions -> instruction .)
    CONTINUE        reduce using rule 4 (instructions -> instruction .)
    BREAK           reduce using rule 4 (instructions -> instruction .)
    PRINT           reduce using rule 4 (instructions -> instruction .)
    WHILE           reduce using rule 4 (instructions -> instruction .)
    FOR             reduce using rule 4 (instructions -> instruction .)
    RETURN          reduce using rule 4 (instructions -> instruction .)
    IF              reduce using rule 4 (instructions -> instruction .)
    ID              reduce using rule 4 (instructions -> instruction .)
    $end            reduce using rule 4 (instructions -> instruction .)
    }               reduce using rule 4 (instructions -> instruction .)


state 5

    (6) instruction -> { . instructions }
    (4) instructions -> . instruction
    (5) instructions -> . instructions instruction
    (6) instruction -> . { instructions }
    (7) instruction -> . print_i ;
    (8) instruction -> . assign ;
    (9) instruction -> . while_l
    (10) instruction -> . for_l
    (11) instruction -> . CONTINUE ;
    (12) instruction -> . BREAK ;
    (13) instruction -> . return_i ;
    (14) instruction -> . if_i
    (21) print_i -> . PRINT printargs
    (50) assign -> . var DIVIDEASSIGN expr
    (51) assign -> . var TIMESASSIGN expr
    (52) assign -> . var MINUSASSIGN expr
    (53) assign -> . var PLUSASSIGN expr
    (54) assign -> . var = expr
    (17) while_l -> . WHILE ( expr ) instruction
    (18) for_l -> . FOR ID = expr : expr instruction
    (19) return_i -> . RETURN expr
    (20) return_i -> . RETURN
    (15) if_i -> . IF ( expr ) instruction ELSE instruction
    (16) if_i -> . IF ( expr ) instruction
    (47) var -> . lists
    (48) var -> . ID
    (49) lists -> . ID [ expr , expr ]
    {               shift and go to state 5
    CONTINUE        shift and go to state 10
    BREAK           shift and go to state 11
    PRINT           shift and go to state 14
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    RETURN          shift and go to state 19
    IF              shift and go to state 20
    ID              shift and go to state 18

    instructions                   shift and go to state 23
    instruction                    shift and go to state 4
    print_i                        shift and go to state 6
    assign                         shift and go to state 7
    while_l                        shift and go to state 8
    for_l                          shift and go to state 9
    return_i                       shift and go to state 12
    if_i                           shift and go to state 13
    var                            shift and go to state 15
    lists                          shift and go to state 21

state 6

    (7) instruction -> print_i . ;
    ;               shift and go to state 24


state 7

    (8) instruction -> assign . ;
    ;               shift and go to state 25


state 8

    (9) instruction -> while_l .
    {               reduce using rule 9 (instruction -> while_l .)
    CONTINUE        reduce using rule 9 (instruction -> while_l .)
    BREAK           reduce using rule 9 (instruction -> while_l .)
    PRINT           reduce using rule 9 (instruction -> while_l .)
    WHILE           reduce using rule 9 (instruction -> while_l .)
    FOR             reduce using rule 9 (instruction -> while_l .)
    RETURN          reduce using rule 9 (instruction -> while_l .)
    IF              reduce using rule 9 (instruction -> while_l .)
    ID              reduce using rule 9 (instruction -> while_l .)
    $end            reduce using rule 9 (instruction -> while_l .)
    }               reduce using rule 9 (instruction -> while_l .)
    ELSE            reduce using rule 9 (instruction -> while_l .)


state 9

    (10) instruction -> for_l .
    {               reduce using rule 10 (instruction -> for_l .)
    CONTINUE        reduce using rule 10 (instruction -> for_l .)
    BREAK           reduce using rule 10 (instruction -> for_l .)
    PRINT           reduce using rule 10 (instruction -> for_l .)
    WHILE           reduce using rule 10 (instruction -> for_l .)
    FOR             reduce using rule 10 (instruction -> for_l .)
    RETURN          reduce using rule 10 (instruction -> for_l .)
    IF              reduce using rule 10 (instruction -> for_l .)
    ID              reduce using rule 10 (instruction -> for_l .)
    $end            reduce using rule 10 (instruction -> for_l .)
    }               reduce using rule 10 (instruction -> for_l .)
    ELSE            reduce using rule 10 (instruction -> for_l .)


state 10

    (11) instruction -> CONTINUE . ;
    ;               shift and go to state 26


state 11

    (12) instruction -> BREAK . ;
    ;               shift and go to state 27


state 12

    (13) instruction -> return_i . ;
    ;               shift and go to state 28


state 13

    (14) instruction -> if_i .
    {               reduce using rule 14 (instruction -> if_i .)
    CONTINUE        reduce using rule 14 (instruction -> if_i .)
    BREAK           reduce using rule 14 (instruction -> if_i .)
    PRINT           reduce using rule 14 (instruction -> if_i .)
    WHILE           reduce using rule 14 (instruction -> if_i .)
    FOR             reduce using rule 14 (instruction -> if_i .)
    RETURN          reduce using rule 14 (instruction -> if_i .)
    IF              reduce using rule 14 (instruction -> if_i .)
    ID              reduce using rule 14 (instruction -> if_i .)
    $end            reduce using rule 14 (instruction -> if_i .)
    }               reduce using rule 14 (instruction -> if_i .)
    ELSE            reduce using rule 14 (instruction -> if_i .)


state 14

    (21) print_i -> PRINT . printargs
    (22) printargs -> . expr
    (23) printargs -> . expr , printargs
    (24) expr -> . mat_fun ( expr )
    (25) expr -> . matrix
    (26) expr -> . expr DOTMINUS expr
    (27) expr -> . expr DOTPLUS expr
    (28) expr -> . expr DOTDIVIDE expr
    (29) expr -> . expr DOTTIMES expr
    (30) expr -> . expr GE expr
    (31) expr -> . expr LE expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr LT expr
    (34) expr -> . expr NE expr
    (35) expr -> . expr EQ expr
    (36) expr -> . expr / expr
    (37) expr -> . expr * expr
    (38) expr -> . expr - expr
    (39) expr -> . expr + expr
    (40) expr -> . expr '
    (41) expr -> . - expr
    (42) expr -> . STRING
    (43) expr -> . FLOAT
    (44) expr -> . INT
    (45) expr -> . ( expr )
    (46) expr -> . var
    (62) mat_fun -> . ONES
    (63) mat_fun -> . EYE
    (64) mat_fun -> . ZEROS
    (55) matrix -> . [ vectors ]
    (47) var -> . lists
    (48) var -> . ID
    (49) lists -> . ID [ expr , expr ]
    -               shift and go to state 34
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    INT             shift and go to state 37
    (               shift and go to state 32
    ONES            shift and go to state 39
    EYE             shift and go to state 40
    ZEROS           shift and go to state 41
    [               shift and go to state 42
    ID              shift and go to state 18

    printargs                      shift and go to state 29
    expr                           shift and go to state 30
    mat_fun                        shift and go to state 31
    matrix                         shift and go to state 33
    var                            shift and go to state 38
    lists                          shift and go to state 21

state 15

    (50) assign -> var . DIVIDEASSIGN expr
    (51) assign -> var . TIMESASSIGN expr
    (52) assign -> var . MINUSASSIGN expr
    (53) assign -> var . PLUSASSIGN expr
    (54) assign -> var . = expr
    DIVIDEASSIGN    shift and go to state 43
    TIMESASSIGN     shift and go to state 44
    MINUSASSIGN     shift and go to state 45
    PLUSASSIGN      shift and go to state 46
    =               shift and go to state 47


state 16

    (17) while_l -> WHILE . ( expr ) instruction
    (               shift and go to state 48


state 17

    (18) for_l -> FOR . ID = expr : expr instruction
    ID              shift and go to state 49


state 18

    (48) var -> ID .
    (49) lists -> ID . [ expr , expr ]
    DIVIDEASSIGN    reduce using rule 48 (var -> ID .)
    TIMESASSIGN     reduce using rule 48 (var -> ID .)
    MINUSASSIGN     reduce using rule 48 (var -> ID .)
    PLUSASSIGN      reduce using rule 48 (var -> ID .)
    =               reduce using rule 48 (var -> ID .)
    ,               reduce using rule 48 (var -> ID .)
    DOTMINUS        reduce using rule 48 (var -> ID .)
    DOTPLUS         reduce using rule 48 (var -> ID .)
    DOTDIVIDE       reduce using rule 48 (var -> ID .)
    DOTTIMES        reduce using rule 48 (var -> ID .)
    GE              reduce using rule 48 (var -> ID .)
    LE              reduce using rule 48 (var -> ID .)
    GT              reduce using rule 48 (var -> ID .)
    LT              reduce using rule 48 (var -> ID .)
    NE              reduce using rule 48 (var -> ID .)
    EQ              reduce using rule 48 (var -> ID .)
    /               reduce using rule 48 (var -> ID .)
    *               reduce using rule 48 (var -> ID .)
    -               reduce using rule 48 (var -> ID .)
    +               reduce using rule 48 (var -> ID .)
    '               reduce using rule 48 (var -> ID .)
    ;               reduce using rule 48 (var -> ID .)
    )               reduce using rule 48 (var -> ID .)
    ]               reduce using rule 48 (var -> ID .)
    :               reduce using rule 48 (var -> ID .)
    {               reduce using rule 48 (var -> ID .)
    CONTINUE        reduce using rule 48 (var -> ID .)
    BREAK           reduce using rule 48 (var -> ID .)
    PRINT           reduce using rule 48 (var -> ID .)
    WHILE           reduce using rule 48 (var -> ID .)
    FOR             reduce using rule 48 (var -> ID .)
    RETURN          reduce using rule 48 (var -> ID .)
    IF              reduce using rule 48 (var -> ID .)
    ID              reduce using rule 48 (var -> ID .)
    [               shift and go to state 50


state 19

    (19) return_i -> RETURN . expr
    (20) return_i -> RETURN .
    (24) expr -> . mat_fun ( expr )
    (25) expr -> . matrix
    (26) expr -> . expr DOTMINUS expr
    (27) expr -> . expr DOTPLUS expr
    (28) expr -> . expr DOTDIVIDE expr
    (29) expr -> . expr DOTTIMES expr
    (30) expr -> . expr GE expr
    (31) expr -> . expr LE expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr LT expr
    (34) expr -> . expr NE expr
    (35) expr -> . expr EQ expr
    (36) expr -> . expr / expr
    (37) expr -> . expr * expr
    (38) expr -> . expr - expr
    (39) expr -> . expr + expr
    (40) expr -> . expr '
    (41) expr -> . - expr
    (42) expr -> . STRING
    (43) expr -> . FLOAT
    (44) expr -> . INT
    (45) expr -> . ( expr )
    (46) expr -> . var
    (62) mat_fun -> . ONES
    (63) mat_fun -> . EYE
    (64) mat_fun -> . ZEROS
    (55) matrix -> . [ vectors ]
    (47) var -> . lists
    (48) var -> . ID
    (49) lists -> . ID [ expr , expr ]
    ;               reduce using rule 20 (return_i -> RETURN .)
    -               shift and go to state 34
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    INT             shift and go to state 37
    (               shift and go to state 32
    ONES            shift and go to state 39
    EYE             shift and go to state 40
    ZEROS           shift and go to state 41
    [               shift and go to state 42
    ID              shift and go to state 18

    expr                           shift and go to state 51
    mat_fun                        shift and go to state 31
    matrix                         shift and go to state 33
    var                            shift and go to state 38
    lists                          shift and go to state 21

state 20

    (15) if_i -> IF . ( expr ) instruction ELSE instruction
    (16) if_i -> IF . ( expr ) instruction
    (               shift and go to state 52


state 21

    (47) var -> lists .
    DIVIDEASSIGN    reduce using rule 47 (var -> lists .)
    TIMESASSIGN     reduce using rule 47 (var -> lists .)
    MINUSASSIGN     reduce using rule 47 (var -> lists .)
    PLUSASSIGN      reduce using rule 47 (var -> lists .)
    =               reduce using rule 47 (var -> lists .)
    ,               reduce using rule 47 (var -> lists .)
    DOTMINUS        reduce using rule 47 (var -> lists .)
    DOTPLUS         reduce using rule 47 (var -> lists .)
    DOTDIVIDE       reduce using rule 47 (var -> lists .)
    DOTTIMES        reduce using rule 47 (var -> lists .)
    GE              reduce using rule 47 (var -> lists .)
    LE              reduce using rule 47 (var -> lists .)
    GT              reduce using rule 47 (var -> lists .)
    LT              reduce using rule 47 (var -> lists .)
    NE              reduce using rule 47 (var -> lists .)
    EQ              reduce using rule 47 (var -> lists .)
    /               reduce using rule 47 (var -> lists .)
    *               reduce using rule 47 (var -> lists .)
    -               reduce using rule 47 (var -> lists .)
    +               reduce using rule 47 (var -> lists .)
    '               reduce using rule 47 (var -> lists .)
    ;               reduce using rule 47 (var -> lists .)
    )               reduce using rule 47 (var -> lists .)
    ]               reduce using rule 47 (var -> lists .)
    :               reduce using rule 47 (var -> lists .)
    {               reduce using rule 47 (var -> lists .)
    CONTINUE        reduce using rule 47 (var -> lists .)
    BREAK           reduce using rule 47 (var -> lists .)
    PRINT           reduce using rule 47 (var -> lists .)
    WHILE           reduce using rule 47 (var -> lists .)
    FOR             reduce using rule 47 (var -> lists .)
    RETURN          reduce using rule 47 (var -> lists .)
    IF              reduce using rule 47 (var -> lists .)
    ID              reduce using rule 47 (var -> lists .)


state 22

    (5) instructions -> instructions instruction .
    {               reduce using rule 5 (instructions -> instructions instruction .)
    CONTINUE        reduce using rule 5 (instructions -> instructions instruction .)
    BREAK           reduce using rule 5 (instructions -> instructions instruction .)
    PRINT           reduce using rule 5 (instructions -> instructions instruction .)
    WHILE           reduce using rule 5 (instructions -> instructions instruction .)
    FOR             reduce using rule 5 (instructions -> instructions instruction .)
    RETURN          reduce using rule 5 (instructions -> instructions instruction .)
    IF              reduce using rule 5 (instructions -> instructions instruction .)
    ID              reduce using rule 5 (instructions -> instructions instruction .)
    $end            reduce using rule 5 (instructions -> instructions instruction .)
    }               reduce using rule 5 (instructions -> instructions instruction .)


state 23

    (6) instruction -> { instructions . }
    (5) instructions -> instructions . instruction
    (6) instruction -> . { instructions }
    (7) instruction -> . print_i ;
    (8) instruction -> . assign ;
    (9) instruction -> . while_l
    (10) instruction -> . for_l
    (11) instruction -> . CONTINUE ;
    (12) instruction -> . BREAK ;
    (13) instruction -> . return_i ;
    (14) instruction -> . if_i
    (21) print_i -> . PRINT printargs
    (50) assign -> . var DIVIDEASSIGN expr
    (51) assign -> . var TIMESASSIGN expr
    (52) assign -> . var MINUSASSIGN expr
    (53) assign -> . var PLUSASSIGN expr
    (54) assign -> . var = expr
    (17) while_l -> . WHILE ( expr ) instruction
    (18) for_l -> . FOR ID = expr : expr instruction
    (19) return_i -> . RETURN expr
    (20) return_i -> . RETURN
    (15) if_i -> . IF ( expr ) instruction ELSE instruction
    (16) if_i -> . IF ( expr ) instruction
    (47) var -> . lists
    (48) var -> . ID
    (49) lists -> . ID [ expr , expr ]
    }               shift and go to state 53
    {               shift and go to state 5
    CONTINUE        shift and go to state 10
    BREAK           shift and go to state 11
    PRINT           shift and go to state 14
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    RETURN          shift and go to state 19
    IF              shift and go to state 20
    ID              shift and go to state 18

    instruction                    shift and go to state 22
    print_i                        shift and go to state 6
    assign                         shift and go to state 7
    while_l                        shift and go to state 8
    for_l                          shift and go to state 9
    return_i                       shift and go to state 12
    if_i                           shift and go to state 13
    var                            shift and go to state 15
    lists                          shift and go to state 21

state 24

    (7) instruction -> print_i ; .
    {               reduce using rule 7 (instruction -> print_i ; .)
    CONTINUE        reduce using rule 7 (instruction -> print_i ; .)
    BREAK           reduce using rule 7 (instruction -> print_i ; .)
    PRINT           reduce using rule 7 (instruction -> print_i ; .)
    WHILE           reduce using rule 7 (instruction -> print_i ; .)
    FOR             reduce using rule 7 (instruction -> print_i ; .)
    RETURN          reduce using rule 7 (instruction -> print_i ; .)
    IF              reduce using rule 7 (instruction -> print_i ; .)
    ID              reduce using rule 7 (instruction -> print_i ; .)
    $end            reduce using rule 7 (instruction -> print_i ; .)
    }               reduce using rule 7 (instruction -> print_i ; .)
    ELSE            reduce using rule 7 (instruction -> print_i ; .)


state 25

    (8) instruction -> assign ; .
    {               reduce using rule 8 (instruction -> assign ; .)
    CONTINUE        reduce using rule 8 (instruction -> assign ; .)
    BREAK           reduce using rule 8 (instruction -> assign ; .)
    PRINT           reduce using rule 8 (instruction -> assign ; .)
    WHILE           reduce using rule 8 (instruction -> assign ; .)
    FOR             reduce using rule 8 (instruction -> assign ; .)
    RETURN          reduce using rule 8 (instruction -> assign ; .)
    IF              reduce using rule 8 (instruction -> assign ; .)
    ID              reduce using rule 8 (instruction -> assign ; .)
    $end            reduce using rule 8 (instruction -> assign ; .)
    }               reduce using rule 8 (instruction -> assign ; .)
    ELSE            reduce using rule 8 (instruction -> assign ; .)


state 26

    (11) instruction -> CONTINUE ; .
    {               reduce using rule 11 (instruction -> CONTINUE ; .)
    CONTINUE        reduce using rule 11 (instruction -> CONTINUE ; .)
    BREAK           reduce using rule 11 (instruction -> CONTINUE ; .)
    PRINT           reduce using rule 11 (instruction -> CONTINUE ; .)
    WHILE           reduce using rule 11 (instruction -> CONTINUE ; .)
    FOR             reduce using rule 11 (instruction -> CONTINUE ; .)
    RETURN          reduce using rule 11 (instruction -> CONTINUE ; .)
    IF              reduce using rule 11 (instruction -> CONTINUE ; .)
    ID              reduce using rule 11 (instruction -> CONTINUE ; .)
    $end            reduce using rule 11 (instruction -> CONTINUE ; .)
    }               reduce using rule 11 (instruction -> CONTINUE ; .)
    ELSE            reduce using rule 11 (instruction -> CONTINUE ; .)


state 27

    (12) instruction -> BREAK ; .
    {               reduce using rule 12 (instruction -> BREAK ; .)
    CONTINUE        reduce using rule 12 (instruction -> BREAK ; .)
    BREAK           reduce using rule 12 (instruction -> BREAK ; .)
    PRINT           reduce using rule 12 (instruction -> BREAK ; .)
    WHILE           reduce using rule 12 (instruction -> BREAK ; .)
    FOR             reduce using rule 12 (instruction -> BREAK ; .)
    RETURN          reduce using rule 12 (instruction -> BREAK ; .)
    IF              reduce using rule 12 (instruction -> BREAK ; .)
    ID              reduce using rule 12 (instruction -> BREAK ; .)
    $end            reduce using rule 12 (instruction -> BREAK ; .)
    }               reduce using rule 12 (instruction -> BREAK ; .)
    ELSE            reduce using rule 12 (instruction -> BREAK ; .)


state 28

    (13) instruction -> return_i ; .
    {               reduce using rule 13 (instruction -> return_i ; .)
    CONTINUE        reduce using rule 13 (instruction -> return_i ; .)
    BREAK           reduce using rule 13 (instruction -> return_i ; .)
    PRINT           reduce using rule 13 (instruction -> return_i ; .)
    WHILE           reduce using rule 13 (instruction -> return_i ; .)
    FOR             reduce using rule 13 (instruction -> return_i ; .)
    RETURN          reduce using rule 13 (instruction -> return_i ; .)
    IF              reduce using rule 13 (instruction -> return_i ; .)
    ID              reduce using rule 13 (instruction -> return_i ; .)
    $end            reduce using rule 13 (instruction -> return_i ; .)
    }               reduce using rule 13 (instruction -> return_i ; .)
    ELSE            reduce using rule 13 (instruction -> return_i ; .)


state 29

    (21) print_i -> PRINT printargs .
    ;               reduce using rule 21 (print_i -> PRINT printargs .)


state 30

    (22) printargs -> expr .
    (23) printargs -> expr . , printargs
    (26) expr -> expr . DOTMINUS expr
    (27) expr -> expr . DOTPLUS expr
    (28) expr -> expr . DOTDIVIDE expr
    (29) expr -> expr . DOTTIMES expr
    (30) expr -> expr . GE expr
    (31) expr -> expr . LE expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . LT expr
    (34) expr -> expr . NE expr
    (35) expr -> expr . EQ expr
    (36) expr -> expr . / expr
    (37) expr -> expr . * expr
    (38) expr -> expr . - expr
    (39) expr -> expr . + expr
    (40) expr -> expr . '
    ;               reduce using rule 22 (printargs -> expr .)
    ,               shift and go to state 54
    DOTMINUS        shift and go to state 55
    DOTPLUS         shift and go to state 56
    DOTDIVIDE       shift and go to state 57
    DOTTIMES        shift and go to state 58
    GE              shift and go to state 59
    LE              shift and go to state 60
    GT              shift and go to state 61
    LT              shift and go to state 62
    NE              shift and go to state 63
    EQ              shift and go to state 64
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68
    '               shift and go to state 69


state 31

    (24) expr -> mat_fun . ( expr )
    (               shift and go to state 70


state 32

    (45) expr -> ( . expr )
    (24) expr -> . mat_fun ( expr )
    (25) expr -> . matrix
    (26) expr -> . expr DOTMINUS expr
    (27) expr -> . expr DOTPLUS expr
    (28) expr -> . expr DOTDIVIDE expr
    (29) expr -> . expr DOTTIMES expr
    (30) expr -> . expr GE expr
    (31) expr -> . expr LE expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr LT expr
    (34) expr -> . expr NE expr
    (35) expr -> . expr EQ expr
    (36) expr -> . expr / expr
    (37) expr -> . expr * expr
    (38) expr -> . expr - expr
    (39) expr -> . expr + expr
    (40) expr -> . expr '
    (41) expr -> . - expr
    (42) expr -> . STRING
    (43) expr -> . FLOAT
    (44) expr -> . INT
    (45) expr -> . ( expr )
    (46) expr -> . var
    (62) mat_fun -> . ONES
    (63) mat_fun -> . EYE
    (64) mat_fun -> . ZEROS
    (55) matrix -> . [ vectors ]
    (47) var -> . lists
    (48) var -> . ID
    (49) lists -> . ID [ expr , expr ]
    -               shift and go to state 34
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    INT             shift and go to state 37
    (               shift and go to state 32
    ONES            shift and go to state 39
    EYE             shift and go to state 40
    ZEROS           shift and go to state 41
    [               shift and go to state 42
    ID              shift and go to state 18

    expr                           shift and go to state 71
    mat_fun                        shift and go to state 31
    matrix                         shift and go to state 33
    var                            shift and go to state 38
    lists                          shift and go to state 21

state 33

    (25) expr -> matrix .
    ,               reduce using rule 25 (expr -> matrix .)
    DOTMINUS        reduce using rule 25 (expr -> matrix .)
    DOTPLUS         reduce using rule 25 (expr -> matrix .)
    DOTDIVIDE       reduce using rule 25 (expr -> matrix .)
    DOTTIMES        reduce using rule 25 (expr -> matrix .)
    GE              reduce using rule 25 (expr -> matrix .)
    LE              reduce using rule 25 (expr -> matrix .)
    GT              reduce using rule 25 (expr -> matrix .)
    LT              reduce using rule 25 (expr -> matrix .)
    NE              reduce using rule 25 (expr -> matrix .)
    EQ              reduce using rule 25 (expr -> matrix .)
    /               reduce using rule 25 (expr -> matrix .)
    *               reduce using rule 25 (expr -> matrix .)
    -               reduce using rule 25 (expr -> matrix .)
    +               reduce using rule 25 (expr -> matrix .)
    '               reduce using rule 25 (expr -> matrix .)
    ;               reduce using rule 25 (expr -> matrix .)
    )               reduce using rule 25 (expr -> matrix .)
    ]               reduce using rule 25 (expr -> matrix .)
    :               reduce using rule 25 (expr -> matrix .)
    {               reduce using rule 25 (expr -> matrix .)
    CONTINUE        reduce using rule 25 (expr -> matrix .)
    BREAK           reduce using rule 25 (expr -> matrix .)
    PRINT           reduce using rule 25 (expr -> matrix .)
    WHILE           reduce using rule 25 (expr -> matrix .)
    FOR             reduce using rule 25 (expr -> matrix .)
    RETURN          reduce using rule 25 (expr -> matrix .)
    IF              reduce using rule 25 (expr -> matrix .)
    ID              reduce using rule 25 (expr -> matrix .)


state 34

    (41) expr -> - . expr
    (24) expr -> . mat_fun ( expr )
    (25) expr -> . matrix
    (26) expr -> . expr DOTMINUS expr
    (27) expr -> . expr DOTPLUS expr
    (28) expr -> . expr DOTDIVIDE expr
    (29) expr -> . expr DOTTIMES expr
    (30) expr -> . expr GE expr
    (31) expr -> . expr LE expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr LT expr
    (34) expr -> . expr NE expr
    (35) expr -> . expr EQ expr
    (36) expr -> . expr / expr
    (37) expr -> . expr * expr
    (38) expr -> . expr - expr
    (39) expr -> . expr + expr
    (40) expr -> . expr '
    (41) expr -> . - expr
    (42) expr -> . STRING
    (43) expr -> . FLOAT
    (44) expr -> . INT
    (45) expr -> . ( expr )
    (46) expr -> . var
    (62) mat_fun -> . ONES
    (63) mat_fun -> . EYE
    (64) mat_fun -> . ZEROS
    (55) matrix -> . [ vectors ]
    (47) var -> . lists
    (48) var -> . ID
    (49) lists -> . ID [ expr , expr ]
    -               shift and go to state 34
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    INT             shift and go to state 37
    (               shift and go to state 32
    ONES            shift and go to state 39
    EYE             shift and go to state 40
    ZEROS           shift and go to state 41
    [               shift and go to state 42
    ID              shift and go to state 18

    expr                           shift and go to state 72
    mat_fun                        shift and go to state 31
    matrix                         shift and go to state 33
    var                            shift and go to state 38
    lists                          shift and go to state 21

state 35

    (42) expr -> STRING .
    ,               reduce using rule 42 (expr -> STRING .)
    DOTMINUS        reduce using rule 42 (expr -> STRING .)
    DOTPLUS         reduce using rule 42 (expr -> STRING .)
    DOTDIVIDE       reduce using rule 42 (expr -> STRING .)
    DOTTIMES        reduce using rule 42 (expr -> STRING .)
    GE              reduce using rule 42 (expr -> STRING .)
    LE              reduce using rule 42 (expr -> STRING .)
    GT              reduce using rule 42 (expr -> STRING .)
    LT              reduce using rule 42 (expr -> STRING .)
    NE              reduce using rule 42 (expr -> STRING .)
    EQ              reduce using rule 42 (expr -> STRING .)
    /               reduce using rule 42 (expr -> STRING .)
    *               reduce using rule 42 (expr -> STRING .)
    -               reduce using rule 42 (expr -> STRING .)
    +               reduce using rule 42 (expr -> STRING .)
    '               reduce using rule 42 (expr -> STRING .)
    ;               reduce using rule 42 (expr -> STRING .)
    )               reduce using rule 42 (expr -> STRING .)
    ]               reduce using rule 42 (expr -> STRING .)
    :               reduce using rule 42 (expr -> STRING .)
    {               reduce using rule 42 (expr -> STRING .)
    CONTINUE        reduce using rule 42 (expr -> STRING .)
    BREAK           reduce using rule 42 (expr -> STRING .)
    PRINT           reduce using rule 42 (expr -> STRING .)
    WHILE           reduce using rule 42 (expr -> STRING .)
    FOR             reduce using rule 42 (expr -> STRING .)
    RETURN          reduce using rule 42 (expr -> STRING .)
    IF              reduce using rule 42 (expr -> STRING .)
    ID              reduce using rule 42 (expr -> STRING .)


state 36

    (43) expr -> FLOAT .
    ,               reduce using rule 43 (expr -> FLOAT .)
    DOTMINUS        reduce using rule 43 (expr -> FLOAT .)
    DOTPLUS         reduce using rule 43 (expr -> FLOAT .)
    DOTDIVIDE       reduce using rule 43 (expr -> FLOAT .)
    DOTTIMES        reduce using rule 43 (expr -> FLOAT .)
    GE              reduce using rule 43 (expr -> FLOAT .)
    LE              reduce using rule 43 (expr -> FLOAT .)
    GT              reduce using rule 43 (expr -> FLOAT .)
    LT              reduce using rule 43 (expr -> FLOAT .)
    NE              reduce using rule 43 (expr -> FLOAT .)
    EQ              reduce using rule 43 (expr -> FLOAT .)
    /               reduce using rule 43 (expr -> FLOAT .)
    *               reduce using rule 43 (expr -> FLOAT .)
    -               reduce using rule 43 (expr -> FLOAT .)
    +               reduce using rule 43 (expr -> FLOAT .)
    '               reduce using rule 43 (expr -> FLOAT .)
    ;               reduce using rule 43 (expr -> FLOAT .)
    )               reduce using rule 43 (expr -> FLOAT .)
    ]               reduce using rule 43 (expr -> FLOAT .)
    :               reduce using rule 43 (expr -> FLOAT .)
    {               reduce using rule 43 (expr -> FLOAT .)
    CONTINUE        reduce using rule 43 (expr -> FLOAT .)
    BREAK           reduce using rule 43 (expr -> FLOAT .)
    PRINT           reduce using rule 43 (expr -> FLOAT .)
    WHILE           reduce using rule 43 (expr -> FLOAT .)
    FOR             reduce using rule 43 (expr -> FLOAT .)
    RETURN          reduce using rule 43 (expr -> FLOAT .)
    IF              reduce using rule 43 (expr -> FLOAT .)
    ID              reduce using rule 43 (expr -> FLOAT .)


state 37

    (44) expr -> INT .
    ,               reduce using rule 44 (expr -> INT .)
    DOTMINUS        reduce using rule 44 (expr -> INT .)
    DOTPLUS         reduce using rule 44 (expr -> INT .)
    DOTDIVIDE       reduce using rule 44 (expr -> INT .)
    DOTTIMES        reduce using rule 44 (expr -> INT .)
    GE              reduce using rule 44 (expr -> INT .)
    LE              reduce using rule 44 (expr -> INT .)
    GT              reduce using rule 44 (expr -> INT .)
    LT              reduce using rule 44 (expr -> INT .)
    NE              reduce using rule 44 (expr -> INT .)
    EQ              reduce using rule 44 (expr -> INT .)
    /               reduce using rule 44 (expr -> INT .)
    *               reduce using rule 44 (expr -> INT .)
    -               reduce using rule 44 (expr -> INT .)
    +               reduce using rule 44 (expr -> INT .)
    '               reduce using rule 44 (expr -> INT .)
    ;               reduce using rule 44 (expr -> INT .)
    )               reduce using rule 44 (expr -> INT .)
    ]               reduce using rule 44 (expr -> INT .)
    :               reduce using rule 44 (expr -> INT .)
    {               reduce using rule 44 (expr -> INT .)
    CONTINUE        reduce using rule 44 (expr -> INT .)
    BREAK           reduce using rule 44 (expr -> INT .)
    PRINT           reduce using rule 44 (expr -> INT .)
    WHILE           reduce using rule 44 (expr -> INT .)
    FOR             reduce using rule 44 (expr -> INT .)
    RETURN          reduce using rule 44 (expr -> INT .)
    IF              reduce using rule 44 (expr -> INT .)
    ID              reduce using rule 44 (expr -> INT .)


state 38

    (46) expr -> var .
    ,               reduce using rule 46 (expr -> var .)
    DOTMINUS        reduce using rule 46 (expr -> var .)
    DOTPLUS         reduce using rule 46 (expr -> var .)
    DOTDIVIDE       reduce using rule 46 (expr -> var .)
    DOTTIMES        reduce using rule 46 (expr -> var .)
    GE              reduce using rule 46 (expr -> var .)
    LE              reduce using rule 46 (expr -> var .)
    GT              reduce using rule 46 (expr -> var .)
    LT              reduce using rule 46 (expr -> var .)
    NE              reduce using rule 46 (expr -> var .)
    EQ              reduce using rule 46 (expr -> var .)
    /               reduce using rule 46 (expr -> var .)
    *               reduce using rule 46 (expr -> var .)
    -               reduce using rule 46 (expr -> var .)
    +               reduce using rule 46 (expr -> var .)
    '               reduce using rule 46 (expr -> var .)
    ;               reduce using rule 46 (expr -> var .)
    )               reduce using rule 46 (expr -> var .)
    ]               reduce using rule 46 (expr -> var .)
    :               reduce using rule 46 (expr -> var .)
    {               reduce using rule 46 (expr -> var .)
    CONTINUE        reduce using rule 46 (expr -> var .)
    BREAK           reduce using rule 46 (expr -> var .)
    PRINT           reduce using rule 46 (expr -> var .)
    WHILE           reduce using rule 46 (expr -> var .)
    FOR             reduce using rule 46 (expr -> var .)
    RETURN          reduce using rule 46 (expr -> var .)
    IF              reduce using rule 46 (expr -> var .)
    ID              reduce using rule 46 (expr -> var .)


state 39

    (62) mat_fun -> ONES .
    (               reduce using rule 62 (mat_fun -> ONES .)


state 40

    (63) mat_fun -> EYE .
    (               reduce using rule 63 (mat_fun -> EYE .)


state 41

    (64) mat_fun -> ZEROS .
    (               reduce using rule 64 (mat_fun -> ZEROS .)


state 42

    (55) matrix -> [ . vectors ]
    (56) vectors -> . vector
    (57) vectors -> . vectors , vector
    (58) vector -> . [ variables ]
    [               shift and go to state 73

    vectors                        shift and go to state 74
    vector                         shift and go to state 75

state 43

    (50) assign -> var DIVIDEASSIGN . expr
    (24) expr -> . mat_fun ( expr )
    (25) expr -> . matrix
    (26) expr -> . expr DOTMINUS expr
    (27) expr -> . expr DOTPLUS expr
    (28) expr -> . expr DOTDIVIDE expr
    (29) expr -> . expr DOTTIMES expr
    (30) expr -> . expr GE expr
    (31) expr -> . expr LE expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr LT expr
    (34) expr -> . expr NE expr
    (35) expr -> . expr EQ expr
    (36) expr -> . expr / expr
    (37) expr -> . expr * expr
    (38) expr -> . expr - expr
    (39) expr -> . expr + expr
    (40) expr -> . expr '
    (41) expr -> . - expr
    (42) expr -> . STRING
    (43) expr -> . FLOAT
    (44) expr -> . INT
    (45) expr -> . ( expr )
    (46) expr -> . var
    (62) mat_fun -> . ONES
    (63) mat_fun -> . EYE
    (64) mat_fun -> . ZEROS
    (55) matrix -> . [ vectors ]
    (47) var -> . lists
    (48) var -> . ID
    (49) lists -> . ID [ expr , expr ]
    -               shift and go to state 34
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    INT             shift and go to state 37
    (               shift and go to state 32
    ONES            shift and go to state 39
    EYE             shift and go to state 40
    ZEROS           shift and go to state 41
    [               shift and go to state 42
    ID              shift and go to state 18

    var                            shift and go to state 38
    expr                           shift and go to state 76
    mat_fun                        shift and go to state 31
    matrix                         shift and go to state 33
    lists                          shift and go to state 21

state 44

    (51) assign -> var TIMESASSIGN . expr
    (24) expr -> . mat_fun ( expr )
    (25) expr -> . matrix
    (26) expr -> . expr DOTMINUS expr
    (27) expr -> . expr DOTPLUS expr
    (28) expr -> . expr DOTDIVIDE expr
    (29) expr -> . expr DOTTIMES expr
    (30) expr -> . expr GE expr
    (31) expr -> . expr LE expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr LT expr
    (34) expr -> . expr NE expr
    (35) expr -> . expr EQ expr
    (36) expr -> . expr / expr
    (37) expr -> . expr * expr
    (38) expr -> . expr - expr
    (39) expr -> . expr + expr
    (40) expr -> . expr '
    (41) expr -> . - expr
    (42) expr -> . STRING
    (43) expr -> . FLOAT
    (44) expr -> . INT
    (45) expr -> . ( expr )
    (46) expr -> . var
    (62) mat_fun -> . ONES
    (63) mat_fun -> . EYE
    (64) mat_fun -> . ZEROS
    (55) matrix -> . [ vectors ]
    (47) var -> . lists
    (48) var -> . ID
    (49) lists -> . ID [ expr , expr ]
    -               shift and go to state 34
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    INT             shift and go to state 37
    (               shift and go to state 32
    ONES            shift and go to state 39
    EYE             shift and go to state 40
    ZEROS           shift and go to state 41
    [               shift and go to state 42
    ID              shift and go to state 18

    var                            shift and go to state 38
    expr                           shift and go to state 77
    mat_fun                        shift and go to state 31
    matrix                         shift and go to state 33
    lists                          shift and go to state 21

state 45

    (52) assign -> var MINUSASSIGN . expr
    (24) expr -> . mat_fun ( expr )
    (25) expr -> . matrix
    (26) expr -> . expr DOTMINUS expr
    (27) expr -> . expr DOTPLUS expr
    (28) expr -> . expr DOTDIVIDE expr
    (29) expr -> . expr DOTTIMES expr
    (30) expr -> . expr GE expr
    (31) expr -> . expr LE expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr LT expr
    (34) expr -> . expr NE expr
    (35) expr -> . expr EQ expr
    (36) expr -> . expr / expr
    (37) expr -> . expr * expr
    (38) expr -> . expr - expr
    (39) expr -> . expr + expr
    (40) expr -> . expr '
    (41) expr -> . - expr
    (42) expr -> . STRING
    (43) expr -> . FLOAT
    (44) expr -> . INT
    (45) expr -> . ( expr )
    (46) expr -> . var
    (62) mat_fun -> . ONES
    (63) mat_fun -> . EYE
    (64) mat_fun -> . ZEROS
    (55) matrix -> . [ vectors ]
    (47) var -> . lists
    (48) var -> . ID
    (49) lists -> . ID [ expr , expr ]
    -               shift and go to state 34
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    INT             shift and go to state 37
    (               shift and go to state 32
    ONES            shift and go to state 39
    EYE             shift and go to state 40
    ZEROS           shift and go to state 41
    [               shift and go to state 42
    ID              shift and go to state 18

    var                            shift and go to state 38
    expr                           shift and go to state 78
    mat_fun                        shift and go to state 31
    matrix                         shift and go to state 33
    lists                          shift and go to state 21

state 46

    (53) assign -> var PLUSASSIGN . expr
    (24) expr -> . mat_fun ( expr )
    (25) expr -> . matrix
    (26) expr -> . expr DOTMINUS expr
    (27) expr -> . expr DOTPLUS expr
    (28) expr -> . expr DOTDIVIDE expr
    (29) expr -> . expr DOTTIMES expr
    (30) expr -> . expr GE expr
    (31) expr -> . expr LE expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr LT expr
    (34) expr -> . expr NE expr
    (35) expr -> . expr EQ expr
    (36) expr -> . expr / expr
    (37) expr -> . expr * expr
    (38) expr -> . expr - expr
    (39) expr -> . expr + expr
    (40) expr -> . expr '
    (41) expr -> . - expr
    (42) expr -> . STRING
    (43) expr -> . FLOAT
    (44) expr -> . INT
    (45) expr -> . ( expr )
    (46) expr -> . var
    (62) mat_fun -> . ONES
    (63) mat_fun -> . EYE
    (64) mat_fun -> . ZEROS
    (55) matrix -> . [ vectors ]
    (47) var -> . lists
    (48) var -> . ID
    (49) lists -> . ID [ expr , expr ]
    -               shift and go to state 34
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    INT             shift and go to state 37
    (               shift and go to state 32
    ONES            shift and go to state 39
    EYE             shift and go to state 40
    ZEROS           shift and go to state 41
    [               shift and go to state 42
    ID              shift and go to state 18

    var                            shift and go to state 38
    expr                           shift and go to state 79
    mat_fun                        shift and go to state 31
    matrix                         shift and go to state 33
    lists                          shift and go to state 21

state 47

    (54) assign -> var = . expr
    (24) expr -> . mat_fun ( expr )
    (25) expr -> . matrix
    (26) expr -> . expr DOTMINUS expr
    (27) expr -> . expr DOTPLUS expr
    (28) expr -> . expr DOTDIVIDE expr
    (29) expr -> . expr DOTTIMES expr
    (30) expr -> . expr GE expr
    (31) expr -> . expr LE expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr LT expr
    (34) expr -> . expr NE expr
    (35) expr -> . expr EQ expr
    (36) expr -> . expr / expr
    (37) expr -> . expr * expr
    (38) expr -> . expr - expr
    (39) expr -> . expr + expr
    (40) expr -> . expr '
    (41) expr -> . - expr
    (42) expr -> . STRING
    (43) expr -> . FLOAT
    (44) expr -> . INT
    (45) expr -> . ( expr )
    (46) expr -> . var
    (62) mat_fun -> . ONES
    (63) mat_fun -> . EYE
    (64) mat_fun -> . ZEROS
    (55) matrix -> . [ vectors ]
    (47) var -> . lists
    (48) var -> . ID
    (49) lists -> . ID [ expr , expr ]
    -               shift and go to state 34
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    INT             shift and go to state 37
    (               shift and go to state 32
    ONES            shift and go to state 39
    EYE             shift and go to state 40
    ZEROS           shift and go to state 41
    [               shift and go to state 42
    ID              shift and go to state 18

    var                            shift and go to state 38
    expr                           shift and go to state 80
    mat_fun                        shift and go to state 31
    matrix                         shift and go to state 33
    lists                          shift and go to state 21

state 48

    (17) while_l -> WHILE ( . expr ) instruction
    (24) expr -> . mat_fun ( expr )
    (25) expr -> . matrix
    (26) expr -> . expr DOTMINUS expr
    (27) expr -> . expr DOTPLUS expr
    (28) expr -> . expr DOTDIVIDE expr
    (29) expr -> . expr DOTTIMES expr
    (30) expr -> . expr GE expr
    (31) expr -> . expr LE expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr LT expr
    (34) expr -> . expr NE expr
    (35) expr -> . expr EQ expr
    (36) expr -> . expr / expr
    (37) expr -> . expr * expr
    (38) expr -> . expr - expr
    (39) expr -> . expr + expr
    (40) expr -> . expr '
    (41) expr -> . - expr
    (42) expr -> . STRING
    (43) expr -> . FLOAT
    (44) expr -> . INT
    (45) expr -> . ( expr )
    (46) expr -> . var
    (62) mat_fun -> . ONES
    (63) mat_fun -> . EYE
    (64) mat_fun -> . ZEROS
    (55) matrix -> . [ vectors ]
    (47) var -> . lists
    (48) var -> . ID
    (49) lists -> . ID [ expr , expr ]
    -               shift and go to state 34
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    INT             shift and go to state 37
    (               shift and go to state 32
    ONES            shift and go to state 39
    EYE             shift and go to state 40
    ZEROS           shift and go to state 41
    [               shift and go to state 42
    ID              shift and go to state 18

    expr                           shift and go to state 81
    mat_fun                        shift and go to state 31
    matrix                         shift and go to state 33
    var                            shift and go to state 38
    lists                          shift and go to state 21

state 49

    (18) for_l -> FOR ID . = expr : expr instruction
    =               shift and go to state 82


state 50

    (49) lists -> ID [ . expr , expr ]
    (24) expr -> . mat_fun ( expr )
    (25) expr -> . matrix
    (26) expr -> . expr DOTMINUS expr
    (27) expr -> . expr DOTPLUS expr
    (28) expr -> . expr DOTDIVIDE expr
    (29) expr -> . expr DOTTIMES expr
    (30) expr -> . expr GE expr
    (31) expr -> . expr LE expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr LT expr
    (34) expr -> . expr NE expr
    (35) expr -> . expr EQ expr
    (36) expr -> . expr / expr
    (37) expr -> . expr * expr
    (38) expr -> . expr - expr
    (39) expr -> . expr + expr
    (40) expr -> . expr '
    (41) expr -> . - expr
    (42) expr -> . STRING
    (43) expr -> . FLOAT
    (44) expr -> . INT
    (45) expr -> . ( expr )
    (46) expr -> . var
    (62) mat_fun -> . ONES
    (63) mat_fun -> . EYE
    (64) mat_fun -> . ZEROS
    (55) matrix -> . [ vectors ]
    (47) var -> . lists
    (48) var -> . ID
    (49) lists -> . ID [ expr , expr ]
    -               shift and go to state 34
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    INT             shift and go to state 37
    (               shift and go to state 32
    ONES            shift and go to state 39
    EYE             shift and go to state 40
    ZEROS           shift and go to state 41
    [               shift and go to state 42
    ID              shift and go to state 18

    expr                           shift and go to state 83
    mat_fun                        shift and go to state 31
    matrix                         shift and go to state 33
    var                            shift and go to state 38
    lists                          shift and go to state 21

state 51

    (19) return_i -> RETURN expr .
    (26) expr -> expr . DOTMINUS expr
    (27) expr -> expr . DOTPLUS expr
    (28) expr -> expr . DOTDIVIDE expr
    (29) expr -> expr . DOTTIMES expr
    (30) expr -> expr . GE expr
    (31) expr -> expr . LE expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . LT expr
    (34) expr -> expr . NE expr
    (35) expr -> expr . EQ expr
    (36) expr -> expr . / expr
    (37) expr -> expr . * expr
    (38) expr -> expr . - expr
    (39) expr -> expr . + expr
    (40) expr -> expr . '
    ;               reduce using rule 19 (return_i -> RETURN expr .)
    DOTMINUS        shift and go to state 55
    DOTPLUS         shift and go to state 56
    DOTDIVIDE       shift and go to state 57
    DOTTIMES        shift and go to state 58
    GE              shift and go to state 59
    LE              shift and go to state 60
    GT              shift and go to state 61
    LT              shift and go to state 62
    NE              shift and go to state 63
    EQ              shift and go to state 64
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68
    '               shift and go to state 69


state 52

    (15) if_i -> IF ( . expr ) instruction ELSE instruction
    (16) if_i -> IF ( . expr ) instruction
    (24) expr -> . mat_fun ( expr )
    (25) expr -> . matrix
    (26) expr -> . expr DOTMINUS expr
    (27) expr -> . expr DOTPLUS expr
    (28) expr -> . expr DOTDIVIDE expr
    (29) expr -> . expr DOTTIMES expr
    (30) expr -> . expr GE expr
    (31) expr -> . expr LE expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr LT expr
    (34) expr -> . expr NE expr
    (35) expr -> . expr EQ expr
    (36) expr -> . expr / expr
    (37) expr -> . expr * expr
    (38) expr -> . expr - expr
    (39) expr -> . expr + expr
    (40) expr -> . expr '
    (41) expr -> . - expr
    (42) expr -> . STRING
    (43) expr -> . FLOAT
    (44) expr -> . INT
    (45) expr -> . ( expr )
    (46) expr -> . var
    (62) mat_fun -> . ONES
    (63) mat_fun -> . EYE
    (64) mat_fun -> . ZEROS
    (55) matrix -> . [ vectors ]
    (47) var -> . lists
    (48) var -> . ID
    (49) lists -> . ID [ expr , expr ]
    -               shift and go to state 34
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    INT             shift and go to state 37
    (               shift and go to state 32
    ONES            shift and go to state 39
    EYE             shift and go to state 40
    ZEROS           shift and go to state 41
    [               shift and go to state 42
    ID              shift and go to state 18

    expr                           shift and go to state 84
    mat_fun                        shift and go to state 31
    matrix                         shift and go to state 33
    var                            shift and go to state 38
    lists                          shift and go to state 21

state 53

    (6) instruction -> { instructions } .
    {               reduce using rule 6 (instruction -> { instructions } .)
    CONTINUE        reduce using rule 6 (instruction -> { instructions } .)
    BREAK           reduce using rule 6 (instruction -> { instructions } .)
    PRINT           reduce using rule 6 (instruction -> { instructions } .)
    WHILE           reduce using rule 6 (instruction -> { instructions } .)
    FOR             reduce using rule 6 (instruction -> { instructions } .)
    RETURN          reduce using rule 6 (instruction -> { instructions } .)
    IF              reduce using rule 6 (instruction -> { instructions } .)
    ID              reduce using rule 6 (instruction -> { instructions } .)
    $end            reduce using rule 6 (instruction -> { instructions } .)
    }               reduce using rule 6 (instruction -> { instructions } .)
    ELSE            reduce using rule 6 (instruction -> { instructions } .)


state 54

    (23) printargs -> expr , . printargs
    (22) printargs -> . expr
    (23) printargs -> . expr , printargs
    (24) expr -> . mat_fun ( expr )
    (25) expr -> . matrix
    (26) expr -> . expr DOTMINUS expr
    (27) expr -> . expr DOTPLUS expr
    (28) expr -> . expr DOTDIVIDE expr
    (29) expr -> . expr DOTTIMES expr
    (30) expr -> . expr GE expr
    (31) expr -> . expr LE expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr LT expr
    (34) expr -> . expr NE expr
    (35) expr -> . expr EQ expr
    (36) expr -> . expr / expr
    (37) expr -> . expr * expr
    (38) expr -> . expr - expr
    (39) expr -> . expr + expr
    (40) expr -> . expr '
    (41) expr -> . - expr
    (42) expr -> . STRING
    (43) expr -> . FLOAT
    (44) expr -> . INT
    (45) expr -> . ( expr )
    (46) expr -> . var
    (62) mat_fun -> . ONES
    (63) mat_fun -> . EYE
    (64) mat_fun -> . ZEROS
    (55) matrix -> . [ vectors ]
    (47) var -> . lists
    (48) var -> . ID
    (49) lists -> . ID [ expr , expr ]
    -               shift and go to state 34
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    INT             shift and go to state 37
    (               shift and go to state 32
    ONES            shift and go to state 39
    EYE             shift and go to state 40
    ZEROS           shift and go to state 41
    [               shift and go to state 42
    ID              shift and go to state 18

    expr                           shift and go to state 30
    printargs                      shift and go to state 85
    mat_fun                        shift and go to state 31
    matrix                         shift and go to state 33
    var                            shift and go to state 38
    lists                          shift and go to state 21

state 55

    (26) expr -> expr DOTMINUS . expr
    (24) expr -> . mat_fun ( expr )
    (25) expr -> . matrix
    (26) expr -> . expr DOTMINUS expr
    (27) expr -> . expr DOTPLUS expr
    (28) expr -> . expr DOTDIVIDE expr
    (29) expr -> . expr DOTTIMES expr
    (30) expr -> . expr GE expr
    (31) expr -> . expr LE expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr LT expr
    (34) expr -> . expr NE expr
    (35) expr -> . expr EQ expr
    (36) expr -> . expr / expr
    (37) expr -> . expr * expr
    (38) expr -> . expr - expr
    (39) expr -> . expr + expr
    (40) expr -> . expr '
    (41) expr -> . - expr
    (42) expr -> . STRING
    (43) expr -> . FLOAT
    (44) expr -> . INT
    (45) expr -> . ( expr )
    (46) expr -> . var
    (62) mat_fun -> . ONES
    (63) mat_fun -> . EYE
    (64) mat_fun -> . ZEROS
    (55) matrix -> . [ vectors ]
    (47) var -> . lists
    (48) var -> . ID
    (49) lists -> . ID [ expr , expr ]
    -               shift and go to state 34
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    INT             shift and go to state 37
    (               shift and go to state 32
    ONES            shift and go to state 39
    EYE             shift and go to state 40
    ZEROS           shift and go to state 41
    [               shift and go to state 42
    ID              shift and go to state 18

    expr                           shift and go to state 86
    mat_fun                        shift and go to state 31
    matrix                         shift and go to state 33
    var                            shift and go to state 38
    lists                          shift and go to state 21

state 56

    (27) expr -> expr DOTPLUS . expr
    (24) expr -> . mat_fun ( expr )
    (25) expr -> . matrix
    (26) expr -> . expr DOTMINUS expr
    (27) expr -> . expr DOTPLUS expr
    (28) expr -> . expr DOTDIVIDE expr
    (29) expr -> . expr DOTTIMES expr
    (30) expr -> . expr GE expr
    (31) expr -> . expr LE expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr LT expr
    (34) expr -> . expr NE expr
    (35) expr -> . expr EQ expr
    (36) expr -> . expr / expr
    (37) expr -> . expr * expr
    (38) expr -> . expr - expr
    (39) expr -> . expr + expr
    (40) expr -> . expr '
    (41) expr -> . - expr
    (42) expr -> . STRING
    (43) expr -> . FLOAT
    (44) expr -> . INT
    (45) expr -> . ( expr )
    (46) expr -> . var
    (62) mat_fun -> . ONES
    (63) mat_fun -> . EYE
    (64) mat_fun -> . ZEROS
    (55) matrix -> . [ vectors ]
    (47) var -> . lists
    (48) var -> . ID
    (49) lists -> . ID [ expr , expr ]
    -               shift and go to state 34
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    INT             shift and go to state 37
    (               shift and go to state 32
    ONES            shift and go to state 39
    EYE             shift and go to state 40
    ZEROS           shift and go to state 41
    [               shift and go to state 42
    ID              shift and go to state 18

    expr                           shift and go to state 87
    mat_fun                        shift and go to state 31
    matrix                         shift and go to state 33
    var                            shift and go to state 38
    lists                          shift and go to state 21

state 57

    (28) expr -> expr DOTDIVIDE . expr
    (24) expr -> . mat_fun ( expr )
    (25) expr -> . matrix
    (26) expr -> . expr DOTMINUS expr
    (27) expr -> . expr DOTPLUS expr
    (28) expr -> . expr DOTDIVIDE expr
    (29) expr -> . expr DOTTIMES expr
    (30) expr -> . expr GE expr
    (31) expr -> . expr LE expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr LT expr
    (34) expr -> . expr NE expr
    (35) expr -> . expr EQ expr
    (36) expr -> . expr / expr
    (37) expr -> . expr * expr
    (38) expr -> . expr - expr
    (39) expr -> . expr + expr
    (40) expr -> . expr '
    (41) expr -> . - expr
    (42) expr -> . STRING
    (43) expr -> . FLOAT
    (44) expr -> . INT
    (45) expr -> . ( expr )
    (46) expr -> . var
    (62) mat_fun -> . ONES
    (63) mat_fun -> . EYE
    (64) mat_fun -> . ZEROS
    (55) matrix -> . [ vectors ]
    (47) var -> . lists
    (48) var -> . ID
    (49) lists -> . ID [ expr , expr ]
    -               shift and go to state 34
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    INT             shift and go to state 37
    (               shift and go to state 32
    ONES            shift and go to state 39
    EYE             shift and go to state 40
    ZEROS           shift and go to state 41
    [               shift and go to state 42
    ID              shift and go to state 18

    expr                           shift and go to state 88
    mat_fun                        shift and go to state 31
    matrix                         shift and go to state 33
    var                            shift and go to state 38
    lists                          shift and go to state 21

state 58

    (29) expr -> expr DOTTIMES . expr
    (24) expr -> . mat_fun ( expr )
    (25) expr -> . matrix
    (26) expr -> . expr DOTMINUS expr
    (27) expr -> . expr DOTPLUS expr
    (28) expr -> . expr DOTDIVIDE expr
    (29) expr -> . expr DOTTIMES expr
    (30) expr -> . expr GE expr
    (31) expr -> . expr LE expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr LT expr
    (34) expr -> . expr NE expr
    (35) expr -> . expr EQ expr
    (36) expr -> . expr / expr
    (37) expr -> . expr * expr
    (38) expr -> . expr - expr
    (39) expr -> . expr + expr
    (40) expr -> . expr '
    (41) expr -> . - expr
    (42) expr -> . STRING
    (43) expr -> . FLOAT
    (44) expr -> . INT
    (45) expr -> . ( expr )
    (46) expr -> . var
    (62) mat_fun -> . ONES
    (63) mat_fun -> . EYE
    (64) mat_fun -> . ZEROS
    (55) matrix -> . [ vectors ]
    (47) var -> . lists
    (48) var -> . ID
    (49) lists -> . ID [ expr , expr ]
    -               shift and go to state 34
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    INT             shift and go to state 37
    (               shift and go to state 32
    ONES            shift and go to state 39
    EYE             shift and go to state 40
    ZEROS           shift and go to state 41
    [               shift and go to state 42
    ID              shift and go to state 18

    expr                           shift and go to state 89
    mat_fun                        shift and go to state 31
    matrix                         shift and go to state 33
    var                            shift and go to state 38
    lists                          shift and go to state 21

state 59

    (30) expr -> expr GE . expr
    (24) expr -> . mat_fun ( expr )
    (25) expr -> . matrix
    (26) expr -> . expr DOTMINUS expr
    (27) expr -> . expr DOTPLUS expr
    (28) expr -> . expr DOTDIVIDE expr
    (29) expr -> . expr DOTTIMES expr
    (30) expr -> . expr GE expr
    (31) expr -> . expr LE expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr LT expr
    (34) expr -> . expr NE expr
    (35) expr -> . expr EQ expr
    (36) expr -> . expr / expr
    (37) expr -> . expr * expr
    (38) expr -> . expr - expr
    (39) expr -> . expr + expr
    (40) expr -> . expr '
    (41) expr -> . - expr
    (42) expr -> . STRING
    (43) expr -> . FLOAT
    (44) expr -> . INT
    (45) expr -> . ( expr )
    (46) expr -> . var
    (62) mat_fun -> . ONES
    (63) mat_fun -> . EYE
    (64) mat_fun -> . ZEROS
    (55) matrix -> . [ vectors ]
    (47) var -> . lists
    (48) var -> . ID
    (49) lists -> . ID [ expr , expr ]
    -               shift and go to state 34
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    INT             shift and go to state 37
    (               shift and go to state 32
    ONES            shift and go to state 39
    EYE             shift and go to state 40
    ZEROS           shift and go to state 41
    [               shift and go to state 42
    ID              shift and go to state 18

    expr                           shift and go to state 90
    mat_fun                        shift and go to state 31
    matrix                         shift and go to state 33
    var                            shift and go to state 38
    lists                          shift and go to state 21

state 60

    (31) expr -> expr LE . expr
    (24) expr -> . mat_fun ( expr )
    (25) expr -> . matrix
    (26) expr -> . expr DOTMINUS expr
    (27) expr -> . expr DOTPLUS expr
    (28) expr -> . expr DOTDIVIDE expr
    (29) expr -> . expr DOTTIMES expr
    (30) expr -> . expr GE expr
    (31) expr -> . expr LE expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr LT expr
    (34) expr -> . expr NE expr
    (35) expr -> . expr EQ expr
    (36) expr -> . expr / expr
    (37) expr -> . expr * expr
    (38) expr -> . expr - expr
    (39) expr -> . expr + expr
    (40) expr -> . expr '
    (41) expr -> . - expr
    (42) expr -> . STRING
    (43) expr -> . FLOAT
    (44) expr -> . INT
    (45) expr -> . ( expr )
    (46) expr -> . var
    (62) mat_fun -> . ONES
    (63) mat_fun -> . EYE
    (64) mat_fun -> . ZEROS
    (55) matrix -> . [ vectors ]
    (47) var -> . lists
    (48) var -> . ID
    (49) lists -> . ID [ expr , expr ]
    -               shift and go to state 34
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    INT             shift and go to state 37
    (               shift and go to state 32
    ONES            shift and go to state 39
    EYE             shift and go to state 40
    ZEROS           shift and go to state 41
    [               shift and go to state 42
    ID              shift and go to state 18

    expr                           shift and go to state 91
    mat_fun                        shift and go to state 31
    matrix                         shift and go to state 33
    var                            shift and go to state 38
    lists                          shift and go to state 21

state 61

    (32) expr -> expr GT . expr
    (24) expr -> . mat_fun ( expr )
    (25) expr -> . matrix
    (26) expr -> . expr DOTMINUS expr
    (27) expr -> . expr DOTPLUS expr
    (28) expr -> . expr DOTDIVIDE expr
    (29) expr -> . expr DOTTIMES expr
    (30) expr -> . expr GE expr
    (31) expr -> . expr LE expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr LT expr
    (34) expr -> . expr NE expr
    (35) expr -> . expr EQ expr
    (36) expr -> . expr / expr
    (37) expr -> . expr * expr
    (38) expr -> . expr - expr
    (39) expr -> . expr + expr
    (40) expr -> . expr '
    (41) expr -> . - expr
    (42) expr -> . STRING
    (43) expr -> . FLOAT
    (44) expr -> . INT
    (45) expr -> . ( expr )
    (46) expr -> . var
    (62) mat_fun -> . ONES
    (63) mat_fun -> . EYE
    (64) mat_fun -> . ZEROS
    (55) matrix -> . [ vectors ]
    (47) var -> . lists
    (48) var -> . ID
    (49) lists -> . ID [ expr , expr ]
    -               shift and go to state 34
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    INT             shift and go to state 37
    (               shift and go to state 32
    ONES            shift and go to state 39
    EYE             shift and go to state 40
    ZEROS           shift and go to state 41
    [               shift and go to state 42
    ID              shift and go to state 18

    expr                           shift and go to state 92
    mat_fun                        shift and go to state 31
    matrix                         shift and go to state 33
    var                            shift and go to state 38
    lists                          shift and go to state 21

state 62

    (33) expr -> expr LT . expr
    (24) expr -> . mat_fun ( expr )
    (25) expr -> . matrix
    (26) expr -> . expr DOTMINUS expr
    (27) expr -> . expr DOTPLUS expr
    (28) expr -> . expr DOTDIVIDE expr
    (29) expr -> . expr DOTTIMES expr
    (30) expr -> . expr GE expr
    (31) expr -> . expr LE expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr LT expr
    (34) expr -> . expr NE expr
    (35) expr -> . expr EQ expr
    (36) expr -> . expr / expr
    (37) expr -> . expr * expr
    (38) expr -> . expr - expr
    (39) expr -> . expr + expr
    (40) expr -> . expr '
    (41) expr -> . - expr
    (42) expr -> . STRING
    (43) expr -> . FLOAT
    (44) expr -> . INT
    (45) expr -> . ( expr )
    (46) expr -> . var
    (62) mat_fun -> . ONES
    (63) mat_fun -> . EYE
    (64) mat_fun -> . ZEROS
    (55) matrix -> . [ vectors ]
    (47) var -> . lists
    (48) var -> . ID
    (49) lists -> . ID [ expr , expr ]
    -               shift and go to state 34
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    INT             shift and go to state 37
    (               shift and go to state 32
    ONES            shift and go to state 39
    EYE             shift and go to state 40
    ZEROS           shift and go to state 41
    [               shift and go to state 42
    ID              shift and go to state 18

    expr                           shift and go to state 93
    mat_fun                        shift and go to state 31
    matrix                         shift and go to state 33
    var                            shift and go to state 38
    lists                          shift and go to state 21

state 63

    (34) expr -> expr NE . expr
    (24) expr -> . mat_fun ( expr )
    (25) expr -> . matrix
    (26) expr -> . expr DOTMINUS expr
    (27) expr -> . expr DOTPLUS expr
    (28) expr -> . expr DOTDIVIDE expr
    (29) expr -> . expr DOTTIMES expr
    (30) expr -> . expr GE expr
    (31) expr -> . expr LE expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr LT expr
    (34) expr -> . expr NE expr
    (35) expr -> . expr EQ expr
    (36) expr -> . expr / expr
    (37) expr -> . expr * expr
    (38) expr -> . expr - expr
    (39) expr -> . expr + expr
    (40) expr -> . expr '
    (41) expr -> . - expr
    (42) expr -> . STRING
    (43) expr -> . FLOAT
    (44) expr -> . INT
    (45) expr -> . ( expr )
    (46) expr -> . var
    (62) mat_fun -> . ONES
    (63) mat_fun -> . EYE
    (64) mat_fun -> . ZEROS
    (55) matrix -> . [ vectors ]
    (47) var -> . lists
    (48) var -> . ID
    (49) lists -> . ID [ expr , expr ]
    -               shift and go to state 34
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    INT             shift and go to state 37
    (               shift and go to state 32
    ONES            shift and go to state 39
    EYE             shift and go to state 40
    ZEROS           shift and go to state 41
    [               shift and go to state 42
    ID              shift and go to state 18

    expr                           shift and go to state 94
    mat_fun                        shift and go to state 31
    matrix                         shift and go to state 33
    var                            shift and go to state 38
    lists                          shift and go to state 21

state 64

    (35) expr -> expr EQ . expr
    (24) expr -> . mat_fun ( expr )
    (25) expr -> . matrix
    (26) expr -> . expr DOTMINUS expr
    (27) expr -> . expr DOTPLUS expr
    (28) expr -> . expr DOTDIVIDE expr
    (29) expr -> . expr DOTTIMES expr
    (30) expr -> . expr GE expr
    (31) expr -> . expr LE expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr LT expr
    (34) expr -> . expr NE expr
    (35) expr -> . expr EQ expr
    (36) expr -> . expr / expr
    (37) expr -> . expr * expr
    (38) expr -> . expr - expr
    (39) expr -> . expr + expr
    (40) expr -> . expr '
    (41) expr -> . - expr
    (42) expr -> . STRING
    (43) expr -> . FLOAT
    (44) expr -> . INT
    (45) expr -> . ( expr )
    (46) expr -> . var
    (62) mat_fun -> . ONES
    (63) mat_fun -> . EYE
    (64) mat_fun -> . ZEROS
    (55) matrix -> . [ vectors ]
    (47) var -> . lists
    (48) var -> . ID
    (49) lists -> . ID [ expr , expr ]
    -               shift and go to state 34
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    INT             shift and go to state 37
    (               shift and go to state 32
    ONES            shift and go to state 39
    EYE             shift and go to state 40
    ZEROS           shift and go to state 41
    [               shift and go to state 42
    ID              shift and go to state 18

    expr                           shift and go to state 95
    mat_fun                        shift and go to state 31
    matrix                         shift and go to state 33
    var                            shift and go to state 38
    lists                          shift and go to state 21

state 65

    (36) expr -> expr / . expr
    (24) expr -> . mat_fun ( expr )
    (25) expr -> . matrix
    (26) expr -> . expr DOTMINUS expr
    (27) expr -> . expr DOTPLUS expr
    (28) expr -> . expr DOTDIVIDE expr
    (29) expr -> . expr DOTTIMES expr
    (30) expr -> . expr GE expr
    (31) expr -> . expr LE expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr LT expr
    (34) expr -> . expr NE expr
    (35) expr -> . expr EQ expr
    (36) expr -> . expr / expr
    (37) expr -> . expr * expr
    (38) expr -> . expr - expr
    (39) expr -> . expr + expr
    (40) expr -> . expr '
    (41) expr -> . - expr
    (42) expr -> . STRING
    (43) expr -> . FLOAT
    (44) expr -> . INT
    (45) expr -> . ( expr )
    (46) expr -> . var
    (62) mat_fun -> . ONES
    (63) mat_fun -> . EYE
    (64) mat_fun -> . ZEROS
    (55) matrix -> . [ vectors ]
    (47) var -> . lists
    (48) var -> . ID
    (49) lists -> . ID [ expr , expr ]
    -               shift and go to state 34
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    INT             shift and go to state 37
    (               shift and go to state 32
    ONES            shift and go to state 39
    EYE             shift and go to state 40
    ZEROS           shift and go to state 41
    [               shift and go to state 42
    ID              shift and go to state 18

    expr                           shift and go to state 96
    mat_fun                        shift and go to state 31
    matrix                         shift and go to state 33
    var                            shift and go to state 38
    lists                          shift and go to state 21

state 66

    (37) expr -> expr * . expr
    (24) expr -> . mat_fun ( expr )
    (25) expr -> . matrix
    (26) expr -> . expr DOTMINUS expr
    (27) expr -> . expr DOTPLUS expr
    (28) expr -> . expr DOTDIVIDE expr
    (29) expr -> . expr DOTTIMES expr
    (30) expr -> . expr GE expr
    (31) expr -> . expr LE expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr LT expr
    (34) expr -> . expr NE expr
    (35) expr -> . expr EQ expr
    (36) expr -> . expr / expr
    (37) expr -> . expr * expr
    (38) expr -> . expr - expr
    (39) expr -> . expr + expr
    (40) expr -> . expr '
    (41) expr -> . - expr
    (42) expr -> . STRING
    (43) expr -> . FLOAT
    (44) expr -> . INT
    (45) expr -> . ( expr )
    (46) expr -> . var
    (62) mat_fun -> . ONES
    (63) mat_fun -> . EYE
    (64) mat_fun -> . ZEROS
    (55) matrix -> . [ vectors ]
    (47) var -> . lists
    (48) var -> . ID
    (49) lists -> . ID [ expr , expr ]
    -               shift and go to state 34
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    INT             shift and go to state 37
    (               shift and go to state 32
    ONES            shift and go to state 39
    EYE             shift and go to state 40
    ZEROS           shift and go to state 41
    [               shift and go to state 42
    ID              shift and go to state 18

    expr                           shift and go to state 97
    mat_fun                        shift and go to state 31
    matrix                         shift and go to state 33
    var                            shift and go to state 38
    lists                          shift and go to state 21

state 67

    (38) expr -> expr - . expr
    (24) expr -> . mat_fun ( expr )
    (25) expr -> . matrix
    (26) expr -> . expr DOTMINUS expr
    (27) expr -> . expr DOTPLUS expr
    (28) expr -> . expr DOTDIVIDE expr
    (29) expr -> . expr DOTTIMES expr
    (30) expr -> . expr GE expr
    (31) expr -> . expr LE expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr LT expr
    (34) expr -> . expr NE expr
    (35) expr -> . expr EQ expr
    (36) expr -> . expr / expr
    (37) expr -> . expr * expr
    (38) expr -> . expr - expr
    (39) expr -> . expr + expr
    (40) expr -> . expr '
    (41) expr -> . - expr
    (42) expr -> . STRING
    (43) expr -> . FLOAT
    (44) expr -> . INT
    (45) expr -> . ( expr )
    (46) expr -> . var
    (62) mat_fun -> . ONES
    (63) mat_fun -> . EYE
    (64) mat_fun -> . ZEROS
    (55) matrix -> . [ vectors ]
    (47) var -> . lists
    (48) var -> . ID
    (49) lists -> . ID [ expr , expr ]
    -               shift and go to state 34
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    INT             shift and go to state 37
    (               shift and go to state 32
    ONES            shift and go to state 39
    EYE             shift and go to state 40
    ZEROS           shift and go to state 41
    [               shift and go to state 42
    ID              shift and go to state 18

    expr                           shift and go to state 98
    mat_fun                        shift and go to state 31
    matrix                         shift and go to state 33
    var                            shift and go to state 38
    lists                          shift and go to state 21

state 68

    (39) expr -> expr + . expr
    (24) expr -> . mat_fun ( expr )
    (25) expr -> . matrix
    (26) expr -> . expr DOTMINUS expr
    (27) expr -> . expr DOTPLUS expr
    (28) expr -> . expr DOTDIVIDE expr
    (29) expr -> . expr DOTTIMES expr
    (30) expr -> . expr GE expr
    (31) expr -> . expr LE expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr LT expr
    (34) expr -> . expr NE expr
    (35) expr -> . expr EQ expr
    (36) expr -> . expr / expr
    (37) expr -> . expr * expr
    (38) expr -> . expr - expr
    (39) expr -> . expr + expr
    (40) expr -> . expr '
    (41) expr -> . - expr
    (42) expr -> . STRING
    (43) expr -> . FLOAT
    (44) expr -> . INT
    (45) expr -> . ( expr )
    (46) expr -> . var
    (62) mat_fun -> . ONES
    (63) mat_fun -> . EYE
    (64) mat_fun -> . ZEROS
    (55) matrix -> . [ vectors ]
    (47) var -> . lists
    (48) var -> . ID
    (49) lists -> . ID [ expr , expr ]
    -               shift and go to state 34
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    INT             shift and go to state 37
    (               shift and go to state 32
    ONES            shift and go to state 39
    EYE             shift and go to state 40
    ZEROS           shift and go to state 41
    [               shift and go to state 42
    ID              shift and go to state 18

    expr                           shift and go to state 99
    mat_fun                        shift and go to state 31
    matrix                         shift and go to state 33
    var                            shift and go to state 38
    lists                          shift and go to state 21

state 69

    (40) expr -> expr ' .
    ,               reduce using rule 40 (expr -> expr ' .)
    DOTMINUS        reduce using rule 40 (expr -> expr ' .)
    DOTPLUS         reduce using rule 40 (expr -> expr ' .)
    DOTDIVIDE       reduce using rule 40 (expr -> expr ' .)
    DOTTIMES        reduce using rule 40 (expr -> expr ' .)
    GE              reduce using rule 40 (expr -> expr ' .)
    LE              reduce using rule 40 (expr -> expr ' .)
    GT              reduce using rule 40 (expr -> expr ' .)
    LT              reduce using rule 40 (expr -> expr ' .)
    NE              reduce using rule 40 (expr -> expr ' .)
    EQ              reduce using rule 40 (expr -> expr ' .)
    /               reduce using rule 40 (expr -> expr ' .)
    *               reduce using rule 40 (expr -> expr ' .)
    -               reduce using rule 40 (expr -> expr ' .)
    +               reduce using rule 40 (expr -> expr ' .)
    '               reduce using rule 40 (expr -> expr ' .)
    ;               reduce using rule 40 (expr -> expr ' .)
    )               reduce using rule 40 (expr -> expr ' .)
    ]               reduce using rule 40 (expr -> expr ' .)
    :               reduce using rule 40 (expr -> expr ' .)
    {               reduce using rule 40 (expr -> expr ' .)
    CONTINUE        reduce using rule 40 (expr -> expr ' .)
    BREAK           reduce using rule 40 (expr -> expr ' .)
    PRINT           reduce using rule 40 (expr -> expr ' .)
    WHILE           reduce using rule 40 (expr -> expr ' .)
    FOR             reduce using rule 40 (expr -> expr ' .)
    RETURN          reduce using rule 40 (expr -> expr ' .)
    IF              reduce using rule 40 (expr -> expr ' .)
    ID              reduce using rule 40 (expr -> expr ' .)


state 70

    (24) expr -> mat_fun ( . expr )
    (24) expr -> . mat_fun ( expr )
    (25) expr -> . matrix
    (26) expr -> . expr DOTMINUS expr
    (27) expr -> . expr DOTPLUS expr
    (28) expr -> . expr DOTDIVIDE expr
    (29) expr -> . expr DOTTIMES expr
    (30) expr -> . expr GE expr
    (31) expr -> . expr LE expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr LT expr
    (34) expr -> . expr NE expr
    (35) expr -> . expr EQ expr
    (36) expr -> . expr / expr
    (37) expr -> . expr * expr
    (38) expr -> . expr - expr
    (39) expr -> . expr + expr
    (40) expr -> . expr '
    (41) expr -> . - expr
    (42) expr -> . STRING
    (43) expr -> . FLOAT
    (44) expr -> . INT
    (45) expr -> . ( expr )
    (46) expr -> . var
    (62) mat_fun -> . ONES
    (63) mat_fun -> . EYE
    (64) mat_fun -> . ZEROS
    (55) matrix -> . [ vectors ]
    (47) var -> . lists
    (48) var -> . ID
    (49) lists -> . ID [ expr , expr ]
    -               shift and go to state 34
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    INT             shift and go to state 37
    (               shift and go to state 32
    ONES            shift and go to state 39
    EYE             shift and go to state 40
    ZEROS           shift and go to state 41
    [               shift and go to state 42
    ID              shift and go to state 18

    mat_fun                        shift and go to state 31
    expr                           shift and go to state 100
    matrix                         shift and go to state 33
    var                            shift and go to state 38
    lists                          shift and go to state 21

state 71

    (45) expr -> ( expr . )
    (26) expr -> expr . DOTMINUS expr
    (27) expr -> expr . DOTPLUS expr
    (28) expr -> expr . DOTDIVIDE expr
    (29) expr -> expr . DOTTIMES expr
    (30) expr -> expr . GE expr
    (31) expr -> expr . LE expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . LT expr
    (34) expr -> expr . NE expr
    (35) expr -> expr . EQ expr
    (36) expr -> expr . / expr
    (37) expr -> expr . * expr
    (38) expr -> expr . - expr
    (39) expr -> expr . + expr
    (40) expr -> expr . '
    )               shift and go to state 101
    DOTMINUS        shift and go to state 55
    DOTPLUS         shift and go to state 56
    DOTDIVIDE       shift and go to state 57
    DOTTIMES        shift and go to state 58
    GE              shift and go to state 59
    LE              shift and go to state 60
    GT              shift and go to state 61
    LT              shift and go to state 62
    NE              shift and go to state 63
    EQ              shift and go to state 64
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68
    '               shift and go to state 69


state 72

    (41) expr -> - expr .
    (26) expr -> expr . DOTMINUS expr
    (27) expr -> expr . DOTPLUS expr
    (28) expr -> expr . DOTDIVIDE expr
    (29) expr -> expr . DOTTIMES expr
    (30) expr -> expr . GE expr
    (31) expr -> expr . LE expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . LT expr
    (34) expr -> expr . NE expr
    (35) expr -> expr . EQ expr
    (36) expr -> expr . / expr
    (37) expr -> expr . * expr
    (38) expr -> expr . - expr
    (39) expr -> expr . + expr
    (40) expr -> expr . '
    ,               reduce using rule 41 (expr -> - expr .)
    DOTMINUS        reduce using rule 41 (expr -> - expr .)
    DOTPLUS         reduce using rule 41 (expr -> - expr .)
    DOTDIVIDE       reduce using rule 41 (expr -> - expr .)
    DOTTIMES        reduce using rule 41 (expr -> - expr .)
    GE              reduce using rule 41 (expr -> - expr .)
    LE              reduce using rule 41 (expr -> - expr .)
    GT              reduce using rule 41 (expr -> - expr .)
    LT              reduce using rule 41 (expr -> - expr .)
    NE              reduce using rule 41 (expr -> - expr .)
    EQ              reduce using rule 41 (expr -> - expr .)
    /               reduce using rule 41 (expr -> - expr .)
    *               reduce using rule 41 (expr -> - expr .)
    -               reduce using rule 41 (expr -> - expr .)
    +               reduce using rule 41 (expr -> - expr .)
    '               reduce using rule 41 (expr -> - expr .)
    ;               reduce using rule 41 (expr -> - expr .)
    )               reduce using rule 41 (expr -> - expr .)
    ]               reduce using rule 41 (expr -> - expr .)
    :               reduce using rule 41 (expr -> - expr .)
    {               reduce using rule 41 (expr -> - expr .)
    CONTINUE        reduce using rule 41 (expr -> - expr .)
    BREAK           reduce using rule 41 (expr -> - expr .)
    PRINT           reduce using rule 41 (expr -> - expr .)
    WHILE           reduce using rule 41 (expr -> - expr .)
    FOR             reduce using rule 41 (expr -> - expr .)
    RETURN          reduce using rule 41 (expr -> - expr .)
    IF              reduce using rule 41 (expr -> - expr .)
    ID              reduce using rule 41 (expr -> - expr .)


state 73

    (58) vector -> [ . variables ]
    (59) variables -> . variable
    (60) variables -> . variables , variable
    (61) variable -> . expr
    (24) expr -> . mat_fun ( expr )
    (25) expr -> . matrix
    (26) expr -> . expr DOTMINUS expr
    (27) expr -> . expr DOTPLUS expr
    (28) expr -> . expr DOTDIVIDE expr
    (29) expr -> . expr DOTTIMES expr
    (30) expr -> . expr GE expr
    (31) expr -> . expr LE expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr LT expr
    (34) expr -> . expr NE expr
    (35) expr -> . expr EQ expr
    (36) expr -> . expr / expr
    (37) expr -> . expr * expr
    (38) expr -> . expr - expr
    (39) expr -> . expr + expr
    (40) expr -> . expr '
    (41) expr -> . - expr
    (42) expr -> . STRING
    (43) expr -> . FLOAT
    (44) expr -> . INT
    (45) expr -> . ( expr )
    (46) expr -> . var
    (62) mat_fun -> . ONES
    (63) mat_fun -> . EYE
    (64) mat_fun -> . ZEROS
    (55) matrix -> . [ vectors ]
    (47) var -> . lists
    (48) var -> . ID
    (49) lists -> . ID [ expr , expr ]
    -               shift and go to state 34
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    INT             shift and go to state 37
    (               shift and go to state 32
    ONES            shift and go to state 39
    EYE             shift and go to state 40
    ZEROS           shift and go to state 41
    [               shift and go to state 42
    ID              shift and go to state 18

    variables                      shift and go to state 102
    variable                       shift and go to state 103
    expr                           shift and go to state 104
    mat_fun                        shift and go to state 31
    matrix                         shift and go to state 33
    var                            shift and go to state 38
    lists                          shift and go to state 21

state 74

    (55) matrix -> [ vectors . ]
    (57) vectors -> vectors . , vector
    ]               shift and go to state 105
    ,               shift and go to state 106


state 75

    (56) vectors -> vector .
    ]               reduce using rule 56 (vectors -> vector .)
    ,               reduce using rule 56 (vectors -> vector .)


state 76

    (50) assign -> var DIVIDEASSIGN expr .
    (26) expr -> expr . DOTMINUS expr
    (27) expr -> expr . DOTPLUS expr
    (28) expr -> expr . DOTDIVIDE expr
    (29) expr -> expr . DOTTIMES expr
    (30) expr -> expr . GE expr
    (31) expr -> expr . LE expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . LT expr
    (34) expr -> expr . NE expr
    (35) expr -> expr . EQ expr
    (36) expr -> expr . / expr
    (37) expr -> expr . * expr
    (38) expr -> expr . - expr
    (39) expr -> expr . + expr
    (40) expr -> expr . '
    ;               reduce using rule 50 (assign -> var DIVIDEASSIGN expr .)
    DOTMINUS        shift and go to state 55
    DOTPLUS         shift and go to state 56
    DOTDIVIDE       shift and go to state 57
    DOTTIMES        shift and go to state 58
    GE              shift and go to state 59
    LE              shift and go to state 60
    GT              shift and go to state 61
    LT              shift and go to state 62
    NE              shift and go to state 63
    EQ              shift and go to state 64
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68
    '               shift and go to state 69


state 77

    (51) assign -> var TIMESASSIGN expr .
    (26) expr -> expr . DOTMINUS expr
    (27) expr -> expr . DOTPLUS expr
    (28) expr -> expr . DOTDIVIDE expr
    (29) expr -> expr . DOTTIMES expr
    (30) expr -> expr . GE expr
    (31) expr -> expr . LE expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . LT expr
    (34) expr -> expr . NE expr
    (35) expr -> expr . EQ expr
    (36) expr -> expr . / expr
    (37) expr -> expr . * expr
    (38) expr -> expr . - expr
    (39) expr -> expr . + expr
    (40) expr -> expr . '
    ;               reduce using rule 51 (assign -> var TIMESASSIGN expr .)
    DOTMINUS        shift and go to state 55
    DOTPLUS         shift and go to state 56
    DOTDIVIDE       shift and go to state 57
    DOTTIMES        shift and go to state 58
    GE              shift and go to state 59
    LE              shift and go to state 60
    GT              shift and go to state 61
    LT              shift and go to state 62
    NE              shift and go to state 63
    EQ              shift and go to state 64
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68
    '               shift and go to state 69


state 78

    (52) assign -> var MINUSASSIGN expr .
    (26) expr -> expr . DOTMINUS expr
    (27) expr -> expr . DOTPLUS expr
    (28) expr -> expr . DOTDIVIDE expr
    (29) expr -> expr . DOTTIMES expr
    (30) expr -> expr . GE expr
    (31) expr -> expr . LE expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . LT expr
    (34) expr -> expr . NE expr
    (35) expr -> expr . EQ expr
    (36) expr -> expr . / expr
    (37) expr -> expr . * expr
    (38) expr -> expr . - expr
    (39) expr -> expr . + expr
    (40) expr -> expr . '
    ;               reduce using rule 52 (assign -> var MINUSASSIGN expr .)
    DOTMINUS        shift and go to state 55
    DOTPLUS         shift and go to state 56
    DOTDIVIDE       shift and go to state 57
    DOTTIMES        shift and go to state 58
    GE              shift and go to state 59
    LE              shift and go to state 60
    GT              shift and go to state 61
    LT              shift and go to state 62
    NE              shift and go to state 63
    EQ              shift and go to state 64
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68
    '               shift and go to state 69


state 79

    (53) assign -> var PLUSASSIGN expr .
    (26) expr -> expr . DOTMINUS expr
    (27) expr -> expr . DOTPLUS expr
    (28) expr -> expr . DOTDIVIDE expr
    (29) expr -> expr . DOTTIMES expr
    (30) expr -> expr . GE expr
    (31) expr -> expr . LE expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . LT expr
    (34) expr -> expr . NE expr
    (35) expr -> expr . EQ expr
    (36) expr -> expr . / expr
    (37) expr -> expr . * expr
    (38) expr -> expr . - expr
    (39) expr -> expr . + expr
    (40) expr -> expr . '
    ;               reduce using rule 53 (assign -> var PLUSASSIGN expr .)
    DOTMINUS        shift and go to state 55
    DOTPLUS         shift and go to state 56
    DOTDIVIDE       shift and go to state 57
    DOTTIMES        shift and go to state 58
    GE              shift and go to state 59
    LE              shift and go to state 60
    GT              shift and go to state 61
    LT              shift and go to state 62
    NE              shift and go to state 63
    EQ              shift and go to state 64
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68
    '               shift and go to state 69


state 80

    (54) assign -> var = expr .
    (26) expr -> expr . DOTMINUS expr
    (27) expr -> expr . DOTPLUS expr
    (28) expr -> expr . DOTDIVIDE expr
    (29) expr -> expr . DOTTIMES expr
    (30) expr -> expr . GE expr
    (31) expr -> expr . LE expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . LT expr
    (34) expr -> expr . NE expr
    (35) expr -> expr . EQ expr
    (36) expr -> expr . / expr
    (37) expr -> expr . * expr
    (38) expr -> expr . - expr
    (39) expr -> expr . + expr
    (40) expr -> expr . '
    ;               reduce using rule 54 (assign -> var = expr .)
    DOTMINUS        shift and go to state 55
    DOTPLUS         shift and go to state 56
    DOTDIVIDE       shift and go to state 57
    DOTTIMES        shift and go to state 58
    GE              shift and go to state 59
    LE              shift and go to state 60
    GT              shift and go to state 61
    LT              shift and go to state 62
    NE              shift and go to state 63
    EQ              shift and go to state 64
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68
    '               shift and go to state 69


state 81

    (17) while_l -> WHILE ( expr . ) instruction
    (26) expr -> expr . DOTMINUS expr
    (27) expr -> expr . DOTPLUS expr
    (28) expr -> expr . DOTDIVIDE expr
    (29) expr -> expr . DOTTIMES expr
    (30) expr -> expr . GE expr
    (31) expr -> expr . LE expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . LT expr
    (34) expr -> expr . NE expr
    (35) expr -> expr . EQ expr
    (36) expr -> expr . / expr
    (37) expr -> expr . * expr
    (38) expr -> expr . - expr
    (39) expr -> expr . + expr
    (40) expr -> expr . '
    )               shift and go to state 107
    DOTMINUS        shift and go to state 55
    DOTPLUS         shift and go to state 56
    DOTDIVIDE       shift and go to state 57
    DOTTIMES        shift and go to state 58
    GE              shift and go to state 59
    LE              shift and go to state 60
    GT              shift and go to state 61
    LT              shift and go to state 62
    NE              shift and go to state 63
    EQ              shift and go to state 64
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68
    '               shift and go to state 69


state 82

    (18) for_l -> FOR ID = . expr : expr instruction
    (24) expr -> . mat_fun ( expr )
    (25) expr -> . matrix
    (26) expr -> . expr DOTMINUS expr
    (27) expr -> . expr DOTPLUS expr
    (28) expr -> . expr DOTDIVIDE expr
    (29) expr -> . expr DOTTIMES expr
    (30) expr -> . expr GE expr
    (31) expr -> . expr LE expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr LT expr
    (34) expr -> . expr NE expr
    (35) expr -> . expr EQ expr
    (36) expr -> . expr / expr
    (37) expr -> . expr * expr
    (38) expr -> . expr - expr
    (39) expr -> . expr + expr
    (40) expr -> . expr '
    (41) expr -> . - expr
    (42) expr -> . STRING
    (43) expr -> . FLOAT
    (44) expr -> . INT
    (45) expr -> . ( expr )
    (46) expr -> . var
    (62) mat_fun -> . ONES
    (63) mat_fun -> . EYE
    (64) mat_fun -> . ZEROS
    (55) matrix -> . [ vectors ]
    (47) var -> . lists
    (48) var -> . ID
    (49) lists -> . ID [ expr , expr ]
    -               shift and go to state 34
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    INT             shift and go to state 37
    (               shift and go to state 32
    ONES            shift and go to state 39
    EYE             shift and go to state 40
    ZEROS           shift and go to state 41
    [               shift and go to state 42
    ID              shift and go to state 18

    expr                           shift and go to state 108
    mat_fun                        shift and go to state 31
    matrix                         shift and go to state 33
    var                            shift and go to state 38
    lists                          shift and go to state 21

state 83

    (49) lists -> ID [ expr . , expr ]
    (26) expr -> expr . DOTMINUS expr
    (27) expr -> expr . DOTPLUS expr
    (28) expr -> expr . DOTDIVIDE expr
    (29) expr -> expr . DOTTIMES expr
    (30) expr -> expr . GE expr
    (31) expr -> expr . LE expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . LT expr
    (34) expr -> expr . NE expr
    (35) expr -> expr . EQ expr
    (36) expr -> expr . / expr
    (37) expr -> expr . * expr
    (38) expr -> expr . - expr
    (39) expr -> expr . + expr
    (40) expr -> expr . '
    ,               shift and go to state 109
    DOTMINUS        shift and go to state 55
    DOTPLUS         shift and go to state 56
    DOTDIVIDE       shift and go to state 57
    DOTTIMES        shift and go to state 58
    GE              shift and go to state 59
    LE              shift and go to state 60
    GT              shift and go to state 61
    LT              shift and go to state 62
    NE              shift and go to state 63
    EQ              shift and go to state 64
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68
    '               shift and go to state 69


state 84

    (15) if_i -> IF ( expr . ) instruction ELSE instruction
    (16) if_i -> IF ( expr . ) instruction
    (26) expr -> expr . DOTMINUS expr
    (27) expr -> expr . DOTPLUS expr
    (28) expr -> expr . DOTDIVIDE expr
    (29) expr -> expr . DOTTIMES expr
    (30) expr -> expr . GE expr
    (31) expr -> expr . LE expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . LT expr
    (34) expr -> expr . NE expr
    (35) expr -> expr . EQ expr
    (36) expr -> expr . / expr
    (37) expr -> expr . * expr
    (38) expr -> expr . - expr
    (39) expr -> expr . + expr
    (40) expr -> expr . '
    )               shift and go to state 110
    DOTMINUS        shift and go to state 55
    DOTPLUS         shift and go to state 56
    DOTDIVIDE       shift and go to state 57
    DOTTIMES        shift and go to state 58
    GE              shift and go to state 59
    LE              shift and go to state 60
    GT              shift and go to state 61
    LT              shift and go to state 62
    NE              shift and go to state 63
    EQ              shift and go to state 64
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68
    '               shift and go to state 69


state 85

    (23) printargs -> expr , printargs .
    ;               reduce using rule 23 (printargs -> expr , printargs .)


state 86

    (26) expr -> expr DOTMINUS expr .
    (26) expr -> expr . DOTMINUS expr
    (27) expr -> expr . DOTPLUS expr
    (28) expr -> expr . DOTDIVIDE expr
    (29) expr -> expr . DOTTIMES expr
    (30) expr -> expr . GE expr
    (31) expr -> expr . LE expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . LT expr
    (34) expr -> expr . NE expr
    (35) expr -> expr . EQ expr
    (36) expr -> expr . / expr
    (37) expr -> expr . * expr
    (38) expr -> expr . - expr
    (39) expr -> expr . + expr
    (40) expr -> expr . '
    ,               reduce using rule 26 (expr -> expr DOTMINUS expr .)
    DOTMINUS        reduce using rule 26 (expr -> expr DOTMINUS expr .)
    DOTPLUS         reduce using rule 26 (expr -> expr DOTMINUS expr .)
    GE              reduce using rule 26 (expr -> expr DOTMINUS expr .)
    LE              reduce using rule 26 (expr -> expr DOTMINUS expr .)
    GT              reduce using rule 26 (expr -> expr DOTMINUS expr .)
    LT              reduce using rule 26 (expr -> expr DOTMINUS expr .)
    NE              reduce using rule 26 (expr -> expr DOTMINUS expr .)
    EQ              reduce using rule 26 (expr -> expr DOTMINUS expr .)
    -               reduce using rule 26 (expr -> expr DOTMINUS expr .)
    +               reduce using rule 26 (expr -> expr DOTMINUS expr .)
    '               reduce using rule 26 (expr -> expr DOTMINUS expr .)
    ;               reduce using rule 26 (expr -> expr DOTMINUS expr .)
    )               reduce using rule 26 (expr -> expr DOTMINUS expr .)
    ]               reduce using rule 26 (expr -> expr DOTMINUS expr .)
    :               reduce using rule 26 (expr -> expr DOTMINUS expr .)
    {               reduce using rule 26 (expr -> expr DOTMINUS expr .)
    CONTINUE        reduce using rule 26 (expr -> expr DOTMINUS expr .)
    BREAK           reduce using rule 26 (expr -> expr DOTMINUS expr .)
    PRINT           reduce using rule 26 (expr -> expr DOTMINUS expr .)
    WHILE           reduce using rule 26 (expr -> expr DOTMINUS expr .)
    FOR             reduce using rule 26 (expr -> expr DOTMINUS expr .)
    RETURN          reduce using rule 26 (expr -> expr DOTMINUS expr .)
    IF              reduce using rule 26 (expr -> expr DOTMINUS expr .)
    ID              reduce using rule 26 (expr -> expr DOTMINUS expr .)
    DOTDIVIDE       shift and go to state 57
    DOTTIMES        shift and go to state 58
    /               shift and go to state 65
    *               shift and go to state 66


state 87

    (27) expr -> expr DOTPLUS expr .
    (26) expr -> expr . DOTMINUS expr
    (27) expr -> expr . DOTPLUS expr
    (28) expr -> expr . DOTDIVIDE expr
    (29) expr -> expr . DOTTIMES expr
    (30) expr -> expr . GE expr
    (31) expr -> expr . LE expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . LT expr
    (34) expr -> expr . NE expr
    (35) expr -> expr . EQ expr
    (36) expr -> expr . / expr
    (37) expr -> expr . * expr
    (38) expr -> expr . - expr
    (39) expr -> expr . + expr
    (40) expr -> expr . '
    ,               reduce using rule 27 (expr -> expr DOTPLUS expr .)
    DOTMINUS        reduce using rule 27 (expr -> expr DOTPLUS expr .)
    DOTPLUS         reduce using rule 27 (expr -> expr DOTPLUS expr .)
    GE              reduce using rule 27 (expr -> expr DOTPLUS expr .)
    LE              reduce using rule 27 (expr -> expr DOTPLUS expr .)
    GT              reduce using rule 27 (expr -> expr DOTPLUS expr .)
    LT              reduce using rule 27 (expr -> expr DOTPLUS expr .)
    NE              reduce using rule 27 (expr -> expr DOTPLUS expr .)
    EQ              reduce using rule 27 (expr -> expr DOTPLUS expr .)
    -               reduce using rule 27 (expr -> expr DOTPLUS expr .)
    +               reduce using rule 27 (expr -> expr DOTPLUS expr .)
    '               reduce using rule 27 (expr -> expr DOTPLUS expr .)
    ;               reduce using rule 27 (expr -> expr DOTPLUS expr .)
    )               reduce using rule 27 (expr -> expr DOTPLUS expr .)
    ]               reduce using rule 27 (expr -> expr DOTPLUS expr .)
    :               reduce using rule 27 (expr -> expr DOTPLUS expr .)
    {               reduce using rule 27 (expr -> expr DOTPLUS expr .)
    CONTINUE        reduce using rule 27 (expr -> expr DOTPLUS expr .)
    BREAK           reduce using rule 27 (expr -> expr DOTPLUS expr .)
    PRINT           reduce using rule 27 (expr -> expr DOTPLUS expr .)
    WHILE           reduce using rule 27 (expr -> expr DOTPLUS expr .)
    FOR             reduce using rule 27 (expr -> expr DOTPLUS expr .)
    RETURN          reduce using rule 27 (expr -> expr DOTPLUS expr .)
    IF              reduce using rule 27 (expr -> expr DOTPLUS expr .)
    ID              reduce using rule 27 (expr -> expr DOTPLUS expr .)
    DOTDIVIDE       shift and go to state 57
    DOTTIMES        shift and go to state 58
    /               shift and go to state 65
    *               shift and go to state 66


state 88

    (28) expr -> expr DOTDIVIDE expr .
    (26) expr -> expr . DOTMINUS expr
    (27) expr -> expr . DOTPLUS expr
    (28) expr -> expr . DOTDIVIDE expr
    (29) expr -> expr . DOTTIMES expr
    (30) expr -> expr . GE expr
    (31) expr -> expr . LE expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . LT expr
    (34) expr -> expr . NE expr
    (35) expr -> expr . EQ expr
    (36) expr -> expr . / expr
    (37) expr -> expr . * expr
    (38) expr -> expr . - expr
    (39) expr -> expr . + expr
    (40) expr -> expr . '
    ,               reduce using rule 28 (expr -> expr DOTDIVIDE expr .)
    DOTMINUS        reduce using rule 28 (expr -> expr DOTDIVIDE expr .)
    DOTPLUS         reduce using rule 28 (expr -> expr DOTDIVIDE expr .)
    DOTDIVIDE       reduce using rule 28 (expr -> expr DOTDIVIDE expr .)
    DOTTIMES        reduce using rule 28 (expr -> expr DOTDIVIDE expr .)
    GE              reduce using rule 28 (expr -> expr DOTDIVIDE expr .)
    LE              reduce using rule 28 (expr -> expr DOTDIVIDE expr .)
    GT              reduce using rule 28 (expr -> expr DOTDIVIDE expr .)
    LT              reduce using rule 28 (expr -> expr DOTDIVIDE expr .)
    NE              reduce using rule 28 (expr -> expr DOTDIVIDE expr .)
    EQ              reduce using rule 28 (expr -> expr DOTDIVIDE expr .)
    /               reduce using rule 28 (expr -> expr DOTDIVIDE expr .)
    *               reduce using rule 28 (expr -> expr DOTDIVIDE expr .)
    -               reduce using rule 28 (expr -> expr DOTDIVIDE expr .)
    +               reduce using rule 28 (expr -> expr DOTDIVIDE expr .)
    '               reduce using rule 28 (expr -> expr DOTDIVIDE expr .)
    ;               reduce using rule 28 (expr -> expr DOTDIVIDE expr .)
    )               reduce using rule 28 (expr -> expr DOTDIVIDE expr .)
    ]               reduce using rule 28 (expr -> expr DOTDIVIDE expr .)
    :               reduce using rule 28 (expr -> expr DOTDIVIDE expr .)
    {               reduce using rule 28 (expr -> expr DOTDIVIDE expr .)
    CONTINUE        reduce using rule 28 (expr -> expr DOTDIVIDE expr .)
    BREAK           reduce using rule 28 (expr -> expr DOTDIVIDE expr .)
    PRINT           reduce using rule 28 (expr -> expr DOTDIVIDE expr .)
    WHILE           reduce using rule 28 (expr -> expr DOTDIVIDE expr .)
    FOR             reduce using rule 28 (expr -> expr DOTDIVIDE expr .)
    RETURN          reduce using rule 28 (expr -> expr DOTDIVIDE expr .)
    IF              reduce using rule 28 (expr -> expr DOTDIVIDE expr .)
    ID              reduce using rule 28 (expr -> expr DOTDIVIDE expr .)


state 89

    (29) expr -> expr DOTTIMES expr .
    (26) expr -> expr . DOTMINUS expr
    (27) expr -> expr . DOTPLUS expr
    (28) expr -> expr . DOTDIVIDE expr
    (29) expr -> expr . DOTTIMES expr
    (30) expr -> expr . GE expr
    (31) expr -> expr . LE expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . LT expr
    (34) expr -> expr . NE expr
    (35) expr -> expr . EQ expr
    (36) expr -> expr . / expr
    (37) expr -> expr . * expr
    (38) expr -> expr . - expr
    (39) expr -> expr . + expr
    (40) expr -> expr . '
    ,               reduce using rule 29 (expr -> expr DOTTIMES expr .)
    DOTMINUS        reduce using rule 29 (expr -> expr DOTTIMES expr .)
    DOTPLUS         reduce using rule 29 (expr -> expr DOTTIMES expr .)
    DOTDIVIDE       reduce using rule 29 (expr -> expr DOTTIMES expr .)
    DOTTIMES        reduce using rule 29 (expr -> expr DOTTIMES expr .)
    GE              reduce using rule 29 (expr -> expr DOTTIMES expr .)
    LE              reduce using rule 29 (expr -> expr DOTTIMES expr .)
    GT              reduce using rule 29 (expr -> expr DOTTIMES expr .)
    LT              reduce using rule 29 (expr -> expr DOTTIMES expr .)
    NE              reduce using rule 29 (expr -> expr DOTTIMES expr .)
    EQ              reduce using rule 29 (expr -> expr DOTTIMES expr .)
    /               reduce using rule 29 (expr -> expr DOTTIMES expr .)
    *               reduce using rule 29 (expr -> expr DOTTIMES expr .)
    -               reduce using rule 29 (expr -> expr DOTTIMES expr .)
    +               reduce using rule 29 (expr -> expr DOTTIMES expr .)
    '               reduce using rule 29 (expr -> expr DOTTIMES expr .)
    ;               reduce using rule 29 (expr -> expr DOTTIMES expr .)
    )               reduce using rule 29 (expr -> expr DOTTIMES expr .)
    ]               reduce using rule 29 (expr -> expr DOTTIMES expr .)
    :               reduce using rule 29 (expr -> expr DOTTIMES expr .)
    {               reduce using rule 29 (expr -> expr DOTTIMES expr .)
    CONTINUE        reduce using rule 29 (expr -> expr DOTTIMES expr .)
    BREAK           reduce using rule 29 (expr -> expr DOTTIMES expr .)
    PRINT           reduce using rule 29 (expr -> expr DOTTIMES expr .)
    WHILE           reduce using rule 29 (expr -> expr DOTTIMES expr .)
    FOR             reduce using rule 29 (expr -> expr DOTTIMES expr .)
    RETURN          reduce using rule 29 (expr -> expr DOTTIMES expr .)
    IF              reduce using rule 29 (expr -> expr DOTTIMES expr .)
    ID              reduce using rule 29 (expr -> expr DOTTIMES expr .)


state 90

    (30) expr -> expr GE expr .
    (26) expr -> expr . DOTMINUS expr
    (27) expr -> expr . DOTPLUS expr
    (28) expr -> expr . DOTDIVIDE expr
    (29) expr -> expr . DOTTIMES expr
    (30) expr -> expr . GE expr
    (31) expr -> expr . LE expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . LT expr
    (34) expr -> expr . NE expr
    (35) expr -> expr . EQ expr
    (36) expr -> expr . / expr
    (37) expr -> expr . * expr
    (38) expr -> expr . - expr
    (39) expr -> expr . + expr
    (40) expr -> expr . '
    ,               reduce using rule 30 (expr -> expr GE expr .)
    GE              reduce using rule 30 (expr -> expr GE expr .)
    LE              reduce using rule 30 (expr -> expr GE expr .)
    GT              reduce using rule 30 (expr -> expr GE expr .)
    LT              reduce using rule 30 (expr -> expr GE expr .)
    NE              reduce using rule 30 (expr -> expr GE expr .)
    EQ              reduce using rule 30 (expr -> expr GE expr .)
    '               reduce using rule 30 (expr -> expr GE expr .)
    ;               reduce using rule 30 (expr -> expr GE expr .)
    )               reduce using rule 30 (expr -> expr GE expr .)
    ]               reduce using rule 30 (expr -> expr GE expr .)
    :               reduce using rule 30 (expr -> expr GE expr .)
    {               reduce using rule 30 (expr -> expr GE expr .)
    CONTINUE        reduce using rule 30 (expr -> expr GE expr .)
    BREAK           reduce using rule 30 (expr -> expr GE expr .)
    PRINT           reduce using rule 30 (expr -> expr GE expr .)
    WHILE           reduce using rule 30 (expr -> expr GE expr .)
    FOR             reduce using rule 30 (expr -> expr GE expr .)
    RETURN          reduce using rule 30 (expr -> expr GE expr .)
    IF              reduce using rule 30 (expr -> expr GE expr .)
    ID              reduce using rule 30 (expr -> expr GE expr .)
    DOTMINUS        shift and go to state 55
    DOTPLUS         shift and go to state 56
    DOTDIVIDE       shift and go to state 57
    DOTTIMES        shift and go to state 58
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68


state 91

    (31) expr -> expr LE expr .
    (26) expr -> expr . DOTMINUS expr
    (27) expr -> expr . DOTPLUS expr
    (28) expr -> expr . DOTDIVIDE expr
    (29) expr -> expr . DOTTIMES expr
    (30) expr -> expr . GE expr
    (31) expr -> expr . LE expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . LT expr
    (34) expr -> expr . NE expr
    (35) expr -> expr . EQ expr
    (36) expr -> expr . / expr
    (37) expr -> expr . * expr
    (38) expr -> expr . - expr
    (39) expr -> expr . + expr
    (40) expr -> expr . '
    ,               reduce using rule 31 (expr -> expr LE expr .)
    GE              reduce using rule 31 (expr -> expr LE expr .)
    LE              reduce using rule 31 (expr -> expr LE expr .)
    GT              reduce using rule 31 (expr -> expr LE expr .)
    LT              reduce using rule 31 (expr -> expr LE expr .)
    NE              reduce using rule 31 (expr -> expr LE expr .)
    EQ              reduce using rule 31 (expr -> expr LE expr .)
    '               reduce using rule 31 (expr -> expr LE expr .)
    ;               reduce using rule 31 (expr -> expr LE expr .)
    )               reduce using rule 31 (expr -> expr LE expr .)
    ]               reduce using rule 31 (expr -> expr LE expr .)
    :               reduce using rule 31 (expr -> expr LE expr .)
    {               reduce using rule 31 (expr -> expr LE expr .)
    CONTINUE        reduce using rule 31 (expr -> expr LE expr .)
    BREAK           reduce using rule 31 (expr -> expr LE expr .)
    PRINT           reduce using rule 31 (expr -> expr LE expr .)
    WHILE           reduce using rule 31 (expr -> expr LE expr .)
    FOR             reduce using rule 31 (expr -> expr LE expr .)
    RETURN          reduce using rule 31 (expr -> expr LE expr .)
    IF              reduce using rule 31 (expr -> expr LE expr .)
    ID              reduce using rule 31 (expr -> expr LE expr .)
    DOTMINUS        shift and go to state 55
    DOTPLUS         shift and go to state 56
    DOTDIVIDE       shift and go to state 57
    DOTTIMES        shift and go to state 58
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68


state 92

    (32) expr -> expr GT expr .
    (26) expr -> expr . DOTMINUS expr
    (27) expr -> expr . DOTPLUS expr
    (28) expr -> expr . DOTDIVIDE expr
    (29) expr -> expr . DOTTIMES expr
    (30) expr -> expr . GE expr
    (31) expr -> expr . LE expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . LT expr
    (34) expr -> expr . NE expr
    (35) expr -> expr . EQ expr
    (36) expr -> expr . / expr
    (37) expr -> expr . * expr
    (38) expr -> expr . - expr
    (39) expr -> expr . + expr
    (40) expr -> expr . '
    ,               reduce using rule 32 (expr -> expr GT expr .)
    GE              reduce using rule 32 (expr -> expr GT expr .)
    LE              reduce using rule 32 (expr -> expr GT expr .)
    GT              reduce using rule 32 (expr -> expr GT expr .)
    LT              reduce using rule 32 (expr -> expr GT expr .)
    NE              reduce using rule 32 (expr -> expr GT expr .)
    EQ              reduce using rule 32 (expr -> expr GT expr .)
    '               reduce using rule 32 (expr -> expr GT expr .)
    ;               reduce using rule 32 (expr -> expr GT expr .)
    )               reduce using rule 32 (expr -> expr GT expr .)
    ]               reduce using rule 32 (expr -> expr GT expr .)
    :               reduce using rule 32 (expr -> expr GT expr .)
    {               reduce using rule 32 (expr -> expr GT expr .)
    CONTINUE        reduce using rule 32 (expr -> expr GT expr .)
    BREAK           reduce using rule 32 (expr -> expr GT expr .)
    PRINT           reduce using rule 32 (expr -> expr GT expr .)
    WHILE           reduce using rule 32 (expr -> expr GT expr .)
    FOR             reduce using rule 32 (expr -> expr GT expr .)
    RETURN          reduce using rule 32 (expr -> expr GT expr .)
    IF              reduce using rule 32 (expr -> expr GT expr .)
    ID              reduce using rule 32 (expr -> expr GT expr .)
    DOTMINUS        shift and go to state 55
    DOTPLUS         shift and go to state 56
    DOTDIVIDE       shift and go to state 57
    DOTTIMES        shift and go to state 58
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68


state 93

    (33) expr -> expr LT expr .
    (26) expr -> expr . DOTMINUS expr
    (27) expr -> expr . DOTPLUS expr
    (28) expr -> expr . DOTDIVIDE expr
    (29) expr -> expr . DOTTIMES expr
    (30) expr -> expr . GE expr
    (31) expr -> expr . LE expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . LT expr
    (34) expr -> expr . NE expr
    (35) expr -> expr . EQ expr
    (36) expr -> expr . / expr
    (37) expr -> expr . * expr
    (38) expr -> expr . - expr
    (39) expr -> expr . + expr
    (40) expr -> expr . '
    ,               reduce using rule 33 (expr -> expr LT expr .)
    GE              reduce using rule 33 (expr -> expr LT expr .)
    LE              reduce using rule 33 (expr -> expr LT expr .)
    GT              reduce using rule 33 (expr -> expr LT expr .)
    LT              reduce using rule 33 (expr -> expr LT expr .)
    NE              reduce using rule 33 (expr -> expr LT expr .)
    EQ              reduce using rule 33 (expr -> expr LT expr .)
    '               reduce using rule 33 (expr -> expr LT expr .)
    ;               reduce using rule 33 (expr -> expr LT expr .)
    )               reduce using rule 33 (expr -> expr LT expr .)
    ]               reduce using rule 33 (expr -> expr LT expr .)
    :               reduce using rule 33 (expr -> expr LT expr .)
    {               reduce using rule 33 (expr -> expr LT expr .)
    CONTINUE        reduce using rule 33 (expr -> expr LT expr .)
    BREAK           reduce using rule 33 (expr -> expr LT expr .)
    PRINT           reduce using rule 33 (expr -> expr LT expr .)
    WHILE           reduce using rule 33 (expr -> expr LT expr .)
    FOR             reduce using rule 33 (expr -> expr LT expr .)
    RETURN          reduce using rule 33 (expr -> expr LT expr .)
    IF              reduce using rule 33 (expr -> expr LT expr .)
    ID              reduce using rule 33 (expr -> expr LT expr .)
    DOTMINUS        shift and go to state 55
    DOTPLUS         shift and go to state 56
    DOTDIVIDE       shift and go to state 57
    DOTTIMES        shift and go to state 58
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68


state 94

    (34) expr -> expr NE expr .
    (26) expr -> expr . DOTMINUS expr
    (27) expr -> expr . DOTPLUS expr
    (28) expr -> expr . DOTDIVIDE expr
    (29) expr -> expr . DOTTIMES expr
    (30) expr -> expr . GE expr
    (31) expr -> expr . LE expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . LT expr
    (34) expr -> expr . NE expr
    (35) expr -> expr . EQ expr
    (36) expr -> expr . / expr
    (37) expr -> expr . * expr
    (38) expr -> expr . - expr
    (39) expr -> expr . + expr
    (40) expr -> expr . '
    ,               reduce using rule 34 (expr -> expr NE expr .)
    GE              reduce using rule 34 (expr -> expr NE expr .)
    LE              reduce using rule 34 (expr -> expr NE expr .)
    GT              reduce using rule 34 (expr -> expr NE expr .)
    LT              reduce using rule 34 (expr -> expr NE expr .)
    NE              reduce using rule 34 (expr -> expr NE expr .)
    EQ              reduce using rule 34 (expr -> expr NE expr .)
    '               reduce using rule 34 (expr -> expr NE expr .)
    ;               reduce using rule 34 (expr -> expr NE expr .)
    )               reduce using rule 34 (expr -> expr NE expr .)
    ]               reduce using rule 34 (expr -> expr NE expr .)
    :               reduce using rule 34 (expr -> expr NE expr .)
    {               reduce using rule 34 (expr -> expr NE expr .)
    CONTINUE        reduce using rule 34 (expr -> expr NE expr .)
    BREAK           reduce using rule 34 (expr -> expr NE expr .)
    PRINT           reduce using rule 34 (expr -> expr NE expr .)
    WHILE           reduce using rule 34 (expr -> expr NE expr .)
    FOR             reduce using rule 34 (expr -> expr NE expr .)
    RETURN          reduce using rule 34 (expr -> expr NE expr .)
    IF              reduce using rule 34 (expr -> expr NE expr .)
    ID              reduce using rule 34 (expr -> expr NE expr .)
    DOTMINUS        shift and go to state 55
    DOTPLUS         shift and go to state 56
    DOTDIVIDE       shift and go to state 57
    DOTTIMES        shift and go to state 58
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68


state 95

    (35) expr -> expr EQ expr .
    (26) expr -> expr . DOTMINUS expr
    (27) expr -> expr . DOTPLUS expr
    (28) expr -> expr . DOTDIVIDE expr
    (29) expr -> expr . DOTTIMES expr
    (30) expr -> expr . GE expr
    (31) expr -> expr . LE expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . LT expr
    (34) expr -> expr . NE expr
    (35) expr -> expr . EQ expr
    (36) expr -> expr . / expr
    (37) expr -> expr . * expr
    (38) expr -> expr . - expr
    (39) expr -> expr . + expr
    (40) expr -> expr . '
    ,               reduce using rule 35 (expr -> expr EQ expr .)
    GE              reduce using rule 35 (expr -> expr EQ expr .)
    LE              reduce using rule 35 (expr -> expr EQ expr .)
    GT              reduce using rule 35 (expr -> expr EQ expr .)
    LT              reduce using rule 35 (expr -> expr EQ expr .)
    NE              reduce using rule 35 (expr -> expr EQ expr .)
    EQ              reduce using rule 35 (expr -> expr EQ expr .)
    '               reduce using rule 35 (expr -> expr EQ expr .)
    ;               reduce using rule 35 (expr -> expr EQ expr .)
    )               reduce using rule 35 (expr -> expr EQ expr .)
    ]               reduce using rule 35 (expr -> expr EQ expr .)
    :               reduce using rule 35 (expr -> expr EQ expr .)
    {               reduce using rule 35 (expr -> expr EQ expr .)
    CONTINUE        reduce using rule 35 (expr -> expr EQ expr .)
    BREAK           reduce using rule 35 (expr -> expr EQ expr .)
    PRINT           reduce using rule 35 (expr -> expr EQ expr .)
    WHILE           reduce using rule 35 (expr -> expr EQ expr .)
    FOR             reduce using rule 35 (expr -> expr EQ expr .)
    RETURN          reduce using rule 35 (expr -> expr EQ expr .)
    IF              reduce using rule 35 (expr -> expr EQ expr .)
    ID              reduce using rule 35 (expr -> expr EQ expr .)
    DOTMINUS        shift and go to state 55
    DOTPLUS         shift and go to state 56
    DOTDIVIDE       shift and go to state 57
    DOTTIMES        shift and go to state 58
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68


state 96

    (36) expr -> expr / expr .
    (26) expr -> expr . DOTMINUS expr
    (27) expr -> expr . DOTPLUS expr
    (28) expr -> expr . DOTDIVIDE expr
    (29) expr -> expr . DOTTIMES expr
    (30) expr -> expr . GE expr
    (31) expr -> expr . LE expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . LT expr
    (34) expr -> expr . NE expr
    (35) expr -> expr . EQ expr
    (36) expr -> expr . / expr
    (37) expr -> expr . * expr
    (38) expr -> expr . - expr
    (39) expr -> expr . + expr
    (40) expr -> expr . '
    ,               reduce using rule 36 (expr -> expr / expr .)
    DOTMINUS        reduce using rule 36 (expr -> expr / expr .)
    DOTPLUS         reduce using rule 36 (expr -> expr / expr .)
    DOTDIVIDE       reduce using rule 36 (expr -> expr / expr .)
    DOTTIMES        reduce using rule 36 (expr -> expr / expr .)
    GE              reduce using rule 36 (expr -> expr / expr .)
    LE              reduce using rule 36 (expr -> expr / expr .)
    GT              reduce using rule 36 (expr -> expr / expr .)
    LT              reduce using rule 36 (expr -> expr / expr .)
    NE              reduce using rule 36 (expr -> expr / expr .)
    EQ              reduce using rule 36 (expr -> expr / expr .)
    /               reduce using rule 36 (expr -> expr / expr .)
    *               reduce using rule 36 (expr -> expr / expr .)
    -               reduce using rule 36 (expr -> expr / expr .)
    +               reduce using rule 36 (expr -> expr / expr .)
    '               reduce using rule 36 (expr -> expr / expr .)
    ;               reduce using rule 36 (expr -> expr / expr .)
    )               reduce using rule 36 (expr -> expr / expr .)
    ]               reduce using rule 36 (expr -> expr / expr .)
    :               reduce using rule 36 (expr -> expr / expr .)
    {               reduce using rule 36 (expr -> expr / expr .)
    CONTINUE        reduce using rule 36 (expr -> expr / expr .)
    BREAK           reduce using rule 36 (expr -> expr / expr .)
    PRINT           reduce using rule 36 (expr -> expr / expr .)
    WHILE           reduce using rule 36 (expr -> expr / expr .)
    FOR             reduce using rule 36 (expr -> expr / expr .)
    RETURN          reduce using rule 36 (expr -> expr / expr .)
    IF              reduce using rule 36 (expr -> expr / expr .)
    ID              reduce using rule 36 (expr -> expr / expr .)


state 97

    (37) expr -> expr * expr .
    (26) expr -> expr . DOTMINUS expr
    (27) expr -> expr . DOTPLUS expr
    (28) expr -> expr . DOTDIVIDE expr
    (29) expr -> expr . DOTTIMES expr
    (30) expr -> expr . GE expr
    (31) expr -> expr . LE expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . LT expr
    (34) expr -> expr . NE expr
    (35) expr -> expr . EQ expr
    (36) expr -> expr . / expr
    (37) expr -> expr . * expr
    (38) expr -> expr . - expr
    (39) expr -> expr . + expr
    (40) expr -> expr . '
    ,               reduce using rule 37 (expr -> expr * expr .)
    DOTMINUS        reduce using rule 37 (expr -> expr * expr .)
    DOTPLUS         reduce using rule 37 (expr -> expr * expr .)
    DOTDIVIDE       reduce using rule 37 (expr -> expr * expr .)
    DOTTIMES        reduce using rule 37 (expr -> expr * expr .)
    GE              reduce using rule 37 (expr -> expr * expr .)
    LE              reduce using rule 37 (expr -> expr * expr .)
    GT              reduce using rule 37 (expr -> expr * expr .)
    LT              reduce using rule 37 (expr -> expr * expr .)
    NE              reduce using rule 37 (expr -> expr * expr .)
    EQ              reduce using rule 37 (expr -> expr * expr .)
    /               reduce using rule 37 (expr -> expr * expr .)
    *               reduce using rule 37 (expr -> expr * expr .)
    -               reduce using rule 37 (expr -> expr * expr .)
    +               reduce using rule 37 (expr -> expr * expr .)
    '               reduce using rule 37 (expr -> expr * expr .)
    ;               reduce using rule 37 (expr -> expr * expr .)
    )               reduce using rule 37 (expr -> expr * expr .)
    ]               reduce using rule 37 (expr -> expr * expr .)
    :               reduce using rule 37 (expr -> expr * expr .)
    {               reduce using rule 37 (expr -> expr * expr .)
    CONTINUE        reduce using rule 37 (expr -> expr * expr .)
    BREAK           reduce using rule 37 (expr -> expr * expr .)
    PRINT           reduce using rule 37 (expr -> expr * expr .)
    WHILE           reduce using rule 37 (expr -> expr * expr .)
    FOR             reduce using rule 37 (expr -> expr * expr .)
    RETURN          reduce using rule 37 (expr -> expr * expr .)
    IF              reduce using rule 37 (expr -> expr * expr .)
    ID              reduce using rule 37 (expr -> expr * expr .)


state 98

    (38) expr -> expr - expr .
    (26) expr -> expr . DOTMINUS expr
    (27) expr -> expr . DOTPLUS expr
    (28) expr -> expr . DOTDIVIDE expr
    (29) expr -> expr . DOTTIMES expr
    (30) expr -> expr . GE expr
    (31) expr -> expr . LE expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . LT expr
    (34) expr -> expr . NE expr
    (35) expr -> expr . EQ expr
    (36) expr -> expr . / expr
    (37) expr -> expr . * expr
    (38) expr -> expr . - expr
    (39) expr -> expr . + expr
    (40) expr -> expr . '
    ,               reduce using rule 38 (expr -> expr - expr .)
    DOTMINUS        reduce using rule 38 (expr -> expr - expr .)
    DOTPLUS         reduce using rule 38 (expr -> expr - expr .)
    GE              reduce using rule 38 (expr -> expr - expr .)
    LE              reduce using rule 38 (expr -> expr - expr .)
    GT              reduce using rule 38 (expr -> expr - expr .)
    LT              reduce using rule 38 (expr -> expr - expr .)
    NE              reduce using rule 38 (expr -> expr - expr .)
    EQ              reduce using rule 38 (expr -> expr - expr .)
    -               reduce using rule 38 (expr -> expr - expr .)
    +               reduce using rule 38 (expr -> expr - expr .)
    '               reduce using rule 38 (expr -> expr - expr .)
    ;               reduce using rule 38 (expr -> expr - expr .)
    )               reduce using rule 38 (expr -> expr - expr .)
    ]               reduce using rule 38 (expr -> expr - expr .)
    :               reduce using rule 38 (expr -> expr - expr .)
    {               reduce using rule 38 (expr -> expr - expr .)
    CONTINUE        reduce using rule 38 (expr -> expr - expr .)
    BREAK           reduce using rule 38 (expr -> expr - expr .)
    PRINT           reduce using rule 38 (expr -> expr - expr .)
    WHILE           reduce using rule 38 (expr -> expr - expr .)
    FOR             reduce using rule 38 (expr -> expr - expr .)
    RETURN          reduce using rule 38 (expr -> expr - expr .)
    IF              reduce using rule 38 (expr -> expr - expr .)
    ID              reduce using rule 38 (expr -> expr - expr .)
    DOTDIVIDE       shift and go to state 57
    DOTTIMES        shift and go to state 58
    /               shift and go to state 65
    *               shift and go to state 66


state 99

    (39) expr -> expr + expr .
    (26) expr -> expr . DOTMINUS expr
    (27) expr -> expr . DOTPLUS expr
    (28) expr -> expr . DOTDIVIDE expr
    (29) expr -> expr . DOTTIMES expr
    (30) expr -> expr . GE expr
    (31) expr -> expr . LE expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . LT expr
    (34) expr -> expr . NE expr
    (35) expr -> expr . EQ expr
    (36) expr -> expr . / expr
    (37) expr -> expr . * expr
    (38) expr -> expr . - expr
    (39) expr -> expr . + expr
    (40) expr -> expr . '
    ,               reduce using rule 39 (expr -> expr + expr .)
    DOTMINUS        reduce using rule 39 (expr -> expr + expr .)
    DOTPLUS         reduce using rule 39 (expr -> expr + expr .)
    GE              reduce using rule 39 (expr -> expr + expr .)
    LE              reduce using rule 39 (expr -> expr + expr .)
    GT              reduce using rule 39 (expr -> expr + expr .)
    LT              reduce using rule 39 (expr -> expr + expr .)
    NE              reduce using rule 39 (expr -> expr + expr .)
    EQ              reduce using rule 39 (expr -> expr + expr .)
    -               reduce using rule 39 (expr -> expr + expr .)
    +               reduce using rule 39 (expr -> expr + expr .)
    '               reduce using rule 39 (expr -> expr + expr .)
    ;               reduce using rule 39 (expr -> expr + expr .)
    )               reduce using rule 39 (expr -> expr + expr .)
    ]               reduce using rule 39 (expr -> expr + expr .)
    :               reduce using rule 39 (expr -> expr + expr .)
    {               reduce using rule 39 (expr -> expr + expr .)
    CONTINUE        reduce using rule 39 (expr -> expr + expr .)
    BREAK           reduce using rule 39 (expr -> expr + expr .)
    PRINT           reduce using rule 39 (expr -> expr + expr .)
    WHILE           reduce using rule 39 (expr -> expr + expr .)
    FOR             reduce using rule 39 (expr -> expr + expr .)
    RETURN          reduce using rule 39 (expr -> expr + expr .)
    IF              reduce using rule 39 (expr -> expr + expr .)
    ID              reduce using rule 39 (expr -> expr + expr .)
    DOTDIVIDE       shift and go to state 57
    DOTTIMES        shift and go to state 58
    /               shift and go to state 65
    *               shift and go to state 66


state 100

    (24) expr -> mat_fun ( expr . )
    (26) expr -> expr . DOTMINUS expr
    (27) expr -> expr . DOTPLUS expr
    (28) expr -> expr . DOTDIVIDE expr
    (29) expr -> expr . DOTTIMES expr
    (30) expr -> expr . GE expr
    (31) expr -> expr . LE expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . LT expr
    (34) expr -> expr . NE expr
    (35) expr -> expr . EQ expr
    (36) expr -> expr . / expr
    (37) expr -> expr . * expr
    (38) expr -> expr . - expr
    (39) expr -> expr . + expr
    (40) expr -> expr . '
    )               shift and go to state 111
    DOTMINUS        shift and go to state 55
    DOTPLUS         shift and go to state 56
    DOTDIVIDE       shift and go to state 57
    DOTTIMES        shift and go to state 58
    GE              shift and go to state 59
    LE              shift and go to state 60
    GT              shift and go to state 61
    LT              shift and go to state 62
    NE              shift and go to state 63
    EQ              shift and go to state 64
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68
    '               shift and go to state 69


state 101

    (45) expr -> ( expr ) .
    ,               reduce using rule 45 (expr -> ( expr ) .)
    DOTMINUS        reduce using rule 45 (expr -> ( expr ) .)
    DOTPLUS         reduce using rule 45 (expr -> ( expr ) .)
    DOTDIVIDE       reduce using rule 45 (expr -> ( expr ) .)
    DOTTIMES        reduce using rule 45 (expr -> ( expr ) .)
    GE              reduce using rule 45 (expr -> ( expr ) .)
    LE              reduce using rule 45 (expr -> ( expr ) .)
    GT              reduce using rule 45 (expr -> ( expr ) .)
    LT              reduce using rule 45 (expr -> ( expr ) .)
    NE              reduce using rule 45 (expr -> ( expr ) .)
    EQ              reduce using rule 45 (expr -> ( expr ) .)
    /               reduce using rule 45 (expr -> ( expr ) .)
    *               reduce using rule 45 (expr -> ( expr ) .)
    -               reduce using rule 45 (expr -> ( expr ) .)
    +               reduce using rule 45 (expr -> ( expr ) .)
    '               reduce using rule 45 (expr -> ( expr ) .)
    ;               reduce using rule 45 (expr -> ( expr ) .)
    )               reduce using rule 45 (expr -> ( expr ) .)
    ]               reduce using rule 45 (expr -> ( expr ) .)
    :               reduce using rule 45 (expr -> ( expr ) .)
    {               reduce using rule 45 (expr -> ( expr ) .)
    CONTINUE        reduce using rule 45 (expr -> ( expr ) .)
    BREAK           reduce using rule 45 (expr -> ( expr ) .)
    PRINT           reduce using rule 45 (expr -> ( expr ) .)
    WHILE           reduce using rule 45 (expr -> ( expr ) .)
    FOR             reduce using rule 45 (expr -> ( expr ) .)
    RETURN          reduce using rule 45 (expr -> ( expr ) .)
    IF              reduce using rule 45 (expr -> ( expr ) .)
    ID              reduce using rule 45 (expr -> ( expr ) .)


state 102

    (58) vector -> [ variables . ]
    (60) variables -> variables . , variable
    ]               shift and go to state 112
    ,               shift and go to state 113


state 103

    (59) variables -> variable .
    ]               reduce using rule 59 (variables -> variable .)
    ,               reduce using rule 59 (variables -> variable .)


state 104

    (61) variable -> expr .
    (26) expr -> expr . DOTMINUS expr
    (27) expr -> expr . DOTPLUS expr
    (28) expr -> expr . DOTDIVIDE expr
    (29) expr -> expr . DOTTIMES expr
    (30) expr -> expr . GE expr
    (31) expr -> expr . LE expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . LT expr
    (34) expr -> expr . NE expr
    (35) expr -> expr . EQ expr
    (36) expr -> expr . / expr
    (37) expr -> expr . * expr
    (38) expr -> expr . - expr
    (39) expr -> expr . + expr
    (40) expr -> expr . '
    ]               reduce using rule 61 (variable -> expr .)
    ,               reduce using rule 61 (variable -> expr .)
    DOTMINUS        shift and go to state 55
    DOTPLUS         shift and go to state 56
    DOTDIVIDE       shift and go to state 57
    DOTTIMES        shift and go to state 58
    GE              shift and go to state 59
    LE              shift and go to state 60
    GT              shift and go to state 61
    LT              shift and go to state 62
    NE              shift and go to state 63
    EQ              shift and go to state 64
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68
    '               shift and go to state 69


state 105

    (55) matrix -> [ vectors ] .
    ,               reduce using rule 55 (matrix -> [ vectors ] .)
    DOTMINUS        reduce using rule 55 (matrix -> [ vectors ] .)
    DOTPLUS         reduce using rule 55 (matrix -> [ vectors ] .)
    DOTDIVIDE       reduce using rule 55 (matrix -> [ vectors ] .)
    DOTTIMES        reduce using rule 55 (matrix -> [ vectors ] .)
    GE              reduce using rule 55 (matrix -> [ vectors ] .)
    LE              reduce using rule 55 (matrix -> [ vectors ] .)
    GT              reduce using rule 55 (matrix -> [ vectors ] .)
    LT              reduce using rule 55 (matrix -> [ vectors ] .)
    NE              reduce using rule 55 (matrix -> [ vectors ] .)
    EQ              reduce using rule 55 (matrix -> [ vectors ] .)
    /               reduce using rule 55 (matrix -> [ vectors ] .)
    *               reduce using rule 55 (matrix -> [ vectors ] .)
    -               reduce using rule 55 (matrix -> [ vectors ] .)
    +               reduce using rule 55 (matrix -> [ vectors ] .)
    '               reduce using rule 55 (matrix -> [ vectors ] .)
    ;               reduce using rule 55 (matrix -> [ vectors ] .)
    )               reduce using rule 55 (matrix -> [ vectors ] .)
    ]               reduce using rule 55 (matrix -> [ vectors ] .)
    :               reduce using rule 55 (matrix -> [ vectors ] .)
    {               reduce using rule 55 (matrix -> [ vectors ] .)
    CONTINUE        reduce using rule 55 (matrix -> [ vectors ] .)
    BREAK           reduce using rule 55 (matrix -> [ vectors ] .)
    PRINT           reduce using rule 55 (matrix -> [ vectors ] .)
    WHILE           reduce using rule 55 (matrix -> [ vectors ] .)
    FOR             reduce using rule 55 (matrix -> [ vectors ] .)
    RETURN          reduce using rule 55 (matrix -> [ vectors ] .)
    IF              reduce using rule 55 (matrix -> [ vectors ] .)
    ID              reduce using rule 55 (matrix -> [ vectors ] .)


state 106

    (57) vectors -> vectors , . vector
    (58) vector -> . [ variables ]
    [               shift and go to state 73

    vector                         shift and go to state 114

state 107

    (17) while_l -> WHILE ( expr ) . instruction
    (6) instruction -> . { instructions }
    (7) instruction -> . print_i ;
    (8) instruction -> . assign ;
    (9) instruction -> . while_l
    (10) instruction -> . for_l
    (11) instruction -> . CONTINUE ;
    (12) instruction -> . BREAK ;
    (13) instruction -> . return_i ;
    (14) instruction -> . if_i
    (21) print_i -> . PRINT printargs
    (50) assign -> . var DIVIDEASSIGN expr
    (51) assign -> . var TIMESASSIGN expr
    (52) assign -> . var MINUSASSIGN expr
    (53) assign -> . var PLUSASSIGN expr
    (54) assign -> . var = expr
    (17) while_l -> . WHILE ( expr ) instruction
    (18) for_l -> . FOR ID = expr : expr instruction
    (19) return_i -> . RETURN expr
    (20) return_i -> . RETURN
    (15) if_i -> . IF ( expr ) instruction ELSE instruction
    (16) if_i -> . IF ( expr ) instruction
    (47) var -> . lists
    (48) var -> . ID
    (49) lists -> . ID [ expr , expr ]
    {               shift and go to state 5
    CONTINUE        shift and go to state 10
    BREAK           shift and go to state 11
    PRINT           shift and go to state 14
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    RETURN          shift and go to state 19
    IF              shift and go to state 20
    ID              shift and go to state 18

    instruction                    shift and go to state 115
    print_i                        shift and go to state 6
    assign                         shift and go to state 7
    while_l                        shift and go to state 8
    for_l                          shift and go to state 9
    return_i                       shift and go to state 12
    if_i                           shift and go to state 13
    var                            shift and go to state 15
    lists                          shift and go to state 21

state 108

    (18) for_l -> FOR ID = expr . : expr instruction
    (26) expr -> expr . DOTMINUS expr
    (27) expr -> expr . DOTPLUS expr
    (28) expr -> expr . DOTDIVIDE expr
    (29) expr -> expr . DOTTIMES expr
    (30) expr -> expr . GE expr
    (31) expr -> expr . LE expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . LT expr
    (34) expr -> expr . NE expr
    (35) expr -> expr . EQ expr
    (36) expr -> expr . / expr
    (37) expr -> expr . * expr
    (38) expr -> expr . - expr
    (39) expr -> expr . + expr
    (40) expr -> expr . '
    :               shift and go to state 116
    DOTMINUS        shift and go to state 55
    DOTPLUS         shift and go to state 56
    DOTDIVIDE       shift and go to state 57
    DOTTIMES        shift and go to state 58
    GE              shift and go to state 59
    LE              shift and go to state 60
    GT              shift and go to state 61
    LT              shift and go to state 62
    NE              shift and go to state 63
    EQ              shift and go to state 64
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68
    '               shift and go to state 69


state 109

    (49) lists -> ID [ expr , . expr ]
    (24) expr -> . mat_fun ( expr )
    (25) expr -> . matrix
    (26) expr -> . expr DOTMINUS expr
    (27) expr -> . expr DOTPLUS expr
    (28) expr -> . expr DOTDIVIDE expr
    (29) expr -> . expr DOTTIMES expr
    (30) expr -> . expr GE expr
    (31) expr -> . expr LE expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr LT expr
    (34) expr -> . expr NE expr
    (35) expr -> . expr EQ expr
    (36) expr -> . expr / expr
    (37) expr -> . expr * expr
    (38) expr -> . expr - expr
    (39) expr -> . expr + expr
    (40) expr -> . expr '
    (41) expr -> . - expr
    (42) expr -> . STRING
    (43) expr -> . FLOAT
    (44) expr -> . INT
    (45) expr -> . ( expr )
    (46) expr -> . var
    (62) mat_fun -> . ONES
    (63) mat_fun -> . EYE
    (64) mat_fun -> . ZEROS
    (55) matrix -> . [ vectors ]
    (47) var -> . lists
    (48) var -> . ID
    (49) lists -> . ID [ expr , expr ]
    -               shift and go to state 34
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    INT             shift and go to state 37
    (               shift and go to state 32
    ONES            shift and go to state 39
    EYE             shift and go to state 40
    ZEROS           shift and go to state 41
    [               shift and go to state 42
    ID              shift and go to state 18

    expr                           shift and go to state 117
    mat_fun                        shift and go to state 31
    matrix                         shift and go to state 33
    var                            shift and go to state 38
    lists                          shift and go to state 21

state 110

    (15) if_i -> IF ( expr ) . instruction ELSE instruction
    (16) if_i -> IF ( expr ) . instruction
    (6) instruction -> . { instructions }
    (7) instruction -> . print_i ;
    (8) instruction -> . assign ;
    (9) instruction -> . while_l
    (10) instruction -> . for_l
    (11) instruction -> . CONTINUE ;
    (12) instruction -> . BREAK ;
    (13) instruction -> . return_i ;
    (14) instruction -> . if_i
    (21) print_i -> . PRINT printargs
    (50) assign -> . var DIVIDEASSIGN expr
    (51) assign -> . var TIMESASSIGN expr
    (52) assign -> . var MINUSASSIGN expr
    (53) assign -> . var PLUSASSIGN expr
    (54) assign -> . var = expr
    (17) while_l -> . WHILE ( expr ) instruction
    (18) for_l -> . FOR ID = expr : expr instruction
    (19) return_i -> . RETURN expr
    (20) return_i -> . RETURN
    (15) if_i -> . IF ( expr ) instruction ELSE instruction
    (16) if_i -> . IF ( expr ) instruction
    (47) var -> . lists
    (48) var -> . ID
    (49) lists -> . ID [ expr , expr ]
    {               shift and go to state 5
    CONTINUE        shift and go to state 10
    BREAK           shift and go to state 11
    PRINT           shift and go to state 14
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    RETURN          shift and go to state 19
    IF              shift and go to state 20
    ID              shift and go to state 18

    instruction                    shift and go to state 118
    print_i                        shift and go to state 6
    assign                         shift and go to state 7
    while_l                        shift and go to state 8
    for_l                          shift and go to state 9
    return_i                       shift and go to state 12
    if_i                           shift and go to state 13
    var                            shift and go to state 15
    lists                          shift and go to state 21

state 111

    (24) expr -> mat_fun ( expr ) .
    ,               reduce using rule 24 (expr -> mat_fun ( expr ) .)
    DOTMINUS        reduce using rule 24 (expr -> mat_fun ( expr ) .)
    DOTPLUS         reduce using rule 24 (expr -> mat_fun ( expr ) .)
    DOTDIVIDE       reduce using rule 24 (expr -> mat_fun ( expr ) .)
    DOTTIMES        reduce using rule 24 (expr -> mat_fun ( expr ) .)
    GE              reduce using rule 24 (expr -> mat_fun ( expr ) .)
    LE              reduce using rule 24 (expr -> mat_fun ( expr ) .)
    GT              reduce using rule 24 (expr -> mat_fun ( expr ) .)
    LT              reduce using rule 24 (expr -> mat_fun ( expr ) .)
    NE              reduce using rule 24 (expr -> mat_fun ( expr ) .)
    EQ              reduce using rule 24 (expr -> mat_fun ( expr ) .)
    /               reduce using rule 24 (expr -> mat_fun ( expr ) .)
    *               reduce using rule 24 (expr -> mat_fun ( expr ) .)
    -               reduce using rule 24 (expr -> mat_fun ( expr ) .)
    +               reduce using rule 24 (expr -> mat_fun ( expr ) .)
    '               reduce using rule 24 (expr -> mat_fun ( expr ) .)
    ;               reduce using rule 24 (expr -> mat_fun ( expr ) .)
    )               reduce using rule 24 (expr -> mat_fun ( expr ) .)
    ]               reduce using rule 24 (expr -> mat_fun ( expr ) .)
    :               reduce using rule 24 (expr -> mat_fun ( expr ) .)
    {               reduce using rule 24 (expr -> mat_fun ( expr ) .)
    CONTINUE        reduce using rule 24 (expr -> mat_fun ( expr ) .)
    BREAK           reduce using rule 24 (expr -> mat_fun ( expr ) .)
    PRINT           reduce using rule 24 (expr -> mat_fun ( expr ) .)
    WHILE           reduce using rule 24 (expr -> mat_fun ( expr ) .)
    FOR             reduce using rule 24 (expr -> mat_fun ( expr ) .)
    RETURN          reduce using rule 24 (expr -> mat_fun ( expr ) .)
    IF              reduce using rule 24 (expr -> mat_fun ( expr ) .)
    ID              reduce using rule 24 (expr -> mat_fun ( expr ) .)


state 112

    (58) vector -> [ variables ] .
    ]               reduce using rule 58 (vector -> [ variables ] .)
    ,               reduce using rule 58 (vector -> [ variables ] .)


state 113

    (60) variables -> variables , . variable
    (61) variable -> . expr
    (24) expr -> . mat_fun ( expr )
    (25) expr -> . matrix
    (26) expr -> . expr DOTMINUS expr
    (27) expr -> . expr DOTPLUS expr
    (28) expr -> . expr DOTDIVIDE expr
    (29) expr -> . expr DOTTIMES expr
    (30) expr -> . expr GE expr
    (31) expr -> . expr LE expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr LT expr
    (34) expr -> . expr NE expr
    (35) expr -> . expr EQ expr
    (36) expr -> . expr / expr
    (37) expr -> . expr * expr
    (38) expr -> . expr - expr
    (39) expr -> . expr + expr
    (40) expr -> . expr '
    (41) expr -> . - expr
    (42) expr -> . STRING
    (43) expr -> . FLOAT
    (44) expr -> . INT
    (45) expr -> . ( expr )
    (46) expr -> . var
    (62) mat_fun -> . ONES
    (63) mat_fun -> . EYE
    (64) mat_fun -> . ZEROS
    (55) matrix -> . [ vectors ]
    (47) var -> . lists
    (48) var -> . ID
    (49) lists -> . ID [ expr , expr ]
    -               shift and go to state 34
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    INT             shift and go to state 37
    (               shift and go to state 32
    ONES            shift and go to state 39
    EYE             shift and go to state 40
    ZEROS           shift and go to state 41
    [               shift and go to state 42
    ID              shift and go to state 18

    variable                       shift and go to state 119
    expr                           shift and go to state 104
    mat_fun                        shift and go to state 31
    matrix                         shift and go to state 33
    var                            shift and go to state 38
    lists                          shift and go to state 21

state 114

    (57) vectors -> vectors , vector .
    ]               reduce using rule 57 (vectors -> vectors , vector .)
    ,               reduce using rule 57 (vectors -> vectors , vector .)


state 115

    (17) while_l -> WHILE ( expr ) instruction .
    {               reduce using rule 17 (while_l -> WHILE ( expr ) instruction .)
    CONTINUE        reduce using rule 17 (while_l -> WHILE ( expr ) instruction .)
    BREAK           reduce using rule 17 (while_l -> WHILE ( expr ) instruction .)
    PRINT           reduce using rule 17 (while_l -> WHILE ( expr ) instruction .)
    WHILE           reduce using rule 17 (while_l -> WHILE ( expr ) instruction .)
    FOR             reduce using rule 17 (while_l -> WHILE ( expr ) instruction .)
    RETURN          reduce using rule 17 (while_l -> WHILE ( expr ) instruction .)
    IF              reduce using rule 17 (while_l -> WHILE ( expr ) instruction .)
    ID              reduce using rule 17 (while_l -> WHILE ( expr ) instruction .)
    $end            reduce using rule 17 (while_l -> WHILE ( expr ) instruction .)
    }               reduce using rule 17 (while_l -> WHILE ( expr ) instruction .)
    ELSE            reduce using rule 17 (while_l -> WHILE ( expr ) instruction .)


state 116

    (18) for_l -> FOR ID = expr : . expr instruction
    (24) expr -> . mat_fun ( expr )
    (25) expr -> . matrix
    (26) expr -> . expr DOTMINUS expr
    (27) expr -> . expr DOTPLUS expr
    (28) expr -> . expr DOTDIVIDE expr
    (29) expr -> . expr DOTTIMES expr
    (30) expr -> . expr GE expr
    (31) expr -> . expr LE expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr LT expr
    (34) expr -> . expr NE expr
    (35) expr -> . expr EQ expr
    (36) expr -> . expr / expr
    (37) expr -> . expr * expr
    (38) expr -> . expr - expr
    (39) expr -> . expr + expr
    (40) expr -> . expr '
    (41) expr -> . - expr
    (42) expr -> . STRING
    (43) expr -> . FLOAT
    (44) expr -> . INT
    (45) expr -> . ( expr )
    (46) expr -> . var
    (62) mat_fun -> . ONES
    (63) mat_fun -> . EYE
    (64) mat_fun -> . ZEROS
    (55) matrix -> . [ vectors ]
    (47) var -> . lists
    (48) var -> . ID
    (49) lists -> . ID [ expr , expr ]
    -               shift and go to state 34
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    INT             shift and go to state 37
    (               shift and go to state 32
    ONES            shift and go to state 39
    EYE             shift and go to state 40
    ZEROS           shift and go to state 41
    [               shift and go to state 42
    ID              shift and go to state 18

    expr                           shift and go to state 120
    mat_fun                        shift and go to state 31
    matrix                         shift and go to state 33
    var                            shift and go to state 38
    lists                          shift and go to state 21

state 117

    (49) lists -> ID [ expr , expr . ]
    (26) expr -> expr . DOTMINUS expr
    (27) expr -> expr . DOTPLUS expr
    (28) expr -> expr . DOTDIVIDE expr
    (29) expr -> expr . DOTTIMES expr
    (30) expr -> expr . GE expr
    (31) expr -> expr . LE expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . LT expr
    (34) expr -> expr . NE expr
    (35) expr -> expr . EQ expr
    (36) expr -> expr . / expr
    (37) expr -> expr . * expr
    (38) expr -> expr . - expr
    (39) expr -> expr . + expr
    (40) expr -> expr . '
    ]               shift and go to state 121
    DOTMINUS        shift and go to state 55
    DOTPLUS         shift and go to state 56
    DOTDIVIDE       shift and go to state 57
    DOTTIMES        shift and go to state 58
    GE              shift and go to state 59
    LE              shift and go to state 60
    GT              shift and go to state 61
    LT              shift and go to state 62
    NE              shift and go to state 63
    EQ              shift and go to state 64
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68
    '               shift and go to state 69


state 118

    (15) if_i -> IF ( expr ) instruction . ELSE instruction
    (16) if_i -> IF ( expr ) instruction .
    ELSE            shift and go to state 122
    {               reduce using rule 16 (if_i -> IF ( expr ) instruction .)
    CONTINUE        reduce using rule 16 (if_i -> IF ( expr ) instruction .)
    BREAK           reduce using rule 16 (if_i -> IF ( expr ) instruction .)
    PRINT           reduce using rule 16 (if_i -> IF ( expr ) instruction .)
    WHILE           reduce using rule 16 (if_i -> IF ( expr ) instruction .)
    FOR             reduce using rule 16 (if_i -> IF ( expr ) instruction .)
    RETURN          reduce using rule 16 (if_i -> IF ( expr ) instruction .)
    IF              reduce using rule 16 (if_i -> IF ( expr ) instruction .)
    ID              reduce using rule 16 (if_i -> IF ( expr ) instruction .)
    $end            reduce using rule 16 (if_i -> IF ( expr ) instruction .)
    }               reduce using rule 16 (if_i -> IF ( expr ) instruction .)


state 119

    (60) variables -> variables , variable .
    ]               reduce using rule 60 (variables -> variables , variable .)
    ,               reduce using rule 60 (variables -> variables , variable .)


state 120

    (18) for_l -> FOR ID = expr : expr . instruction
    (26) expr -> expr . DOTMINUS expr
    (27) expr -> expr . DOTPLUS expr
    (28) expr -> expr . DOTDIVIDE expr
    (29) expr -> expr . DOTTIMES expr
    (30) expr -> expr . GE expr
    (31) expr -> expr . LE expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . LT expr
    (34) expr -> expr . NE expr
    (35) expr -> expr . EQ expr
    (36) expr -> expr . / expr
    (37) expr -> expr . * expr
    (38) expr -> expr . - expr
    (39) expr -> expr . + expr
    (40) expr -> expr . '
    (6) instruction -> . { instructions }
    (7) instruction -> . print_i ;
    (8) instruction -> . assign ;
    (9) instruction -> . while_l
    (10) instruction -> . for_l
    (11) instruction -> . CONTINUE ;
    (12) instruction -> . BREAK ;
    (13) instruction -> . return_i ;
    (14) instruction -> . if_i
    (21) print_i -> . PRINT printargs
    (50) assign -> . var DIVIDEASSIGN expr
    (51) assign -> . var TIMESASSIGN expr
    (52) assign -> . var MINUSASSIGN expr
    (53) assign -> . var PLUSASSIGN expr
    (54) assign -> . var = expr
    (17) while_l -> . WHILE ( expr ) instruction
    (18) for_l -> . FOR ID = expr : expr instruction
    (19) return_i -> . RETURN expr
    (20) return_i -> . RETURN
    (15) if_i -> . IF ( expr ) instruction ELSE instruction
    (16) if_i -> . IF ( expr ) instruction
    (47) var -> . lists
    (48) var -> . ID
    (49) lists -> . ID [ expr , expr ]
    DOTMINUS        shift and go to state 55
    DOTPLUS         shift and go to state 56
    DOTDIVIDE       shift and go to state 57
    DOTTIMES        shift and go to state 58
    GE              shift and go to state 59
    LE              shift and go to state 60
    GT              shift and go to state 61
    LT              shift and go to state 62
    NE              shift and go to state 63
    EQ              shift and go to state 64
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68
    '               shift and go to state 69
    {               shift and go to state 5
    CONTINUE        shift and go to state 10
    BREAK           shift and go to state 11
    PRINT           shift and go to state 14
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    RETURN          shift and go to state 19
    IF              shift and go to state 20
    ID              shift and go to state 18

    instruction                    shift and go to state 123
    print_i                        shift and go to state 6
    assign                         shift and go to state 7
    while_l                        shift and go to state 8
    for_l                          shift and go to state 9
    return_i                       shift and go to state 12
    if_i                           shift and go to state 13
    var                            shift and go to state 15
    lists                          shift and go to state 21

state 121

    (49) lists -> ID [ expr , expr ] .
    DIVIDEASSIGN    reduce using rule 49 (lists -> ID [ expr , expr ] .)
    TIMESASSIGN     reduce using rule 49 (lists -> ID [ expr , expr ] .)
    MINUSASSIGN     reduce using rule 49 (lists -> ID [ expr , expr ] .)
    PLUSASSIGN      reduce using rule 49 (lists -> ID [ expr , expr ] .)
    =               reduce using rule 49 (lists -> ID [ expr , expr ] .)
    ,               reduce using rule 49 (lists -> ID [ expr , expr ] .)
    DOTMINUS        reduce using rule 49 (lists -> ID [ expr , expr ] .)
    DOTPLUS         reduce using rule 49 (lists -> ID [ expr , expr ] .)
    DOTDIVIDE       reduce using rule 49 (lists -> ID [ expr , expr ] .)
    DOTTIMES        reduce using rule 49 (lists -> ID [ expr , expr ] .)
    GE              reduce using rule 49 (lists -> ID [ expr , expr ] .)
    LE              reduce using rule 49 (lists -> ID [ expr , expr ] .)
    GT              reduce using rule 49 (lists -> ID [ expr , expr ] .)
    LT              reduce using rule 49 (lists -> ID [ expr , expr ] .)
    NE              reduce using rule 49 (lists -> ID [ expr , expr ] .)
    EQ              reduce using rule 49 (lists -> ID [ expr , expr ] .)
    /               reduce using rule 49 (lists -> ID [ expr , expr ] .)
    *               reduce using rule 49 (lists -> ID [ expr , expr ] .)
    -               reduce using rule 49 (lists -> ID [ expr , expr ] .)
    +               reduce using rule 49 (lists -> ID [ expr , expr ] .)
    '               reduce using rule 49 (lists -> ID [ expr , expr ] .)
    ;               reduce using rule 49 (lists -> ID [ expr , expr ] .)
    )               reduce using rule 49 (lists -> ID [ expr , expr ] .)
    ]               reduce using rule 49 (lists -> ID [ expr , expr ] .)
    :               reduce using rule 49 (lists -> ID [ expr , expr ] .)
    {               reduce using rule 49 (lists -> ID [ expr , expr ] .)
    CONTINUE        reduce using rule 49 (lists -> ID [ expr , expr ] .)
    BREAK           reduce using rule 49 (lists -> ID [ expr , expr ] .)
    PRINT           reduce using rule 49 (lists -> ID [ expr , expr ] .)
    WHILE           reduce using rule 49 (lists -> ID [ expr , expr ] .)
    FOR             reduce using rule 49 (lists -> ID [ expr , expr ] .)
    RETURN          reduce using rule 49 (lists -> ID [ expr , expr ] .)
    IF              reduce using rule 49 (lists -> ID [ expr , expr ] .)
    ID              reduce using rule 49 (lists -> ID [ expr , expr ] .)


state 122

    (15) if_i -> IF ( expr ) instruction ELSE . instruction
    (6) instruction -> . { instructions }
    (7) instruction -> . print_i ;
    (8) instruction -> . assign ;
    (9) instruction -> . while_l
    (10) instruction -> . for_l
    (11) instruction -> . CONTINUE ;
    (12) instruction -> . BREAK ;
    (13) instruction -> . return_i ;
    (14) instruction -> . if_i
    (21) print_i -> . PRINT printargs
    (50) assign -> . var DIVIDEASSIGN expr
    (51) assign -> . var TIMESASSIGN expr
    (52) assign -> . var MINUSASSIGN expr
    (53) assign -> . var PLUSASSIGN expr
    (54) assign -> . var = expr
    (17) while_l -> . WHILE ( expr ) instruction
    (18) for_l -> . FOR ID = expr : expr instruction
    (19) return_i -> . RETURN expr
    (20) return_i -> . RETURN
    (15) if_i -> . IF ( expr ) instruction ELSE instruction
    (16) if_i -> . IF ( expr ) instruction
    (47) var -> . lists
    (48) var -> . ID
    (49) lists -> . ID [ expr , expr ]
    {               shift and go to state 5
    CONTINUE        shift and go to state 10
    BREAK           shift and go to state 11
    PRINT           shift and go to state 14
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    RETURN          shift and go to state 19
    IF              shift and go to state 20
    ID              shift and go to state 18

    instruction                    shift and go to state 124
    print_i                        shift and go to state 6
    assign                         shift and go to state 7
    while_l                        shift and go to state 8
    for_l                          shift and go to state 9
    return_i                       shift and go to state 12
    if_i                           shift and go to state 13
    var                            shift and go to state 15
    lists                          shift and go to state 21

state 123

    (18) for_l -> FOR ID = expr : expr instruction .
    {               reduce using rule 18 (for_l -> FOR ID = expr : expr instruction .)
    CONTINUE        reduce using rule 18 (for_l -> FOR ID = expr : expr instruction .)
    BREAK           reduce using rule 18 (for_l -> FOR ID = expr : expr instruction .)
    PRINT           reduce using rule 18 (for_l -> FOR ID = expr : expr instruction .)
    WHILE           reduce using rule 18 (for_l -> FOR ID = expr : expr instruction .)
    FOR             reduce using rule 18 (for_l -> FOR ID = expr : expr instruction .)
    RETURN          reduce using rule 18 (for_l -> FOR ID = expr : expr instruction .)
    IF              reduce using rule 18 (for_l -> FOR ID = expr : expr instruction .)
    ID              reduce using rule 18 (for_l -> FOR ID = expr : expr instruction .)
    $end            reduce using rule 18 (for_l -> FOR ID = expr : expr instruction .)
    }               reduce using rule 18 (for_l -> FOR ID = expr : expr instruction .)
    ELSE            reduce using rule 18 (for_l -> FOR ID = expr : expr instruction .)


state 124

    (15) if_i -> IF ( expr ) instruction ELSE instruction .
    {               reduce using rule 15 (if_i -> IF ( expr ) instruction ELSE instruction .)
    CONTINUE        reduce using rule 15 (if_i -> IF ( expr ) instruction ELSE instruction .)
    BREAK           reduce using rule 15 (if_i -> IF ( expr ) instruction ELSE instruction .)
    PRINT           reduce using rule 15 (if_i -> IF ( expr ) instruction ELSE instruction .)
    WHILE           reduce using rule 15 (if_i -> IF ( expr ) instruction ELSE instruction .)
    FOR             reduce using rule 15 (if_i -> IF ( expr ) instruction ELSE instruction .)
    RETURN          reduce using rule 15 (if_i -> IF ( expr ) instruction ELSE instruction .)
    IF              reduce using rule 15 (if_i -> IF ( expr ) instruction ELSE instruction .)
    ID              reduce using rule 15 (if_i -> IF ( expr ) instruction ELSE instruction .)
    $end            reduce using rule 15 (if_i -> IF ( expr ) instruction ELSE instruction .)
    }               reduce using rule 15 (if_i -> IF ( expr ) instruction ELSE instruction .)
    ELSE            reduce using rule 15 (if_i -> IF ( expr ) instruction ELSE instruction .)
