Grammar:

Rule 0     S' -> instructions
Rule 1     instructions -> instruction
Rule 2     instructions -> instructions instruction
Rule 3     instruction -> RETURN right_hand_side_expression ;
Rule 4     instruction -> CONTINUE ;
Rule 5     instruction -> BREAK ;
Rule 6     instruction -> print_instruction
Rule 7     instruction -> full_line_expression
Rule 8     instruction -> for_instruction
Rule 9     instruction -> while_instruction
Rule 10    instruction -> if_instruction
Rule 11    instruction -> { instructions }
Rule 12    if_instruction -> IF ( relation_expression ) instruction  [precedence=nonassoc, level=1]
Rule 13    if_instruction -> IF ( relation_expression ) instruction ELSE instruction  [precedence=nonassoc, level=2]
Rule 14    while_instruction -> WHILE ( relation_expression ) instruction
Rule 15    for_instruction -> FOR ID = id_int : id_int instruction
Rule 16    id_int -> INTNUM
Rule 17    id_int -> ID
Rule 18    print_instruction -> PRINT printables ;
Rule 19    printables -> value
Rule 20    printables -> printables , value
Rule 21    value -> STRING
Rule 22    value -> ID
Rule 23    value -> FLOATNUM
Rule 24    value -> INTNUM
Rule 25    right_hand_side_expression -> matrix_ref
Rule 26    right_hand_side_expression -> [ ]
Rule 27    right_hand_side_expression -> [ list_of_elems ]
Rule 28    right_hand_side_expression -> [ vectors ]
Rule 29    right_hand_side_expression -> right_hand_side_expression DOTDIVIDE right_hand_side_expression  [precedence=left, level=5]
Rule 30    right_hand_side_expression -> right_hand_side_expression DOTTIMES right_hand_side_expression  [precedence=left, level=5]
Rule 31    right_hand_side_expression -> right_hand_side_expression DOTMINUS right_hand_side_expression  [precedence=left, level=4]
Rule 32    right_hand_side_expression -> right_hand_side_expression DOTPLUS right_hand_side_expression  [precedence=left, level=4]
Rule 33    right_hand_side_expression -> right_hand_side_expression / right_hand_side_expression  [precedence=left, level=5]
Rule 34    right_hand_side_expression -> right_hand_side_expression * right_hand_side_expression  [precedence=left, level=5]
Rule 35    right_hand_side_expression -> right_hand_side_expression - right_hand_side_expression  [precedence=left, level=4]
Rule 36    right_hand_side_expression -> right_hand_side_expression + right_hand_side_expression  [precedence=left, level=4]
Rule 37    right_hand_side_expression -> right_hand_side_expression '  [precedence=nonassoc, level=6]
Rule 38    right_hand_side_expression -> value
Rule 39    right_hand_side_expression -> matrix_functions
Rule 40    right_hand_side_expression -> ( right_hand_side_expression )
Rule 41    right_hand_side_expression -> relation_expression
Rule 42    right_hand_side_expression -> unary_minus
Rule 43    unary_minus -> - right_hand_side_expression  [precedence=right, level=7]
Rule 44    full_line_expression -> ( full_line_expression )
Rule 45    full_line_expression -> left_hand_side_expression
Rule 46    full_line_expression -> assign_expression
Rule 47    full_line_expression -> right_hand_side_expression
Rule 48    assign_expression -> left_hand_side_expression DIVIDEASSIGN right_hand_side_expression ;
Rule 49    assign_expression -> left_hand_side_expression TIMESASSIGN right_hand_side_expression ;
Rule 50    assign_expression -> left_hand_side_expression MINUSASSIGN right_hand_side_expression ;
Rule 51    assign_expression -> left_hand_side_expression PLUSASSIGN right_hand_side_expression ;
Rule 52    assign_expression -> left_hand_side_expression = right_hand_side_expression ;
Rule 53    matrix_ref -> ID [ list_of_ints ]
Rule 54    left_hand_side_expression -> matrix_ref
Rule 55    left_hand_side_expression -> ID
Rule 56    relation_expression -> right_hand_side_expression NE right_hand_side_expression  [precedence=nonassoc, level=3]
Rule 57    relation_expression -> right_hand_side_expression EQ right_hand_side_expression  [precedence=nonassoc, level=3]
Rule 58    relation_expression -> right_hand_side_expression GE right_hand_side_expression  [precedence=nonassoc, level=3]
Rule 59    relation_expression -> right_hand_side_expression LE right_hand_side_expression  [precedence=nonassoc, level=3]
Rule 60    relation_expression -> right_hand_side_expression GT right_hand_side_expression  [precedence=nonassoc, level=3]
Rule 61    relation_expression -> right_hand_side_expression LT right_hand_side_expression  [precedence=nonassoc, level=3]
Rule 62    matrix_functions -> EYE ( INTNUM )
Rule 63    matrix_functions -> ONES ( INTNUM )
Rule 64    matrix_functions -> ZEROS ( INTNUM )
Rule 65    vectors -> vectors , [ ]
Rule 66    vectors -> [ ]
Rule 67    vectors -> vectors , [ list_of_elems ]
Rule 68    vectors -> [ list_of_elems ]
Rule 69    list_of_elems -> list_of_elems , value
Rule 70    list_of_elems -> value
Rule 71    list_of_ints -> list_of_ints , INTNUM
Rule 72    list_of_ints -> INTNUM

Unused terminals:

    UMINUS

Terminals, with rules where they appear:

'                    : 37
(                    : 12 13 14 40 44 62 63 64
)                    : 12 13 14 40 44 62 63 64
*                    : 34
+                    : 36
,                    : 20 65 67 69 71
-                    : 35 43
/                    : 33
:                    : 15
;                    : 3 4 5 18 48 49 50 51 52
=                    : 15 52
BREAK                : 5
CONTINUE             : 4
DIVIDEASSIGN         : 48
DOTDIVIDE            : 29
DOTMINUS             : 31
DOTPLUS              : 32
DOTTIMES             : 30
ELSE                 : 13
EQ                   : 57
EYE                  : 62
FLOATNUM             : 23
FOR                  : 15
GE                   : 58
GT                   : 60
ID                   : 15 17 22 53 55
IF                   : 12 13
INTNUM               : 16 24 62 63 64 71 72
LE                   : 59
LT                   : 61
MINUSASSIGN          : 50
NE                   : 56
ONES                 : 63
PLUSASSIGN           : 51
PRINT                : 18
RETURN               : 3
STRING               : 21
TIMESASSIGN          : 49
UMINUS               : 
WHILE                : 14
ZEROS                : 64
[                    : 26 27 28 53 65 66 67 68
]                    : 26 27 28 53 65 66 67 68
error                : 
{                    : 11
}                    : 11

Nonterminals, with rules where they appear:

assign_expression    : 46
for_instruction      : 8
full_line_expression : 7 44
id_int               : 15 15
if_instruction       : 10
instruction          : 1 2 12 13 13 14 15
instructions         : 2 11 0
left_hand_side_expression : 45 48 49 50 51 52
list_of_elems        : 27 67 68 69
list_of_ints         : 53 71
matrix_functions     : 39
matrix_ref           : 25 54
print_instruction    : 6
printables           : 18 20
relation_expression  : 12 13 14 41
right_hand_side_expression : 3 29 29 30 30 31 31 32 32 33 33 34 34 35 35 36 36 37 40 43 47 48 49 50 51 52 56 56 57 57 58 58 59 59 60 60 61 61
unary_minus          : 42
value                : 19 20 38 69 70
vectors              : 28 65 67
while_instruction    : 9


state 0

    (0) S' -> . instructions
    (1) instructions -> . instruction
    (2) instructions -> . instructions instruction
    (3) instruction -> . RETURN right_hand_side_expression ;
    (4) instruction -> . CONTINUE ;
    (5) instruction -> . BREAK ;
    (6) instruction -> . print_instruction
    (7) instruction -> . full_line_expression
    (8) instruction -> . for_instruction
    (9) instruction -> . while_instruction
    (10) instruction -> . if_instruction
    (11) instruction -> . { instructions }
    (18) print_instruction -> . PRINT printables ;
    (44) full_line_expression -> . ( full_line_expression )
    (45) full_line_expression -> . left_hand_side_expression
    (46) full_line_expression -> . assign_expression
    (47) full_line_expression -> . right_hand_side_expression
    (15) for_instruction -> . FOR ID = id_int : id_int instruction
    (14) while_instruction -> . WHILE ( relation_expression ) instruction
    (12) if_instruction -> . IF ( relation_expression ) instruction
    (13) if_instruction -> . IF ( relation_expression ) instruction ELSE instruction
    (54) left_hand_side_expression -> . matrix_ref
    (55) left_hand_side_expression -> . ID
    (48) assign_expression -> . left_hand_side_expression DIVIDEASSIGN right_hand_side_expression ;
    (49) assign_expression -> . left_hand_side_expression TIMESASSIGN right_hand_side_expression ;
    (50) assign_expression -> . left_hand_side_expression MINUSASSIGN right_hand_side_expression ;
    (51) assign_expression -> . left_hand_side_expression PLUSASSIGN right_hand_side_expression ;
    (52) assign_expression -> . left_hand_side_expression = right_hand_side_expression ;
    (25) right_hand_side_expression -> . matrix_ref
    (26) right_hand_side_expression -> . [ ]
    (27) right_hand_side_expression -> . [ list_of_elems ]
    (28) right_hand_side_expression -> . [ vectors ]
    (29) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (36) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (37) right_hand_side_expression -> . right_hand_side_expression '
    (38) right_hand_side_expression -> . value
    (39) right_hand_side_expression -> . matrix_functions
    (40) right_hand_side_expression -> . ( right_hand_side_expression )
    (41) right_hand_side_expression -> . relation_expression
    (42) right_hand_side_expression -> . unary_minus
    (53) matrix_ref -> . ID [ list_of_ints ]
    (21) value -> . STRING
    (22) value -> . ID
    (23) value -> . FLOATNUM
    (24) value -> . INTNUM
    (62) matrix_functions -> . EYE ( INTNUM )
    (63) matrix_functions -> . ONES ( INTNUM )
    (64) matrix_functions -> . ZEROS ( INTNUM )
    (56) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (57) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (58) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (59) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (61) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (43) unary_minus -> . - right_hand_side_expression
    RETURN          shift and go to state 3
    CONTINUE        shift and go to state 5
    BREAK           shift and go to state 6
    {               shift and go to state 12
    PRINT           shift and go to state 13
    (               shift and go to state 14
    FOR             shift and go to state 17
    WHILE           shift and go to state 19
    IF              shift and go to state 21
    ID              shift and go to state 18
    [               shift and go to state 23
    STRING          shift and go to state 28
    FLOATNUM        shift and go to state 29
    INTNUM          shift and go to state 30
    EYE             shift and go to state 31
    ONES            shift and go to state 32
    ZEROS           shift and go to state 33
    -               shift and go to state 24

    instructions                   shift and go to state 1
    instruction                    shift and go to state 2
    right_hand_side_expression     shift and go to state 4
    print_instruction              shift and go to state 7
    full_line_expression           shift and go to state 8
    for_instruction                shift and go to state 9
    while_instruction              shift and go to state 10
    if_instruction                 shift and go to state 11
    left_hand_side_expression      shift and go to state 15
    assign_expression              shift and go to state 16
    relation_expression            shift and go to state 20
    matrix_ref                     shift and go to state 22
    value                          shift and go to state 25
    matrix_functions               shift and go to state 26
    unary_minus                    shift and go to state 27

state 1

    (0) S' -> instructions .
    (2) instructions -> instructions . instruction
    (3) instruction -> . RETURN right_hand_side_expression ;
    (4) instruction -> . CONTINUE ;
    (5) instruction -> . BREAK ;
    (6) instruction -> . print_instruction
    (7) instruction -> . full_line_expression
    (8) instruction -> . for_instruction
    (9) instruction -> . while_instruction
    (10) instruction -> . if_instruction
    (11) instruction -> . { instructions }
    (18) print_instruction -> . PRINT printables ;
    (44) full_line_expression -> . ( full_line_expression )
    (45) full_line_expression -> . left_hand_side_expression
    (46) full_line_expression -> . assign_expression
    (47) full_line_expression -> . right_hand_side_expression
    (15) for_instruction -> . FOR ID = id_int : id_int instruction
    (14) while_instruction -> . WHILE ( relation_expression ) instruction
    (12) if_instruction -> . IF ( relation_expression ) instruction
    (13) if_instruction -> . IF ( relation_expression ) instruction ELSE instruction
    (54) left_hand_side_expression -> . matrix_ref
    (55) left_hand_side_expression -> . ID
    (48) assign_expression -> . left_hand_side_expression DIVIDEASSIGN right_hand_side_expression ;
    (49) assign_expression -> . left_hand_side_expression TIMESASSIGN right_hand_side_expression ;
    (50) assign_expression -> . left_hand_side_expression MINUSASSIGN right_hand_side_expression ;
    (51) assign_expression -> . left_hand_side_expression PLUSASSIGN right_hand_side_expression ;
    (52) assign_expression -> . left_hand_side_expression = right_hand_side_expression ;
    (25) right_hand_side_expression -> . matrix_ref
    (26) right_hand_side_expression -> . [ ]
    (27) right_hand_side_expression -> . [ list_of_elems ]
    (28) right_hand_side_expression -> . [ vectors ]
    (29) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (36) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (37) right_hand_side_expression -> . right_hand_side_expression '
    (38) right_hand_side_expression -> . value
    (39) right_hand_side_expression -> . matrix_functions
    (40) right_hand_side_expression -> . ( right_hand_side_expression )
    (41) right_hand_side_expression -> . relation_expression
    (42) right_hand_side_expression -> . unary_minus
    (53) matrix_ref -> . ID [ list_of_ints ]
    (21) value -> . STRING
    (22) value -> . ID
    (23) value -> . FLOATNUM
    (24) value -> . INTNUM
    (62) matrix_functions -> . EYE ( INTNUM )
    (63) matrix_functions -> . ONES ( INTNUM )
    (64) matrix_functions -> . ZEROS ( INTNUM )
    (56) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (57) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (58) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (59) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (61) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (43) unary_minus -> . - right_hand_side_expression
    RETURN          shift and go to state 3
    CONTINUE        shift and go to state 5
    BREAK           shift and go to state 6
    {               shift and go to state 12
    PRINT           shift and go to state 13
    (               shift and go to state 14
    FOR             shift and go to state 17
    WHILE           shift and go to state 19
    IF              shift and go to state 21
    ID              shift and go to state 18
    [               shift and go to state 23
    STRING          shift and go to state 28
    FLOATNUM        shift and go to state 29
    INTNUM          shift and go to state 30
    EYE             shift and go to state 31
    ONES            shift and go to state 32
    ZEROS           shift and go to state 33
    -               shift and go to state 24

    instruction                    shift and go to state 34
    right_hand_side_expression     shift and go to state 4
    print_instruction              shift and go to state 7
    full_line_expression           shift and go to state 8
    for_instruction                shift and go to state 9
    while_instruction              shift and go to state 10
    if_instruction                 shift and go to state 11
    left_hand_side_expression      shift and go to state 15
    assign_expression              shift and go to state 16
    relation_expression            shift and go to state 20
    matrix_ref                     shift and go to state 22
    value                          shift and go to state 25
    matrix_functions               shift and go to state 26
    unary_minus                    shift and go to state 27

state 2

    (1) instructions -> instruction .
    RETURN          reduce using rule 1 (instructions -> instruction .)
    CONTINUE        reduce using rule 1 (instructions -> instruction .)
    BREAK           reduce using rule 1 (instructions -> instruction .)
    {               reduce using rule 1 (instructions -> instruction .)
    PRINT           reduce using rule 1 (instructions -> instruction .)
    (               reduce using rule 1 (instructions -> instruction .)
    FOR             reduce using rule 1 (instructions -> instruction .)
    WHILE           reduce using rule 1 (instructions -> instruction .)
    IF              reduce using rule 1 (instructions -> instruction .)
    ID              reduce using rule 1 (instructions -> instruction .)
    [               reduce using rule 1 (instructions -> instruction .)
    STRING          reduce using rule 1 (instructions -> instruction .)
    FLOATNUM        reduce using rule 1 (instructions -> instruction .)
    INTNUM          reduce using rule 1 (instructions -> instruction .)
    EYE             reduce using rule 1 (instructions -> instruction .)
    ONES            reduce using rule 1 (instructions -> instruction .)
    ZEROS           reduce using rule 1 (instructions -> instruction .)
    -               reduce using rule 1 (instructions -> instruction .)
    $end            reduce using rule 1 (instructions -> instruction .)
    }               reduce using rule 1 (instructions -> instruction .)


state 3

    (3) instruction -> RETURN . right_hand_side_expression ;
    (25) right_hand_side_expression -> . matrix_ref
    (26) right_hand_side_expression -> . [ ]
    (27) right_hand_side_expression -> . [ list_of_elems ]
    (28) right_hand_side_expression -> . [ vectors ]
    (29) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (36) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (37) right_hand_side_expression -> . right_hand_side_expression '
    (38) right_hand_side_expression -> . value
    (39) right_hand_side_expression -> . matrix_functions
    (40) right_hand_side_expression -> . ( right_hand_side_expression )
    (41) right_hand_side_expression -> . relation_expression
    (42) right_hand_side_expression -> . unary_minus
    (53) matrix_ref -> . ID [ list_of_ints ]
    (21) value -> . STRING
    (22) value -> . ID
    (23) value -> . FLOATNUM
    (24) value -> . INTNUM
    (62) matrix_functions -> . EYE ( INTNUM )
    (63) matrix_functions -> . ONES ( INTNUM )
    (64) matrix_functions -> . ZEROS ( INTNUM )
    (56) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (57) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (58) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (59) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (61) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (43) unary_minus -> . - right_hand_side_expression
    [               shift and go to state 23
    (               shift and go to state 37
    ID              shift and go to state 38
    STRING          shift and go to state 28
    FLOATNUM        shift and go to state 29
    INTNUM          shift and go to state 30
    EYE             shift and go to state 31
    ONES            shift and go to state 32
    ZEROS           shift and go to state 33
    -               shift and go to state 24

    right_hand_side_expression     shift and go to state 35
    matrix_ref                     shift and go to state 36
    value                          shift and go to state 25
    matrix_functions               shift and go to state 26
    relation_expression            shift and go to state 20
    unary_minus                    shift and go to state 27

state 4

    (47) full_line_expression -> right_hand_side_expression .
    (29) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (36) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    (37) right_hand_side_expression -> right_hand_side_expression . '
    (56) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (57) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (58) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (59) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (61) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
  ! shift/reduce conflict for - resolved as shift
    RETURN          reduce using rule 47 (full_line_expression -> right_hand_side_expression .)
    CONTINUE        reduce using rule 47 (full_line_expression -> right_hand_side_expression .)
    BREAK           reduce using rule 47 (full_line_expression -> right_hand_side_expression .)
    {               reduce using rule 47 (full_line_expression -> right_hand_side_expression .)
    PRINT           reduce using rule 47 (full_line_expression -> right_hand_side_expression .)
    (               reduce using rule 47 (full_line_expression -> right_hand_side_expression .)
    FOR             reduce using rule 47 (full_line_expression -> right_hand_side_expression .)
    WHILE           reduce using rule 47 (full_line_expression -> right_hand_side_expression .)
    IF              reduce using rule 47 (full_line_expression -> right_hand_side_expression .)
    ID              reduce using rule 47 (full_line_expression -> right_hand_side_expression .)
    [               reduce using rule 47 (full_line_expression -> right_hand_side_expression .)
    STRING          reduce using rule 47 (full_line_expression -> right_hand_side_expression .)
    FLOATNUM        reduce using rule 47 (full_line_expression -> right_hand_side_expression .)
    INTNUM          reduce using rule 47 (full_line_expression -> right_hand_side_expression .)
    EYE             reduce using rule 47 (full_line_expression -> right_hand_side_expression .)
    ONES            reduce using rule 47 (full_line_expression -> right_hand_side_expression .)
    ZEROS           reduce using rule 47 (full_line_expression -> right_hand_side_expression .)
    $end            reduce using rule 47 (full_line_expression -> right_hand_side_expression .)
    }               reduce using rule 47 (full_line_expression -> right_hand_side_expression .)
    ELSE            reduce using rule 47 (full_line_expression -> right_hand_side_expression .)
    DOTDIVIDE       shift and go to state 39
    DOTTIMES        shift and go to state 40
    DOTMINUS        shift and go to state 41
    DOTPLUS         shift and go to state 42
    /               shift and go to state 43
    *               shift and go to state 44
    -               shift and go to state 45
    +               shift and go to state 46
    '               shift and go to state 47
    NE              shift and go to state 48
    EQ              shift and go to state 49
    GE              shift and go to state 50
    LE              shift and go to state 51
    GT              shift and go to state 52
    LT              shift and go to state 53


state 5

    (4) instruction -> CONTINUE . ;
    ;               shift and go to state 54


state 6

    (5) instruction -> BREAK . ;
    ;               shift and go to state 55


state 7

    (6) instruction -> print_instruction .
    RETURN          reduce using rule 6 (instruction -> print_instruction .)
    CONTINUE        reduce using rule 6 (instruction -> print_instruction .)
    BREAK           reduce using rule 6 (instruction -> print_instruction .)
    {               reduce using rule 6 (instruction -> print_instruction .)
    PRINT           reduce using rule 6 (instruction -> print_instruction .)
    (               reduce using rule 6 (instruction -> print_instruction .)
    FOR             reduce using rule 6 (instruction -> print_instruction .)
    WHILE           reduce using rule 6 (instruction -> print_instruction .)
    IF              reduce using rule 6 (instruction -> print_instruction .)
    ID              reduce using rule 6 (instruction -> print_instruction .)
    [               reduce using rule 6 (instruction -> print_instruction .)
    STRING          reduce using rule 6 (instruction -> print_instruction .)
    FLOATNUM        reduce using rule 6 (instruction -> print_instruction .)
    INTNUM          reduce using rule 6 (instruction -> print_instruction .)
    EYE             reduce using rule 6 (instruction -> print_instruction .)
    ONES            reduce using rule 6 (instruction -> print_instruction .)
    ZEROS           reduce using rule 6 (instruction -> print_instruction .)
    -               reduce using rule 6 (instruction -> print_instruction .)
    $end            reduce using rule 6 (instruction -> print_instruction .)
    }               reduce using rule 6 (instruction -> print_instruction .)
    ELSE            reduce using rule 6 (instruction -> print_instruction .)


state 8

    (7) instruction -> full_line_expression .
    RETURN          reduce using rule 7 (instruction -> full_line_expression .)
    CONTINUE        reduce using rule 7 (instruction -> full_line_expression .)
    BREAK           reduce using rule 7 (instruction -> full_line_expression .)
    {               reduce using rule 7 (instruction -> full_line_expression .)
    PRINT           reduce using rule 7 (instruction -> full_line_expression .)
    (               reduce using rule 7 (instruction -> full_line_expression .)
    FOR             reduce using rule 7 (instruction -> full_line_expression .)
    WHILE           reduce using rule 7 (instruction -> full_line_expression .)
    IF              reduce using rule 7 (instruction -> full_line_expression .)
    ID              reduce using rule 7 (instruction -> full_line_expression .)
    [               reduce using rule 7 (instruction -> full_line_expression .)
    STRING          reduce using rule 7 (instruction -> full_line_expression .)
    FLOATNUM        reduce using rule 7 (instruction -> full_line_expression .)
    INTNUM          reduce using rule 7 (instruction -> full_line_expression .)
    EYE             reduce using rule 7 (instruction -> full_line_expression .)
    ONES            reduce using rule 7 (instruction -> full_line_expression .)
    ZEROS           reduce using rule 7 (instruction -> full_line_expression .)
    -               reduce using rule 7 (instruction -> full_line_expression .)
    $end            reduce using rule 7 (instruction -> full_line_expression .)
    }               reduce using rule 7 (instruction -> full_line_expression .)
    ELSE            reduce using rule 7 (instruction -> full_line_expression .)


state 9

    (8) instruction -> for_instruction .
    RETURN          reduce using rule 8 (instruction -> for_instruction .)
    CONTINUE        reduce using rule 8 (instruction -> for_instruction .)
    BREAK           reduce using rule 8 (instruction -> for_instruction .)
    {               reduce using rule 8 (instruction -> for_instruction .)
    PRINT           reduce using rule 8 (instruction -> for_instruction .)
    (               reduce using rule 8 (instruction -> for_instruction .)
    FOR             reduce using rule 8 (instruction -> for_instruction .)
    WHILE           reduce using rule 8 (instruction -> for_instruction .)
    IF              reduce using rule 8 (instruction -> for_instruction .)
    ID              reduce using rule 8 (instruction -> for_instruction .)
    [               reduce using rule 8 (instruction -> for_instruction .)
    STRING          reduce using rule 8 (instruction -> for_instruction .)
    FLOATNUM        reduce using rule 8 (instruction -> for_instruction .)
    INTNUM          reduce using rule 8 (instruction -> for_instruction .)
    EYE             reduce using rule 8 (instruction -> for_instruction .)
    ONES            reduce using rule 8 (instruction -> for_instruction .)
    ZEROS           reduce using rule 8 (instruction -> for_instruction .)
    -               reduce using rule 8 (instruction -> for_instruction .)
    $end            reduce using rule 8 (instruction -> for_instruction .)
    }               reduce using rule 8 (instruction -> for_instruction .)
    ELSE            reduce using rule 8 (instruction -> for_instruction .)


state 10

    (9) instruction -> while_instruction .
    RETURN          reduce using rule 9 (instruction -> while_instruction .)
    CONTINUE        reduce using rule 9 (instruction -> while_instruction .)
    BREAK           reduce using rule 9 (instruction -> while_instruction .)
    {               reduce using rule 9 (instruction -> while_instruction .)
    PRINT           reduce using rule 9 (instruction -> while_instruction .)
    (               reduce using rule 9 (instruction -> while_instruction .)
    FOR             reduce using rule 9 (instruction -> while_instruction .)
    WHILE           reduce using rule 9 (instruction -> while_instruction .)
    IF              reduce using rule 9 (instruction -> while_instruction .)
    ID              reduce using rule 9 (instruction -> while_instruction .)
    [               reduce using rule 9 (instruction -> while_instruction .)
    STRING          reduce using rule 9 (instruction -> while_instruction .)
    FLOATNUM        reduce using rule 9 (instruction -> while_instruction .)
    INTNUM          reduce using rule 9 (instruction -> while_instruction .)
    EYE             reduce using rule 9 (instruction -> while_instruction .)
    ONES            reduce using rule 9 (instruction -> while_instruction .)
    ZEROS           reduce using rule 9 (instruction -> while_instruction .)
    -               reduce using rule 9 (instruction -> while_instruction .)
    $end            reduce using rule 9 (instruction -> while_instruction .)
    }               reduce using rule 9 (instruction -> while_instruction .)
    ELSE            reduce using rule 9 (instruction -> while_instruction .)


state 11

    (10) instruction -> if_instruction .
    RETURN          reduce using rule 10 (instruction -> if_instruction .)
    CONTINUE        reduce using rule 10 (instruction -> if_instruction .)
    BREAK           reduce using rule 10 (instruction -> if_instruction .)
    {               reduce using rule 10 (instruction -> if_instruction .)
    PRINT           reduce using rule 10 (instruction -> if_instruction .)
    (               reduce using rule 10 (instruction -> if_instruction .)
    FOR             reduce using rule 10 (instruction -> if_instruction .)
    WHILE           reduce using rule 10 (instruction -> if_instruction .)
    IF              reduce using rule 10 (instruction -> if_instruction .)
    ID              reduce using rule 10 (instruction -> if_instruction .)
    [               reduce using rule 10 (instruction -> if_instruction .)
    STRING          reduce using rule 10 (instruction -> if_instruction .)
    FLOATNUM        reduce using rule 10 (instruction -> if_instruction .)
    INTNUM          reduce using rule 10 (instruction -> if_instruction .)
    EYE             reduce using rule 10 (instruction -> if_instruction .)
    ONES            reduce using rule 10 (instruction -> if_instruction .)
    ZEROS           reduce using rule 10 (instruction -> if_instruction .)
    -               reduce using rule 10 (instruction -> if_instruction .)
    $end            reduce using rule 10 (instruction -> if_instruction .)
    }               reduce using rule 10 (instruction -> if_instruction .)
    ELSE            reduce using rule 10 (instruction -> if_instruction .)


state 12

    (11) instruction -> { . instructions }
    (1) instructions -> . instruction
    (2) instructions -> . instructions instruction
    (3) instruction -> . RETURN right_hand_side_expression ;
    (4) instruction -> . CONTINUE ;
    (5) instruction -> . BREAK ;
    (6) instruction -> . print_instruction
    (7) instruction -> . full_line_expression
    (8) instruction -> . for_instruction
    (9) instruction -> . while_instruction
    (10) instruction -> . if_instruction
    (11) instruction -> . { instructions }
    (18) print_instruction -> . PRINT printables ;
    (44) full_line_expression -> . ( full_line_expression )
    (45) full_line_expression -> . left_hand_side_expression
    (46) full_line_expression -> . assign_expression
    (47) full_line_expression -> . right_hand_side_expression
    (15) for_instruction -> . FOR ID = id_int : id_int instruction
    (14) while_instruction -> . WHILE ( relation_expression ) instruction
    (12) if_instruction -> . IF ( relation_expression ) instruction
    (13) if_instruction -> . IF ( relation_expression ) instruction ELSE instruction
    (54) left_hand_side_expression -> . matrix_ref
    (55) left_hand_side_expression -> . ID
    (48) assign_expression -> . left_hand_side_expression DIVIDEASSIGN right_hand_side_expression ;
    (49) assign_expression -> . left_hand_side_expression TIMESASSIGN right_hand_side_expression ;
    (50) assign_expression -> . left_hand_side_expression MINUSASSIGN right_hand_side_expression ;
    (51) assign_expression -> . left_hand_side_expression PLUSASSIGN right_hand_side_expression ;
    (52) assign_expression -> . left_hand_side_expression = right_hand_side_expression ;
    (25) right_hand_side_expression -> . matrix_ref
    (26) right_hand_side_expression -> . [ ]
    (27) right_hand_side_expression -> . [ list_of_elems ]
    (28) right_hand_side_expression -> . [ vectors ]
    (29) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (36) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (37) right_hand_side_expression -> . right_hand_side_expression '
    (38) right_hand_side_expression -> . value
    (39) right_hand_side_expression -> . matrix_functions
    (40) right_hand_side_expression -> . ( right_hand_side_expression )
    (41) right_hand_side_expression -> . relation_expression
    (42) right_hand_side_expression -> . unary_minus
    (53) matrix_ref -> . ID [ list_of_ints ]
    (21) value -> . STRING
    (22) value -> . ID
    (23) value -> . FLOATNUM
    (24) value -> . INTNUM
    (62) matrix_functions -> . EYE ( INTNUM )
    (63) matrix_functions -> . ONES ( INTNUM )
    (64) matrix_functions -> . ZEROS ( INTNUM )
    (56) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (57) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (58) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (59) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (61) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (43) unary_minus -> . - right_hand_side_expression
    RETURN          shift and go to state 3
    CONTINUE        shift and go to state 5
    BREAK           shift and go to state 6
    {               shift and go to state 12
    PRINT           shift and go to state 13
    (               shift and go to state 14
    FOR             shift and go to state 17
    WHILE           shift and go to state 19
    IF              shift and go to state 21
    ID              shift and go to state 18
    [               shift and go to state 23
    STRING          shift and go to state 28
    FLOATNUM        shift and go to state 29
    INTNUM          shift and go to state 30
    EYE             shift and go to state 31
    ONES            shift and go to state 32
    ZEROS           shift and go to state 33
    -               shift and go to state 24

    instructions                   shift and go to state 56
    instruction                    shift and go to state 2
    right_hand_side_expression     shift and go to state 4
    print_instruction              shift and go to state 7
    full_line_expression           shift and go to state 8
    for_instruction                shift and go to state 9
    while_instruction              shift and go to state 10
    if_instruction                 shift and go to state 11
    left_hand_side_expression      shift and go to state 15
    assign_expression              shift and go to state 16
    relation_expression            shift and go to state 20
    matrix_ref                     shift and go to state 22
    value                          shift and go to state 25
    matrix_functions               shift and go to state 26
    unary_minus                    shift and go to state 27

state 13

    (18) print_instruction -> PRINT . printables ;
    (19) printables -> . value
    (20) printables -> . printables , value
    (21) value -> . STRING
    (22) value -> . ID
    (23) value -> . FLOATNUM
    (24) value -> . INTNUM
    STRING          shift and go to state 28
    ID              shift and go to state 59
    FLOATNUM        shift and go to state 29
    INTNUM          shift and go to state 30

    printables                     shift and go to state 57
    value                          shift and go to state 58

state 14

    (44) full_line_expression -> ( . full_line_expression )
    (40) right_hand_side_expression -> ( . right_hand_side_expression )
    (44) full_line_expression -> . ( full_line_expression )
    (45) full_line_expression -> . left_hand_side_expression
    (46) full_line_expression -> . assign_expression
    (47) full_line_expression -> . right_hand_side_expression
    (25) right_hand_side_expression -> . matrix_ref
    (26) right_hand_side_expression -> . [ ]
    (27) right_hand_side_expression -> . [ list_of_elems ]
    (28) right_hand_side_expression -> . [ vectors ]
    (29) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (36) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (37) right_hand_side_expression -> . right_hand_side_expression '
    (38) right_hand_side_expression -> . value
    (39) right_hand_side_expression -> . matrix_functions
    (40) right_hand_side_expression -> . ( right_hand_side_expression )
    (41) right_hand_side_expression -> . relation_expression
    (42) right_hand_side_expression -> . unary_minus
    (54) left_hand_side_expression -> . matrix_ref
    (55) left_hand_side_expression -> . ID
    (48) assign_expression -> . left_hand_side_expression DIVIDEASSIGN right_hand_side_expression ;
    (49) assign_expression -> . left_hand_side_expression TIMESASSIGN right_hand_side_expression ;
    (50) assign_expression -> . left_hand_side_expression MINUSASSIGN right_hand_side_expression ;
    (51) assign_expression -> . left_hand_side_expression PLUSASSIGN right_hand_side_expression ;
    (52) assign_expression -> . left_hand_side_expression = right_hand_side_expression ;
    (53) matrix_ref -> . ID [ list_of_ints ]
    (21) value -> . STRING
    (22) value -> . ID
    (23) value -> . FLOATNUM
    (24) value -> . INTNUM
    (62) matrix_functions -> . EYE ( INTNUM )
    (63) matrix_functions -> . ONES ( INTNUM )
    (64) matrix_functions -> . ZEROS ( INTNUM )
    (56) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (57) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (58) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (59) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (61) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (43) unary_minus -> . - right_hand_side_expression
    (               shift and go to state 14
    [               shift and go to state 23
    ID              shift and go to state 18
    STRING          shift and go to state 28
    FLOATNUM        shift and go to state 29
    INTNUM          shift and go to state 30
    EYE             shift and go to state 31
    ONES            shift and go to state 32
    ZEROS           shift and go to state 33
    -               shift and go to state 24

    full_line_expression           shift and go to state 60
    right_hand_side_expression     shift and go to state 61
    left_hand_side_expression      shift and go to state 15
    assign_expression              shift and go to state 16
    matrix_ref                     shift and go to state 62
    value                          shift and go to state 25
    matrix_functions               shift and go to state 26
    relation_expression            shift and go to state 20
    unary_minus                    shift and go to state 27

state 15

    (45) full_line_expression -> left_hand_side_expression .
    (48) assign_expression -> left_hand_side_expression . DIVIDEASSIGN right_hand_side_expression ;
    (49) assign_expression -> left_hand_side_expression . TIMESASSIGN right_hand_side_expression ;
    (50) assign_expression -> left_hand_side_expression . MINUSASSIGN right_hand_side_expression ;
    (51) assign_expression -> left_hand_side_expression . PLUSASSIGN right_hand_side_expression ;
    (52) assign_expression -> left_hand_side_expression . = right_hand_side_expression ;
    RETURN          reduce using rule 45 (full_line_expression -> left_hand_side_expression .)
    CONTINUE        reduce using rule 45 (full_line_expression -> left_hand_side_expression .)
    BREAK           reduce using rule 45 (full_line_expression -> left_hand_side_expression .)
    {               reduce using rule 45 (full_line_expression -> left_hand_side_expression .)
    PRINT           reduce using rule 45 (full_line_expression -> left_hand_side_expression .)
    (               reduce using rule 45 (full_line_expression -> left_hand_side_expression .)
    FOR             reduce using rule 45 (full_line_expression -> left_hand_side_expression .)
    WHILE           reduce using rule 45 (full_line_expression -> left_hand_side_expression .)
    IF              reduce using rule 45 (full_line_expression -> left_hand_side_expression .)
    ID              reduce using rule 45 (full_line_expression -> left_hand_side_expression .)
    [               reduce using rule 45 (full_line_expression -> left_hand_side_expression .)
    STRING          reduce using rule 45 (full_line_expression -> left_hand_side_expression .)
    FLOATNUM        reduce using rule 45 (full_line_expression -> left_hand_side_expression .)
    INTNUM          reduce using rule 45 (full_line_expression -> left_hand_side_expression .)
    EYE             reduce using rule 45 (full_line_expression -> left_hand_side_expression .)
    ONES            reduce using rule 45 (full_line_expression -> left_hand_side_expression .)
    ZEROS           reduce using rule 45 (full_line_expression -> left_hand_side_expression .)
    -               reduce using rule 45 (full_line_expression -> left_hand_side_expression .)
    $end            reduce using rule 45 (full_line_expression -> left_hand_side_expression .)
    }               reduce using rule 45 (full_line_expression -> left_hand_side_expression .)
    )               reduce using rule 45 (full_line_expression -> left_hand_side_expression .)
    ELSE            reduce using rule 45 (full_line_expression -> left_hand_side_expression .)
    DIVIDEASSIGN    shift and go to state 63
    TIMESASSIGN     shift and go to state 64
    MINUSASSIGN     shift and go to state 65
    PLUSASSIGN      shift and go to state 66
    =               shift and go to state 67


state 16

    (46) full_line_expression -> assign_expression .
    RETURN          reduce using rule 46 (full_line_expression -> assign_expression .)
    CONTINUE        reduce using rule 46 (full_line_expression -> assign_expression .)
    BREAK           reduce using rule 46 (full_line_expression -> assign_expression .)
    {               reduce using rule 46 (full_line_expression -> assign_expression .)
    PRINT           reduce using rule 46 (full_line_expression -> assign_expression .)
    (               reduce using rule 46 (full_line_expression -> assign_expression .)
    FOR             reduce using rule 46 (full_line_expression -> assign_expression .)
    WHILE           reduce using rule 46 (full_line_expression -> assign_expression .)
    IF              reduce using rule 46 (full_line_expression -> assign_expression .)
    ID              reduce using rule 46 (full_line_expression -> assign_expression .)
    [               reduce using rule 46 (full_line_expression -> assign_expression .)
    STRING          reduce using rule 46 (full_line_expression -> assign_expression .)
    FLOATNUM        reduce using rule 46 (full_line_expression -> assign_expression .)
    INTNUM          reduce using rule 46 (full_line_expression -> assign_expression .)
    EYE             reduce using rule 46 (full_line_expression -> assign_expression .)
    ONES            reduce using rule 46 (full_line_expression -> assign_expression .)
    ZEROS           reduce using rule 46 (full_line_expression -> assign_expression .)
    -               reduce using rule 46 (full_line_expression -> assign_expression .)
    $end            reduce using rule 46 (full_line_expression -> assign_expression .)
    }               reduce using rule 46 (full_line_expression -> assign_expression .)
    )               reduce using rule 46 (full_line_expression -> assign_expression .)
    ELSE            reduce using rule 46 (full_line_expression -> assign_expression .)


state 17

    (15) for_instruction -> FOR . ID = id_int : id_int instruction
    ID              shift and go to state 68


state 18

    (55) left_hand_side_expression -> ID .
    (53) matrix_ref -> ID . [ list_of_ints ]
    (22) value -> ID .
  ! shift/reduce conflict for [ resolved as shift
  ! reduce/reduce conflict for - resolved using rule 22 (value -> ID .)
  ! reduce/reduce conflict for RETURN resolved using rule 22 (value -> ID .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 22 (value -> ID .)
  ! reduce/reduce conflict for BREAK resolved using rule 22 (value -> ID .)
  ! reduce/reduce conflict for { resolved using rule 22 (value -> ID .)
  ! reduce/reduce conflict for PRINT resolved using rule 22 (value -> ID .)
  ! reduce/reduce conflict for ( resolved using rule 22 (value -> ID .)
  ! reduce/reduce conflict for FOR resolved using rule 22 (value -> ID .)
  ! reduce/reduce conflict for WHILE resolved using rule 22 (value -> ID .)
  ! reduce/reduce conflict for IF resolved using rule 22 (value -> ID .)
  ! reduce/reduce conflict for ID resolved using rule 22 (value -> ID .)
  ! shift/reduce conflict for [ resolved as shift
  ! reduce/reduce conflict for STRING resolved using rule 22 (value -> ID .)
  ! reduce/reduce conflict for FLOATNUM resolved using rule 22 (value -> ID .)
  ! reduce/reduce conflict for INTNUM resolved using rule 22 (value -> ID .)
  ! reduce/reduce conflict for EYE resolved using rule 22 (value -> ID .)
  ! reduce/reduce conflict for ONES resolved using rule 22 (value -> ID .)
  ! reduce/reduce conflict for ZEROS resolved using rule 22 (value -> ID .)
  ! reduce/reduce conflict for $end resolved using rule 22 (value -> ID .)
  ! reduce/reduce conflict for } resolved using rule 22 (value -> ID .)
  ! reduce/reduce conflict for ) resolved using rule 22 (value -> ID .)
  ! reduce/reduce conflict for ELSE resolved using rule 22 (value -> ID .)
    DIVIDEASSIGN    reduce using rule 55 (left_hand_side_expression -> ID .)
    TIMESASSIGN     reduce using rule 55 (left_hand_side_expression -> ID .)
    MINUSASSIGN     reduce using rule 55 (left_hand_side_expression -> ID .)
    PLUSASSIGN      reduce using rule 55 (left_hand_side_expression -> ID .)
    =               reduce using rule 55 (left_hand_side_expression -> ID .)
    [               shift and go to state 69
    DOTDIVIDE       reduce using rule 22 (value -> ID .)
    DOTTIMES        reduce using rule 22 (value -> ID .)
    DOTMINUS        reduce using rule 22 (value -> ID .)
    DOTPLUS         reduce using rule 22 (value -> ID .)
    /               reduce using rule 22 (value -> ID .)
    *               reduce using rule 22 (value -> ID .)
    -               reduce using rule 22 (value -> ID .)
    +               reduce using rule 22 (value -> ID .)
    '               reduce using rule 22 (value -> ID .)
    NE              reduce using rule 22 (value -> ID .)
    EQ              reduce using rule 22 (value -> ID .)
    GE              reduce using rule 22 (value -> ID .)
    LE              reduce using rule 22 (value -> ID .)
    GT              reduce using rule 22 (value -> ID .)
    LT              reduce using rule 22 (value -> ID .)
    RETURN          reduce using rule 22 (value -> ID .)
    CONTINUE        reduce using rule 22 (value -> ID .)
    BREAK           reduce using rule 22 (value -> ID .)
    {               reduce using rule 22 (value -> ID .)
    PRINT           reduce using rule 22 (value -> ID .)
    (               reduce using rule 22 (value -> ID .)
    FOR             reduce using rule 22 (value -> ID .)
    WHILE           reduce using rule 22 (value -> ID .)
    IF              reduce using rule 22 (value -> ID .)
    ID              reduce using rule 22 (value -> ID .)
    STRING          reduce using rule 22 (value -> ID .)
    FLOATNUM        reduce using rule 22 (value -> ID .)
    INTNUM          reduce using rule 22 (value -> ID .)
    EYE             reduce using rule 22 (value -> ID .)
    ONES            reduce using rule 22 (value -> ID .)
    ZEROS           reduce using rule 22 (value -> ID .)
    $end            reduce using rule 22 (value -> ID .)
    }               reduce using rule 22 (value -> ID .)
    )               reduce using rule 22 (value -> ID .)
    ELSE            reduce using rule 22 (value -> ID .)


state 19

    (14) while_instruction -> WHILE . ( relation_expression ) instruction
    (               shift and go to state 70


state 20

    (41) right_hand_side_expression -> relation_expression .
    DOTDIVIDE       reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    DOTTIMES        reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    DOTMINUS        reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    DOTPLUS         reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    /               reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    *               reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    -               reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    +               reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    '               reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    NE              reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    EQ              reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    GE              reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    LE              reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    GT              reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    LT              reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    RETURN          reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    CONTINUE        reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    BREAK           reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    {               reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    PRINT           reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    (               reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    FOR             reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    WHILE           reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    IF              reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    ID              reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    [               reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    STRING          reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    FLOATNUM        reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    INTNUM          reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    EYE             reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    ONES            reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    ZEROS           reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    $end            reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    ;               reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    }               reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    )               reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    ELSE            reduce using rule 41 (right_hand_side_expression -> relation_expression .)


state 21

    (12) if_instruction -> IF . ( relation_expression ) instruction
    (13) if_instruction -> IF . ( relation_expression ) instruction ELSE instruction
    (               shift and go to state 71


state 22

    (54) left_hand_side_expression -> matrix_ref .
    (25) right_hand_side_expression -> matrix_ref .
  ! reduce/reduce conflict for - resolved using rule 25 (right_hand_side_expression -> matrix_ref .)
  ! reduce/reduce conflict for RETURN resolved using rule 25 (right_hand_side_expression -> matrix_ref .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 25 (right_hand_side_expression -> matrix_ref .)
  ! reduce/reduce conflict for BREAK resolved using rule 25 (right_hand_side_expression -> matrix_ref .)
  ! reduce/reduce conflict for { resolved using rule 25 (right_hand_side_expression -> matrix_ref .)
  ! reduce/reduce conflict for PRINT resolved using rule 25 (right_hand_side_expression -> matrix_ref .)
  ! reduce/reduce conflict for ( resolved using rule 25 (right_hand_side_expression -> matrix_ref .)
  ! reduce/reduce conflict for FOR resolved using rule 25 (right_hand_side_expression -> matrix_ref .)
  ! reduce/reduce conflict for WHILE resolved using rule 25 (right_hand_side_expression -> matrix_ref .)
  ! reduce/reduce conflict for IF resolved using rule 25 (right_hand_side_expression -> matrix_ref .)
  ! reduce/reduce conflict for ID resolved using rule 25 (right_hand_side_expression -> matrix_ref .)
  ! reduce/reduce conflict for [ resolved using rule 25 (right_hand_side_expression -> matrix_ref .)
  ! reduce/reduce conflict for STRING resolved using rule 25 (right_hand_side_expression -> matrix_ref .)
  ! reduce/reduce conflict for FLOATNUM resolved using rule 25 (right_hand_side_expression -> matrix_ref .)
  ! reduce/reduce conflict for INTNUM resolved using rule 25 (right_hand_side_expression -> matrix_ref .)
  ! reduce/reduce conflict for EYE resolved using rule 25 (right_hand_side_expression -> matrix_ref .)
  ! reduce/reduce conflict for ONES resolved using rule 25 (right_hand_side_expression -> matrix_ref .)
  ! reduce/reduce conflict for ZEROS resolved using rule 25 (right_hand_side_expression -> matrix_ref .)
  ! reduce/reduce conflict for $end resolved using rule 25 (right_hand_side_expression -> matrix_ref .)
  ! reduce/reduce conflict for } resolved using rule 25 (right_hand_side_expression -> matrix_ref .)
  ! reduce/reduce conflict for ELSE resolved using rule 25 (right_hand_side_expression -> matrix_ref .)
    DIVIDEASSIGN    reduce using rule 54 (left_hand_side_expression -> matrix_ref .)
    TIMESASSIGN     reduce using rule 54 (left_hand_side_expression -> matrix_ref .)
    MINUSASSIGN     reduce using rule 54 (left_hand_side_expression -> matrix_ref .)
    PLUSASSIGN      reduce using rule 54 (left_hand_side_expression -> matrix_ref .)
    =               reduce using rule 54 (left_hand_side_expression -> matrix_ref .)
    DOTDIVIDE       reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    DOTTIMES        reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    DOTMINUS        reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    DOTPLUS         reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    /               reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    *               reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    -               reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    +               reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    '               reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    NE              reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    EQ              reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    GE              reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    LE              reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    GT              reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    LT              reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    RETURN          reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    CONTINUE        reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    BREAK           reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    {               reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    PRINT           reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    (               reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    FOR             reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    WHILE           reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    IF              reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    ID              reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    [               reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    STRING          reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    FLOATNUM        reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    INTNUM          reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    EYE             reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    ONES            reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    ZEROS           reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    $end            reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    }               reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    ELSE            reduce using rule 25 (right_hand_side_expression -> matrix_ref .)


state 23

    (26) right_hand_side_expression -> [ . ]
    (27) right_hand_side_expression -> [ . list_of_elems ]
    (28) right_hand_side_expression -> [ . vectors ]
    (69) list_of_elems -> . list_of_elems , value
    (70) list_of_elems -> . value
    (65) vectors -> . vectors , [ ]
    (66) vectors -> . [ ]
    (67) vectors -> . vectors , [ list_of_elems ]
    (68) vectors -> . [ list_of_elems ]
    (21) value -> . STRING
    (22) value -> . ID
    (23) value -> . FLOATNUM
    (24) value -> . INTNUM
    ]               shift and go to state 73
    [               shift and go to state 72
    STRING          shift and go to state 28
    ID              shift and go to state 59
    FLOATNUM        shift and go to state 29
    INTNUM          shift and go to state 30

    list_of_elems                  shift and go to state 74
    vectors                        shift and go to state 75
    value                          shift and go to state 76

state 24

    (43) unary_minus -> - . right_hand_side_expression
    (25) right_hand_side_expression -> . matrix_ref
    (26) right_hand_side_expression -> . [ ]
    (27) right_hand_side_expression -> . [ list_of_elems ]
    (28) right_hand_side_expression -> . [ vectors ]
    (29) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (36) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (37) right_hand_side_expression -> . right_hand_side_expression '
    (38) right_hand_side_expression -> . value
    (39) right_hand_side_expression -> . matrix_functions
    (40) right_hand_side_expression -> . ( right_hand_side_expression )
    (41) right_hand_side_expression -> . relation_expression
    (42) right_hand_side_expression -> . unary_minus
    (53) matrix_ref -> . ID [ list_of_ints ]
    (21) value -> . STRING
    (22) value -> . ID
    (23) value -> . FLOATNUM
    (24) value -> . INTNUM
    (62) matrix_functions -> . EYE ( INTNUM )
    (63) matrix_functions -> . ONES ( INTNUM )
    (64) matrix_functions -> . ZEROS ( INTNUM )
    (56) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (57) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (58) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (59) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (61) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (43) unary_minus -> . - right_hand_side_expression
    [               shift and go to state 23
    (               shift and go to state 37
    ID              shift and go to state 38
    STRING          shift and go to state 28
    FLOATNUM        shift and go to state 29
    INTNUM          shift and go to state 30
    EYE             shift and go to state 31
    ONES            shift and go to state 32
    ZEROS           shift and go to state 33
    -               shift and go to state 24

    right_hand_side_expression     shift and go to state 77
    matrix_ref                     shift and go to state 36
    value                          shift and go to state 25
    matrix_functions               shift and go to state 26
    relation_expression            shift and go to state 20
    unary_minus                    shift and go to state 27

state 25

    (38) right_hand_side_expression -> value .
    DOTDIVIDE       reduce using rule 38 (right_hand_side_expression -> value .)
    DOTTIMES        reduce using rule 38 (right_hand_side_expression -> value .)
    DOTMINUS        reduce using rule 38 (right_hand_side_expression -> value .)
    DOTPLUS         reduce using rule 38 (right_hand_side_expression -> value .)
    /               reduce using rule 38 (right_hand_side_expression -> value .)
    *               reduce using rule 38 (right_hand_side_expression -> value .)
    -               reduce using rule 38 (right_hand_side_expression -> value .)
    +               reduce using rule 38 (right_hand_side_expression -> value .)
    '               reduce using rule 38 (right_hand_side_expression -> value .)
    NE              reduce using rule 38 (right_hand_side_expression -> value .)
    EQ              reduce using rule 38 (right_hand_side_expression -> value .)
    GE              reduce using rule 38 (right_hand_side_expression -> value .)
    LE              reduce using rule 38 (right_hand_side_expression -> value .)
    GT              reduce using rule 38 (right_hand_side_expression -> value .)
    LT              reduce using rule 38 (right_hand_side_expression -> value .)
    RETURN          reduce using rule 38 (right_hand_side_expression -> value .)
    CONTINUE        reduce using rule 38 (right_hand_side_expression -> value .)
    BREAK           reduce using rule 38 (right_hand_side_expression -> value .)
    {               reduce using rule 38 (right_hand_side_expression -> value .)
    PRINT           reduce using rule 38 (right_hand_side_expression -> value .)
    (               reduce using rule 38 (right_hand_side_expression -> value .)
    FOR             reduce using rule 38 (right_hand_side_expression -> value .)
    WHILE           reduce using rule 38 (right_hand_side_expression -> value .)
    IF              reduce using rule 38 (right_hand_side_expression -> value .)
    ID              reduce using rule 38 (right_hand_side_expression -> value .)
    [               reduce using rule 38 (right_hand_side_expression -> value .)
    STRING          reduce using rule 38 (right_hand_side_expression -> value .)
    FLOATNUM        reduce using rule 38 (right_hand_side_expression -> value .)
    INTNUM          reduce using rule 38 (right_hand_side_expression -> value .)
    EYE             reduce using rule 38 (right_hand_side_expression -> value .)
    ONES            reduce using rule 38 (right_hand_side_expression -> value .)
    ZEROS           reduce using rule 38 (right_hand_side_expression -> value .)
    $end            reduce using rule 38 (right_hand_side_expression -> value .)
    ;               reduce using rule 38 (right_hand_side_expression -> value .)
    }               reduce using rule 38 (right_hand_side_expression -> value .)
    )               reduce using rule 38 (right_hand_side_expression -> value .)
    ELSE            reduce using rule 38 (right_hand_side_expression -> value .)


state 26

    (39) right_hand_side_expression -> matrix_functions .
    DOTDIVIDE       reduce using rule 39 (right_hand_side_expression -> matrix_functions .)
    DOTTIMES        reduce using rule 39 (right_hand_side_expression -> matrix_functions .)
    DOTMINUS        reduce using rule 39 (right_hand_side_expression -> matrix_functions .)
    DOTPLUS         reduce using rule 39 (right_hand_side_expression -> matrix_functions .)
    /               reduce using rule 39 (right_hand_side_expression -> matrix_functions .)
    *               reduce using rule 39 (right_hand_side_expression -> matrix_functions .)
    -               reduce using rule 39 (right_hand_side_expression -> matrix_functions .)
    +               reduce using rule 39 (right_hand_side_expression -> matrix_functions .)
    '               reduce using rule 39 (right_hand_side_expression -> matrix_functions .)
    NE              reduce using rule 39 (right_hand_side_expression -> matrix_functions .)
    EQ              reduce using rule 39 (right_hand_side_expression -> matrix_functions .)
    GE              reduce using rule 39 (right_hand_side_expression -> matrix_functions .)
    LE              reduce using rule 39 (right_hand_side_expression -> matrix_functions .)
    GT              reduce using rule 39 (right_hand_side_expression -> matrix_functions .)
    LT              reduce using rule 39 (right_hand_side_expression -> matrix_functions .)
    RETURN          reduce using rule 39 (right_hand_side_expression -> matrix_functions .)
    CONTINUE        reduce using rule 39 (right_hand_side_expression -> matrix_functions .)
    BREAK           reduce using rule 39 (right_hand_side_expression -> matrix_functions .)
    {               reduce using rule 39 (right_hand_side_expression -> matrix_functions .)
    PRINT           reduce using rule 39 (right_hand_side_expression -> matrix_functions .)
    (               reduce using rule 39 (right_hand_side_expression -> matrix_functions .)
    FOR             reduce using rule 39 (right_hand_side_expression -> matrix_functions .)
    WHILE           reduce using rule 39 (right_hand_side_expression -> matrix_functions .)
    IF              reduce using rule 39 (right_hand_side_expression -> matrix_functions .)
    ID              reduce using rule 39 (right_hand_side_expression -> matrix_functions .)
    [               reduce using rule 39 (right_hand_side_expression -> matrix_functions .)
    STRING          reduce using rule 39 (right_hand_side_expression -> matrix_functions .)
    FLOATNUM        reduce using rule 39 (right_hand_side_expression -> matrix_functions .)
    INTNUM          reduce using rule 39 (right_hand_side_expression -> matrix_functions .)
    EYE             reduce using rule 39 (right_hand_side_expression -> matrix_functions .)
    ONES            reduce using rule 39 (right_hand_side_expression -> matrix_functions .)
    ZEROS           reduce using rule 39 (right_hand_side_expression -> matrix_functions .)
    $end            reduce using rule 39 (right_hand_side_expression -> matrix_functions .)
    ;               reduce using rule 39 (right_hand_side_expression -> matrix_functions .)
    }               reduce using rule 39 (right_hand_side_expression -> matrix_functions .)
    )               reduce using rule 39 (right_hand_side_expression -> matrix_functions .)
    ELSE            reduce using rule 39 (right_hand_side_expression -> matrix_functions .)


state 27

    (42) right_hand_side_expression -> unary_minus .
    DOTDIVIDE       reduce using rule 42 (right_hand_side_expression -> unary_minus .)
    DOTTIMES        reduce using rule 42 (right_hand_side_expression -> unary_minus .)
    DOTMINUS        reduce using rule 42 (right_hand_side_expression -> unary_minus .)
    DOTPLUS         reduce using rule 42 (right_hand_side_expression -> unary_minus .)
    /               reduce using rule 42 (right_hand_side_expression -> unary_minus .)
    *               reduce using rule 42 (right_hand_side_expression -> unary_minus .)
    -               reduce using rule 42 (right_hand_side_expression -> unary_minus .)
    +               reduce using rule 42 (right_hand_side_expression -> unary_minus .)
    '               reduce using rule 42 (right_hand_side_expression -> unary_minus .)
    NE              reduce using rule 42 (right_hand_side_expression -> unary_minus .)
    EQ              reduce using rule 42 (right_hand_side_expression -> unary_minus .)
    GE              reduce using rule 42 (right_hand_side_expression -> unary_minus .)
    LE              reduce using rule 42 (right_hand_side_expression -> unary_minus .)
    GT              reduce using rule 42 (right_hand_side_expression -> unary_minus .)
    LT              reduce using rule 42 (right_hand_side_expression -> unary_minus .)
    RETURN          reduce using rule 42 (right_hand_side_expression -> unary_minus .)
    CONTINUE        reduce using rule 42 (right_hand_side_expression -> unary_minus .)
    BREAK           reduce using rule 42 (right_hand_side_expression -> unary_minus .)
    {               reduce using rule 42 (right_hand_side_expression -> unary_minus .)
    PRINT           reduce using rule 42 (right_hand_side_expression -> unary_minus .)
    (               reduce using rule 42 (right_hand_side_expression -> unary_minus .)
    FOR             reduce using rule 42 (right_hand_side_expression -> unary_minus .)
    WHILE           reduce using rule 42 (right_hand_side_expression -> unary_minus .)
    IF              reduce using rule 42 (right_hand_side_expression -> unary_minus .)
    ID              reduce using rule 42 (right_hand_side_expression -> unary_minus .)
    [               reduce using rule 42 (right_hand_side_expression -> unary_minus .)
    STRING          reduce using rule 42 (right_hand_side_expression -> unary_minus .)
    FLOATNUM        reduce using rule 42 (right_hand_side_expression -> unary_minus .)
    INTNUM          reduce using rule 42 (right_hand_side_expression -> unary_minus .)
    EYE             reduce using rule 42 (right_hand_side_expression -> unary_minus .)
    ONES            reduce using rule 42 (right_hand_side_expression -> unary_minus .)
    ZEROS           reduce using rule 42 (right_hand_side_expression -> unary_minus .)
    $end            reduce using rule 42 (right_hand_side_expression -> unary_minus .)
    ;               reduce using rule 42 (right_hand_side_expression -> unary_minus .)
    }               reduce using rule 42 (right_hand_side_expression -> unary_minus .)
    )               reduce using rule 42 (right_hand_side_expression -> unary_minus .)
    ELSE            reduce using rule 42 (right_hand_side_expression -> unary_minus .)


state 28

    (21) value -> STRING .
    DOTDIVIDE       reduce using rule 21 (value -> STRING .)
    DOTTIMES        reduce using rule 21 (value -> STRING .)
    DOTMINUS        reduce using rule 21 (value -> STRING .)
    DOTPLUS         reduce using rule 21 (value -> STRING .)
    /               reduce using rule 21 (value -> STRING .)
    *               reduce using rule 21 (value -> STRING .)
    -               reduce using rule 21 (value -> STRING .)
    +               reduce using rule 21 (value -> STRING .)
    '               reduce using rule 21 (value -> STRING .)
    NE              reduce using rule 21 (value -> STRING .)
    EQ              reduce using rule 21 (value -> STRING .)
    GE              reduce using rule 21 (value -> STRING .)
    LE              reduce using rule 21 (value -> STRING .)
    GT              reduce using rule 21 (value -> STRING .)
    LT              reduce using rule 21 (value -> STRING .)
    RETURN          reduce using rule 21 (value -> STRING .)
    CONTINUE        reduce using rule 21 (value -> STRING .)
    BREAK           reduce using rule 21 (value -> STRING .)
    {               reduce using rule 21 (value -> STRING .)
    PRINT           reduce using rule 21 (value -> STRING .)
    (               reduce using rule 21 (value -> STRING .)
    FOR             reduce using rule 21 (value -> STRING .)
    WHILE           reduce using rule 21 (value -> STRING .)
    IF              reduce using rule 21 (value -> STRING .)
    ID              reduce using rule 21 (value -> STRING .)
    [               reduce using rule 21 (value -> STRING .)
    STRING          reduce using rule 21 (value -> STRING .)
    FLOATNUM        reduce using rule 21 (value -> STRING .)
    INTNUM          reduce using rule 21 (value -> STRING .)
    EYE             reduce using rule 21 (value -> STRING .)
    ONES            reduce using rule 21 (value -> STRING .)
    ZEROS           reduce using rule 21 (value -> STRING .)
    $end            reduce using rule 21 (value -> STRING .)
    ;               reduce using rule 21 (value -> STRING .)
    }               reduce using rule 21 (value -> STRING .)
    ,               reduce using rule 21 (value -> STRING .)
    )               reduce using rule 21 (value -> STRING .)
    ]               reduce using rule 21 (value -> STRING .)
    ELSE            reduce using rule 21 (value -> STRING .)


state 29

    (23) value -> FLOATNUM .
    DOTDIVIDE       reduce using rule 23 (value -> FLOATNUM .)
    DOTTIMES        reduce using rule 23 (value -> FLOATNUM .)
    DOTMINUS        reduce using rule 23 (value -> FLOATNUM .)
    DOTPLUS         reduce using rule 23 (value -> FLOATNUM .)
    /               reduce using rule 23 (value -> FLOATNUM .)
    *               reduce using rule 23 (value -> FLOATNUM .)
    -               reduce using rule 23 (value -> FLOATNUM .)
    +               reduce using rule 23 (value -> FLOATNUM .)
    '               reduce using rule 23 (value -> FLOATNUM .)
    NE              reduce using rule 23 (value -> FLOATNUM .)
    EQ              reduce using rule 23 (value -> FLOATNUM .)
    GE              reduce using rule 23 (value -> FLOATNUM .)
    LE              reduce using rule 23 (value -> FLOATNUM .)
    GT              reduce using rule 23 (value -> FLOATNUM .)
    LT              reduce using rule 23 (value -> FLOATNUM .)
    RETURN          reduce using rule 23 (value -> FLOATNUM .)
    CONTINUE        reduce using rule 23 (value -> FLOATNUM .)
    BREAK           reduce using rule 23 (value -> FLOATNUM .)
    {               reduce using rule 23 (value -> FLOATNUM .)
    PRINT           reduce using rule 23 (value -> FLOATNUM .)
    (               reduce using rule 23 (value -> FLOATNUM .)
    FOR             reduce using rule 23 (value -> FLOATNUM .)
    WHILE           reduce using rule 23 (value -> FLOATNUM .)
    IF              reduce using rule 23 (value -> FLOATNUM .)
    ID              reduce using rule 23 (value -> FLOATNUM .)
    [               reduce using rule 23 (value -> FLOATNUM .)
    STRING          reduce using rule 23 (value -> FLOATNUM .)
    FLOATNUM        reduce using rule 23 (value -> FLOATNUM .)
    INTNUM          reduce using rule 23 (value -> FLOATNUM .)
    EYE             reduce using rule 23 (value -> FLOATNUM .)
    ONES            reduce using rule 23 (value -> FLOATNUM .)
    ZEROS           reduce using rule 23 (value -> FLOATNUM .)
    $end            reduce using rule 23 (value -> FLOATNUM .)
    ;               reduce using rule 23 (value -> FLOATNUM .)
    }               reduce using rule 23 (value -> FLOATNUM .)
    ,               reduce using rule 23 (value -> FLOATNUM .)
    )               reduce using rule 23 (value -> FLOATNUM .)
    ]               reduce using rule 23 (value -> FLOATNUM .)
    ELSE            reduce using rule 23 (value -> FLOATNUM .)


state 30

    (24) value -> INTNUM .
    DOTDIVIDE       reduce using rule 24 (value -> INTNUM .)
    DOTTIMES        reduce using rule 24 (value -> INTNUM .)
    DOTMINUS        reduce using rule 24 (value -> INTNUM .)
    DOTPLUS         reduce using rule 24 (value -> INTNUM .)
    /               reduce using rule 24 (value -> INTNUM .)
    *               reduce using rule 24 (value -> INTNUM .)
    -               reduce using rule 24 (value -> INTNUM .)
    +               reduce using rule 24 (value -> INTNUM .)
    '               reduce using rule 24 (value -> INTNUM .)
    NE              reduce using rule 24 (value -> INTNUM .)
    EQ              reduce using rule 24 (value -> INTNUM .)
    GE              reduce using rule 24 (value -> INTNUM .)
    LE              reduce using rule 24 (value -> INTNUM .)
    GT              reduce using rule 24 (value -> INTNUM .)
    LT              reduce using rule 24 (value -> INTNUM .)
    RETURN          reduce using rule 24 (value -> INTNUM .)
    CONTINUE        reduce using rule 24 (value -> INTNUM .)
    BREAK           reduce using rule 24 (value -> INTNUM .)
    {               reduce using rule 24 (value -> INTNUM .)
    PRINT           reduce using rule 24 (value -> INTNUM .)
    (               reduce using rule 24 (value -> INTNUM .)
    FOR             reduce using rule 24 (value -> INTNUM .)
    WHILE           reduce using rule 24 (value -> INTNUM .)
    IF              reduce using rule 24 (value -> INTNUM .)
    ID              reduce using rule 24 (value -> INTNUM .)
    [               reduce using rule 24 (value -> INTNUM .)
    STRING          reduce using rule 24 (value -> INTNUM .)
    FLOATNUM        reduce using rule 24 (value -> INTNUM .)
    INTNUM          reduce using rule 24 (value -> INTNUM .)
    EYE             reduce using rule 24 (value -> INTNUM .)
    ONES            reduce using rule 24 (value -> INTNUM .)
    ZEROS           reduce using rule 24 (value -> INTNUM .)
    $end            reduce using rule 24 (value -> INTNUM .)
    ;               reduce using rule 24 (value -> INTNUM .)
    }               reduce using rule 24 (value -> INTNUM .)
    ,               reduce using rule 24 (value -> INTNUM .)
    )               reduce using rule 24 (value -> INTNUM .)
    ]               reduce using rule 24 (value -> INTNUM .)
    ELSE            reduce using rule 24 (value -> INTNUM .)


state 31

    (62) matrix_functions -> EYE . ( INTNUM )
    (               shift and go to state 78


state 32

    (63) matrix_functions -> ONES . ( INTNUM )
    (               shift and go to state 79


state 33

    (64) matrix_functions -> ZEROS . ( INTNUM )
    (               shift and go to state 80


state 34

    (2) instructions -> instructions instruction .
    RETURN          reduce using rule 2 (instructions -> instructions instruction .)
    CONTINUE        reduce using rule 2 (instructions -> instructions instruction .)
    BREAK           reduce using rule 2 (instructions -> instructions instruction .)
    {               reduce using rule 2 (instructions -> instructions instruction .)
    PRINT           reduce using rule 2 (instructions -> instructions instruction .)
    (               reduce using rule 2 (instructions -> instructions instruction .)
    FOR             reduce using rule 2 (instructions -> instructions instruction .)
    WHILE           reduce using rule 2 (instructions -> instructions instruction .)
    IF              reduce using rule 2 (instructions -> instructions instruction .)
    ID              reduce using rule 2 (instructions -> instructions instruction .)
    [               reduce using rule 2 (instructions -> instructions instruction .)
    STRING          reduce using rule 2 (instructions -> instructions instruction .)
    FLOATNUM        reduce using rule 2 (instructions -> instructions instruction .)
    INTNUM          reduce using rule 2 (instructions -> instructions instruction .)
    EYE             reduce using rule 2 (instructions -> instructions instruction .)
    ONES            reduce using rule 2 (instructions -> instructions instruction .)
    ZEROS           reduce using rule 2 (instructions -> instructions instruction .)
    -               reduce using rule 2 (instructions -> instructions instruction .)
    $end            reduce using rule 2 (instructions -> instructions instruction .)
    }               reduce using rule 2 (instructions -> instructions instruction .)


state 35

    (3) instruction -> RETURN right_hand_side_expression . ;
    (29) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (36) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    (37) right_hand_side_expression -> right_hand_side_expression . '
    (56) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (57) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (58) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (59) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (61) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
    ;               shift and go to state 81
    DOTDIVIDE       shift and go to state 39
    DOTTIMES        shift and go to state 40
    DOTMINUS        shift and go to state 41
    DOTPLUS         shift and go to state 42
    /               shift and go to state 43
    *               shift and go to state 44
    -               shift and go to state 45
    +               shift and go to state 46
    '               shift and go to state 47
    NE              shift and go to state 48
    EQ              shift and go to state 49
    GE              shift and go to state 50
    LE              shift and go to state 51
    GT              shift and go to state 52
    LT              shift and go to state 53


state 36

    (25) right_hand_side_expression -> matrix_ref .
    ;               reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    DOTDIVIDE       reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    DOTTIMES        reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    DOTMINUS        reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    DOTPLUS         reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    /               reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    *               reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    -               reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    +               reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    '               reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    NE              reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    EQ              reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    GE              reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    LE              reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    GT              reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    LT              reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    RETURN          reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    CONTINUE        reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    BREAK           reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    {               reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    PRINT           reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    (               reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    FOR             reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    WHILE           reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    IF              reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    ID              reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    [               reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    STRING          reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    FLOATNUM        reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    INTNUM          reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    EYE             reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    ONES            reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    ZEROS           reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    $end            reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    }               reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    )               reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    ELSE            reduce using rule 25 (right_hand_side_expression -> matrix_ref .)


state 37

    (40) right_hand_side_expression -> ( . right_hand_side_expression )
    (25) right_hand_side_expression -> . matrix_ref
    (26) right_hand_side_expression -> . [ ]
    (27) right_hand_side_expression -> . [ list_of_elems ]
    (28) right_hand_side_expression -> . [ vectors ]
    (29) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (36) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (37) right_hand_side_expression -> . right_hand_side_expression '
    (38) right_hand_side_expression -> . value
    (39) right_hand_side_expression -> . matrix_functions
    (40) right_hand_side_expression -> . ( right_hand_side_expression )
    (41) right_hand_side_expression -> . relation_expression
    (42) right_hand_side_expression -> . unary_minus
    (53) matrix_ref -> . ID [ list_of_ints ]
    (21) value -> . STRING
    (22) value -> . ID
    (23) value -> . FLOATNUM
    (24) value -> . INTNUM
    (62) matrix_functions -> . EYE ( INTNUM )
    (63) matrix_functions -> . ONES ( INTNUM )
    (64) matrix_functions -> . ZEROS ( INTNUM )
    (56) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (57) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (58) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (59) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (61) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (43) unary_minus -> . - right_hand_side_expression
    [               shift and go to state 23
    (               shift and go to state 37
    ID              shift and go to state 38
    STRING          shift and go to state 28
    FLOATNUM        shift and go to state 29
    INTNUM          shift and go to state 30
    EYE             shift and go to state 31
    ONES            shift and go to state 32
    ZEROS           shift and go to state 33
    -               shift and go to state 24

    right_hand_side_expression     shift and go to state 82
    matrix_ref                     shift and go to state 36
    value                          shift and go to state 25
    matrix_functions               shift and go to state 26
    relation_expression            shift and go to state 20
    unary_minus                    shift and go to state 27

state 38

    (53) matrix_ref -> ID . [ list_of_ints ]
    (22) value -> ID .
  ! shift/reduce conflict for [ resolved as shift
    [               shift and go to state 69
    ;               reduce using rule 22 (value -> ID .)
    DOTDIVIDE       reduce using rule 22 (value -> ID .)
    DOTTIMES        reduce using rule 22 (value -> ID .)
    DOTMINUS        reduce using rule 22 (value -> ID .)
    DOTPLUS         reduce using rule 22 (value -> ID .)
    /               reduce using rule 22 (value -> ID .)
    *               reduce using rule 22 (value -> ID .)
    -               reduce using rule 22 (value -> ID .)
    +               reduce using rule 22 (value -> ID .)
    '               reduce using rule 22 (value -> ID .)
    NE              reduce using rule 22 (value -> ID .)
    EQ              reduce using rule 22 (value -> ID .)
    GE              reduce using rule 22 (value -> ID .)
    LE              reduce using rule 22 (value -> ID .)
    GT              reduce using rule 22 (value -> ID .)
    LT              reduce using rule 22 (value -> ID .)
    RETURN          reduce using rule 22 (value -> ID .)
    CONTINUE        reduce using rule 22 (value -> ID .)
    BREAK           reduce using rule 22 (value -> ID .)
    {               reduce using rule 22 (value -> ID .)
    PRINT           reduce using rule 22 (value -> ID .)
    (               reduce using rule 22 (value -> ID .)
    FOR             reduce using rule 22 (value -> ID .)
    WHILE           reduce using rule 22 (value -> ID .)
    IF              reduce using rule 22 (value -> ID .)
    ID              reduce using rule 22 (value -> ID .)
    STRING          reduce using rule 22 (value -> ID .)
    FLOATNUM        reduce using rule 22 (value -> ID .)
    INTNUM          reduce using rule 22 (value -> ID .)
    EYE             reduce using rule 22 (value -> ID .)
    ONES            reduce using rule 22 (value -> ID .)
    ZEROS           reduce using rule 22 (value -> ID .)
    $end            reduce using rule 22 (value -> ID .)
    }               reduce using rule 22 (value -> ID .)
    )               reduce using rule 22 (value -> ID .)
    ELSE            reduce using rule 22 (value -> ID .)


state 39

    (29) right_hand_side_expression -> right_hand_side_expression DOTDIVIDE . right_hand_side_expression
    (25) right_hand_side_expression -> . matrix_ref
    (26) right_hand_side_expression -> . [ ]
    (27) right_hand_side_expression -> . [ list_of_elems ]
    (28) right_hand_side_expression -> . [ vectors ]
    (29) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (36) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (37) right_hand_side_expression -> . right_hand_side_expression '
    (38) right_hand_side_expression -> . value
    (39) right_hand_side_expression -> . matrix_functions
    (40) right_hand_side_expression -> . ( right_hand_side_expression )
    (41) right_hand_side_expression -> . relation_expression
    (42) right_hand_side_expression -> . unary_minus
    (53) matrix_ref -> . ID [ list_of_ints ]
    (21) value -> . STRING
    (22) value -> . ID
    (23) value -> . FLOATNUM
    (24) value -> . INTNUM
    (62) matrix_functions -> . EYE ( INTNUM )
    (63) matrix_functions -> . ONES ( INTNUM )
    (64) matrix_functions -> . ZEROS ( INTNUM )
    (56) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (57) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (58) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (59) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (61) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (43) unary_minus -> . - right_hand_side_expression
    [               shift and go to state 23
    (               shift and go to state 37
    ID              shift and go to state 38
    STRING          shift and go to state 28
    FLOATNUM        shift and go to state 29
    INTNUM          shift and go to state 30
    EYE             shift and go to state 31
    ONES            shift and go to state 32
    ZEROS           shift and go to state 33
    -               shift and go to state 24

    right_hand_side_expression     shift and go to state 83
    matrix_ref                     shift and go to state 36
    value                          shift and go to state 25
    matrix_functions               shift and go to state 26
    relation_expression            shift and go to state 20
    unary_minus                    shift and go to state 27

state 40

    (30) right_hand_side_expression -> right_hand_side_expression DOTTIMES . right_hand_side_expression
    (25) right_hand_side_expression -> . matrix_ref
    (26) right_hand_side_expression -> . [ ]
    (27) right_hand_side_expression -> . [ list_of_elems ]
    (28) right_hand_side_expression -> . [ vectors ]
    (29) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (36) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (37) right_hand_side_expression -> . right_hand_side_expression '
    (38) right_hand_side_expression -> . value
    (39) right_hand_side_expression -> . matrix_functions
    (40) right_hand_side_expression -> . ( right_hand_side_expression )
    (41) right_hand_side_expression -> . relation_expression
    (42) right_hand_side_expression -> . unary_minus
    (53) matrix_ref -> . ID [ list_of_ints ]
    (21) value -> . STRING
    (22) value -> . ID
    (23) value -> . FLOATNUM
    (24) value -> . INTNUM
    (62) matrix_functions -> . EYE ( INTNUM )
    (63) matrix_functions -> . ONES ( INTNUM )
    (64) matrix_functions -> . ZEROS ( INTNUM )
    (56) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (57) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (58) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (59) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (61) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (43) unary_minus -> . - right_hand_side_expression
    [               shift and go to state 23
    (               shift and go to state 37
    ID              shift and go to state 38
    STRING          shift and go to state 28
    FLOATNUM        shift and go to state 29
    INTNUM          shift and go to state 30
    EYE             shift and go to state 31
    ONES            shift and go to state 32
    ZEROS           shift and go to state 33
    -               shift and go to state 24

    right_hand_side_expression     shift and go to state 84
    matrix_ref                     shift and go to state 36
    value                          shift and go to state 25
    matrix_functions               shift and go to state 26
    relation_expression            shift and go to state 20
    unary_minus                    shift and go to state 27

state 41

    (31) right_hand_side_expression -> right_hand_side_expression DOTMINUS . right_hand_side_expression
    (25) right_hand_side_expression -> . matrix_ref
    (26) right_hand_side_expression -> . [ ]
    (27) right_hand_side_expression -> . [ list_of_elems ]
    (28) right_hand_side_expression -> . [ vectors ]
    (29) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (36) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (37) right_hand_side_expression -> . right_hand_side_expression '
    (38) right_hand_side_expression -> . value
    (39) right_hand_side_expression -> . matrix_functions
    (40) right_hand_side_expression -> . ( right_hand_side_expression )
    (41) right_hand_side_expression -> . relation_expression
    (42) right_hand_side_expression -> . unary_minus
    (53) matrix_ref -> . ID [ list_of_ints ]
    (21) value -> . STRING
    (22) value -> . ID
    (23) value -> . FLOATNUM
    (24) value -> . INTNUM
    (62) matrix_functions -> . EYE ( INTNUM )
    (63) matrix_functions -> . ONES ( INTNUM )
    (64) matrix_functions -> . ZEROS ( INTNUM )
    (56) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (57) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (58) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (59) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (61) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (43) unary_minus -> . - right_hand_side_expression
    [               shift and go to state 23
    (               shift and go to state 37
    ID              shift and go to state 38
    STRING          shift and go to state 28
    FLOATNUM        shift and go to state 29
    INTNUM          shift and go to state 30
    EYE             shift and go to state 31
    ONES            shift and go to state 32
    ZEROS           shift and go to state 33
    -               shift and go to state 24

    right_hand_side_expression     shift and go to state 85
    matrix_ref                     shift and go to state 36
    value                          shift and go to state 25
    matrix_functions               shift and go to state 26
    relation_expression            shift and go to state 20
    unary_minus                    shift and go to state 27

state 42

    (32) right_hand_side_expression -> right_hand_side_expression DOTPLUS . right_hand_side_expression
    (25) right_hand_side_expression -> . matrix_ref
    (26) right_hand_side_expression -> . [ ]
    (27) right_hand_side_expression -> . [ list_of_elems ]
    (28) right_hand_side_expression -> . [ vectors ]
    (29) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (36) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (37) right_hand_side_expression -> . right_hand_side_expression '
    (38) right_hand_side_expression -> . value
    (39) right_hand_side_expression -> . matrix_functions
    (40) right_hand_side_expression -> . ( right_hand_side_expression )
    (41) right_hand_side_expression -> . relation_expression
    (42) right_hand_side_expression -> . unary_minus
    (53) matrix_ref -> . ID [ list_of_ints ]
    (21) value -> . STRING
    (22) value -> . ID
    (23) value -> . FLOATNUM
    (24) value -> . INTNUM
    (62) matrix_functions -> . EYE ( INTNUM )
    (63) matrix_functions -> . ONES ( INTNUM )
    (64) matrix_functions -> . ZEROS ( INTNUM )
    (56) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (57) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (58) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (59) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (61) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (43) unary_minus -> . - right_hand_side_expression
    [               shift and go to state 23
    (               shift and go to state 37
    ID              shift and go to state 38
    STRING          shift and go to state 28
    FLOATNUM        shift and go to state 29
    INTNUM          shift and go to state 30
    EYE             shift and go to state 31
    ONES            shift and go to state 32
    ZEROS           shift and go to state 33
    -               shift and go to state 24

    right_hand_side_expression     shift and go to state 86
    matrix_ref                     shift and go to state 36
    value                          shift and go to state 25
    matrix_functions               shift and go to state 26
    relation_expression            shift and go to state 20
    unary_minus                    shift and go to state 27

state 43

    (33) right_hand_side_expression -> right_hand_side_expression / . right_hand_side_expression
    (25) right_hand_side_expression -> . matrix_ref
    (26) right_hand_side_expression -> . [ ]
    (27) right_hand_side_expression -> . [ list_of_elems ]
    (28) right_hand_side_expression -> . [ vectors ]
    (29) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (36) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (37) right_hand_side_expression -> . right_hand_side_expression '
    (38) right_hand_side_expression -> . value
    (39) right_hand_side_expression -> . matrix_functions
    (40) right_hand_side_expression -> . ( right_hand_side_expression )
    (41) right_hand_side_expression -> . relation_expression
    (42) right_hand_side_expression -> . unary_minus
    (53) matrix_ref -> . ID [ list_of_ints ]
    (21) value -> . STRING
    (22) value -> . ID
    (23) value -> . FLOATNUM
    (24) value -> . INTNUM
    (62) matrix_functions -> . EYE ( INTNUM )
    (63) matrix_functions -> . ONES ( INTNUM )
    (64) matrix_functions -> . ZEROS ( INTNUM )
    (56) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (57) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (58) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (59) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (61) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (43) unary_minus -> . - right_hand_side_expression
    [               shift and go to state 23
    (               shift and go to state 37
    ID              shift and go to state 38
    STRING          shift and go to state 28
    FLOATNUM        shift and go to state 29
    INTNUM          shift and go to state 30
    EYE             shift and go to state 31
    ONES            shift and go to state 32
    ZEROS           shift and go to state 33
    -               shift and go to state 24

    right_hand_side_expression     shift and go to state 87
    matrix_ref                     shift and go to state 36
    value                          shift and go to state 25
    matrix_functions               shift and go to state 26
    relation_expression            shift and go to state 20
    unary_minus                    shift and go to state 27

state 44

    (34) right_hand_side_expression -> right_hand_side_expression * . right_hand_side_expression
    (25) right_hand_side_expression -> . matrix_ref
    (26) right_hand_side_expression -> . [ ]
    (27) right_hand_side_expression -> . [ list_of_elems ]
    (28) right_hand_side_expression -> . [ vectors ]
    (29) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (36) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (37) right_hand_side_expression -> . right_hand_side_expression '
    (38) right_hand_side_expression -> . value
    (39) right_hand_side_expression -> . matrix_functions
    (40) right_hand_side_expression -> . ( right_hand_side_expression )
    (41) right_hand_side_expression -> . relation_expression
    (42) right_hand_side_expression -> . unary_minus
    (53) matrix_ref -> . ID [ list_of_ints ]
    (21) value -> . STRING
    (22) value -> . ID
    (23) value -> . FLOATNUM
    (24) value -> . INTNUM
    (62) matrix_functions -> . EYE ( INTNUM )
    (63) matrix_functions -> . ONES ( INTNUM )
    (64) matrix_functions -> . ZEROS ( INTNUM )
    (56) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (57) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (58) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (59) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (61) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (43) unary_minus -> . - right_hand_side_expression
    [               shift and go to state 23
    (               shift and go to state 37
    ID              shift and go to state 38
    STRING          shift and go to state 28
    FLOATNUM        shift and go to state 29
    INTNUM          shift and go to state 30
    EYE             shift and go to state 31
    ONES            shift and go to state 32
    ZEROS           shift and go to state 33
    -               shift and go to state 24

    right_hand_side_expression     shift and go to state 88
    matrix_ref                     shift and go to state 36
    value                          shift and go to state 25
    matrix_functions               shift and go to state 26
    relation_expression            shift and go to state 20
    unary_minus                    shift and go to state 27

state 45

    (35) right_hand_side_expression -> right_hand_side_expression - . right_hand_side_expression
    (25) right_hand_side_expression -> . matrix_ref
    (26) right_hand_side_expression -> . [ ]
    (27) right_hand_side_expression -> . [ list_of_elems ]
    (28) right_hand_side_expression -> . [ vectors ]
    (29) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (36) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (37) right_hand_side_expression -> . right_hand_side_expression '
    (38) right_hand_side_expression -> . value
    (39) right_hand_side_expression -> . matrix_functions
    (40) right_hand_side_expression -> . ( right_hand_side_expression )
    (41) right_hand_side_expression -> . relation_expression
    (42) right_hand_side_expression -> . unary_minus
    (53) matrix_ref -> . ID [ list_of_ints ]
    (21) value -> . STRING
    (22) value -> . ID
    (23) value -> . FLOATNUM
    (24) value -> . INTNUM
    (62) matrix_functions -> . EYE ( INTNUM )
    (63) matrix_functions -> . ONES ( INTNUM )
    (64) matrix_functions -> . ZEROS ( INTNUM )
    (56) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (57) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (58) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (59) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (61) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (43) unary_minus -> . - right_hand_side_expression
    [               shift and go to state 23
    (               shift and go to state 37
    ID              shift and go to state 38
    STRING          shift and go to state 28
    FLOATNUM        shift and go to state 29
    INTNUM          shift and go to state 30
    EYE             shift and go to state 31
    ONES            shift and go to state 32
    ZEROS           shift and go to state 33
    -               shift and go to state 24

    right_hand_side_expression     shift and go to state 89
    matrix_ref                     shift and go to state 36
    value                          shift and go to state 25
    matrix_functions               shift and go to state 26
    relation_expression            shift and go to state 20
    unary_minus                    shift and go to state 27

state 46

    (36) right_hand_side_expression -> right_hand_side_expression + . right_hand_side_expression
    (25) right_hand_side_expression -> . matrix_ref
    (26) right_hand_side_expression -> . [ ]
    (27) right_hand_side_expression -> . [ list_of_elems ]
    (28) right_hand_side_expression -> . [ vectors ]
    (29) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (36) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (37) right_hand_side_expression -> . right_hand_side_expression '
    (38) right_hand_side_expression -> . value
    (39) right_hand_side_expression -> . matrix_functions
    (40) right_hand_side_expression -> . ( right_hand_side_expression )
    (41) right_hand_side_expression -> . relation_expression
    (42) right_hand_side_expression -> . unary_minus
    (53) matrix_ref -> . ID [ list_of_ints ]
    (21) value -> . STRING
    (22) value -> . ID
    (23) value -> . FLOATNUM
    (24) value -> . INTNUM
    (62) matrix_functions -> . EYE ( INTNUM )
    (63) matrix_functions -> . ONES ( INTNUM )
    (64) matrix_functions -> . ZEROS ( INTNUM )
    (56) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (57) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (58) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (59) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (61) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (43) unary_minus -> . - right_hand_side_expression
    [               shift and go to state 23
    (               shift and go to state 37
    ID              shift and go to state 38
    STRING          shift and go to state 28
    FLOATNUM        shift and go to state 29
    INTNUM          shift and go to state 30
    EYE             shift and go to state 31
    ONES            shift and go to state 32
    ZEROS           shift and go to state 33
    -               shift and go to state 24

    right_hand_side_expression     shift and go to state 90
    matrix_ref                     shift and go to state 36
    value                          shift and go to state 25
    matrix_functions               shift and go to state 26
    relation_expression            shift and go to state 20
    unary_minus                    shift and go to state 27

state 47

    (37) right_hand_side_expression -> right_hand_side_expression ' .
    DOTDIVIDE       reduce using rule 37 (right_hand_side_expression -> right_hand_side_expression ' .)
    DOTTIMES        reduce using rule 37 (right_hand_side_expression -> right_hand_side_expression ' .)
    DOTMINUS        reduce using rule 37 (right_hand_side_expression -> right_hand_side_expression ' .)
    DOTPLUS         reduce using rule 37 (right_hand_side_expression -> right_hand_side_expression ' .)
    /               reduce using rule 37 (right_hand_side_expression -> right_hand_side_expression ' .)
    *               reduce using rule 37 (right_hand_side_expression -> right_hand_side_expression ' .)
    -               reduce using rule 37 (right_hand_side_expression -> right_hand_side_expression ' .)
    +               reduce using rule 37 (right_hand_side_expression -> right_hand_side_expression ' .)
    '               reduce using rule 37 (right_hand_side_expression -> right_hand_side_expression ' .)
    NE              reduce using rule 37 (right_hand_side_expression -> right_hand_side_expression ' .)
    EQ              reduce using rule 37 (right_hand_side_expression -> right_hand_side_expression ' .)
    GE              reduce using rule 37 (right_hand_side_expression -> right_hand_side_expression ' .)
    LE              reduce using rule 37 (right_hand_side_expression -> right_hand_side_expression ' .)
    GT              reduce using rule 37 (right_hand_side_expression -> right_hand_side_expression ' .)
    LT              reduce using rule 37 (right_hand_side_expression -> right_hand_side_expression ' .)
    RETURN          reduce using rule 37 (right_hand_side_expression -> right_hand_side_expression ' .)
    CONTINUE        reduce using rule 37 (right_hand_side_expression -> right_hand_side_expression ' .)
    BREAK           reduce using rule 37 (right_hand_side_expression -> right_hand_side_expression ' .)
    {               reduce using rule 37 (right_hand_side_expression -> right_hand_side_expression ' .)
    PRINT           reduce using rule 37 (right_hand_side_expression -> right_hand_side_expression ' .)
    (               reduce using rule 37 (right_hand_side_expression -> right_hand_side_expression ' .)
    FOR             reduce using rule 37 (right_hand_side_expression -> right_hand_side_expression ' .)
    WHILE           reduce using rule 37 (right_hand_side_expression -> right_hand_side_expression ' .)
    IF              reduce using rule 37 (right_hand_side_expression -> right_hand_side_expression ' .)
    ID              reduce using rule 37 (right_hand_side_expression -> right_hand_side_expression ' .)
    [               reduce using rule 37 (right_hand_side_expression -> right_hand_side_expression ' .)
    STRING          reduce using rule 37 (right_hand_side_expression -> right_hand_side_expression ' .)
    FLOATNUM        reduce using rule 37 (right_hand_side_expression -> right_hand_side_expression ' .)
    INTNUM          reduce using rule 37 (right_hand_side_expression -> right_hand_side_expression ' .)
    EYE             reduce using rule 37 (right_hand_side_expression -> right_hand_side_expression ' .)
    ONES            reduce using rule 37 (right_hand_side_expression -> right_hand_side_expression ' .)
    ZEROS           reduce using rule 37 (right_hand_side_expression -> right_hand_side_expression ' .)
    $end            reduce using rule 37 (right_hand_side_expression -> right_hand_side_expression ' .)
    ;               reduce using rule 37 (right_hand_side_expression -> right_hand_side_expression ' .)
    }               reduce using rule 37 (right_hand_side_expression -> right_hand_side_expression ' .)
    )               reduce using rule 37 (right_hand_side_expression -> right_hand_side_expression ' .)
    ELSE            reduce using rule 37 (right_hand_side_expression -> right_hand_side_expression ' .)


state 48

    (56) relation_expression -> right_hand_side_expression NE . right_hand_side_expression
    (25) right_hand_side_expression -> . matrix_ref
    (26) right_hand_side_expression -> . [ ]
    (27) right_hand_side_expression -> . [ list_of_elems ]
    (28) right_hand_side_expression -> . [ vectors ]
    (29) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (36) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (37) right_hand_side_expression -> . right_hand_side_expression '
    (38) right_hand_side_expression -> . value
    (39) right_hand_side_expression -> . matrix_functions
    (40) right_hand_side_expression -> . ( right_hand_side_expression )
    (41) right_hand_side_expression -> . relation_expression
    (42) right_hand_side_expression -> . unary_minus
    (53) matrix_ref -> . ID [ list_of_ints ]
    (21) value -> . STRING
    (22) value -> . ID
    (23) value -> . FLOATNUM
    (24) value -> . INTNUM
    (62) matrix_functions -> . EYE ( INTNUM )
    (63) matrix_functions -> . ONES ( INTNUM )
    (64) matrix_functions -> . ZEROS ( INTNUM )
    (56) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (57) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (58) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (59) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (61) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (43) unary_minus -> . - right_hand_side_expression
    [               shift and go to state 23
    (               shift and go to state 37
    ID              shift and go to state 38
    STRING          shift and go to state 28
    FLOATNUM        shift and go to state 29
    INTNUM          shift and go to state 30
    EYE             shift and go to state 31
    ONES            shift and go to state 32
    ZEROS           shift and go to state 33
    -               shift and go to state 24

    right_hand_side_expression     shift and go to state 91
    matrix_ref                     shift and go to state 36
    value                          shift and go to state 25
    matrix_functions               shift and go to state 26
    relation_expression            shift and go to state 20
    unary_minus                    shift and go to state 27

state 49

    (57) relation_expression -> right_hand_side_expression EQ . right_hand_side_expression
    (25) right_hand_side_expression -> . matrix_ref
    (26) right_hand_side_expression -> . [ ]
    (27) right_hand_side_expression -> . [ list_of_elems ]
    (28) right_hand_side_expression -> . [ vectors ]
    (29) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (36) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (37) right_hand_side_expression -> . right_hand_side_expression '
    (38) right_hand_side_expression -> . value
    (39) right_hand_side_expression -> . matrix_functions
    (40) right_hand_side_expression -> . ( right_hand_side_expression )
    (41) right_hand_side_expression -> . relation_expression
    (42) right_hand_side_expression -> . unary_minus
    (53) matrix_ref -> . ID [ list_of_ints ]
    (21) value -> . STRING
    (22) value -> . ID
    (23) value -> . FLOATNUM
    (24) value -> . INTNUM
    (62) matrix_functions -> . EYE ( INTNUM )
    (63) matrix_functions -> . ONES ( INTNUM )
    (64) matrix_functions -> . ZEROS ( INTNUM )
    (56) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (57) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (58) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (59) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (61) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (43) unary_minus -> . - right_hand_side_expression
    [               shift and go to state 23
    (               shift and go to state 37
    ID              shift and go to state 38
    STRING          shift and go to state 28
    FLOATNUM        shift and go to state 29
    INTNUM          shift and go to state 30
    EYE             shift and go to state 31
    ONES            shift and go to state 32
    ZEROS           shift and go to state 33
    -               shift and go to state 24

    right_hand_side_expression     shift and go to state 92
    matrix_ref                     shift and go to state 36
    value                          shift and go to state 25
    matrix_functions               shift and go to state 26
    relation_expression            shift and go to state 20
    unary_minus                    shift and go to state 27

state 50

    (58) relation_expression -> right_hand_side_expression GE . right_hand_side_expression
    (25) right_hand_side_expression -> . matrix_ref
    (26) right_hand_side_expression -> . [ ]
    (27) right_hand_side_expression -> . [ list_of_elems ]
    (28) right_hand_side_expression -> . [ vectors ]
    (29) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (36) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (37) right_hand_side_expression -> . right_hand_side_expression '
    (38) right_hand_side_expression -> . value
    (39) right_hand_side_expression -> . matrix_functions
    (40) right_hand_side_expression -> . ( right_hand_side_expression )
    (41) right_hand_side_expression -> . relation_expression
    (42) right_hand_side_expression -> . unary_minus
    (53) matrix_ref -> . ID [ list_of_ints ]
    (21) value -> . STRING
    (22) value -> . ID
    (23) value -> . FLOATNUM
    (24) value -> . INTNUM
    (62) matrix_functions -> . EYE ( INTNUM )
    (63) matrix_functions -> . ONES ( INTNUM )
    (64) matrix_functions -> . ZEROS ( INTNUM )
    (56) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (57) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (58) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (59) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (61) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (43) unary_minus -> . - right_hand_side_expression
    [               shift and go to state 23
    (               shift and go to state 37
    ID              shift and go to state 38
    STRING          shift and go to state 28
    FLOATNUM        shift and go to state 29
    INTNUM          shift and go to state 30
    EYE             shift and go to state 31
    ONES            shift and go to state 32
    ZEROS           shift and go to state 33
    -               shift and go to state 24

    right_hand_side_expression     shift and go to state 93
    matrix_ref                     shift and go to state 36
    value                          shift and go to state 25
    matrix_functions               shift and go to state 26
    relation_expression            shift and go to state 20
    unary_minus                    shift and go to state 27

state 51

    (59) relation_expression -> right_hand_side_expression LE . right_hand_side_expression
    (25) right_hand_side_expression -> . matrix_ref
    (26) right_hand_side_expression -> . [ ]
    (27) right_hand_side_expression -> . [ list_of_elems ]
    (28) right_hand_side_expression -> . [ vectors ]
    (29) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (36) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (37) right_hand_side_expression -> . right_hand_side_expression '
    (38) right_hand_side_expression -> . value
    (39) right_hand_side_expression -> . matrix_functions
    (40) right_hand_side_expression -> . ( right_hand_side_expression )
    (41) right_hand_side_expression -> . relation_expression
    (42) right_hand_side_expression -> . unary_minus
    (53) matrix_ref -> . ID [ list_of_ints ]
    (21) value -> . STRING
    (22) value -> . ID
    (23) value -> . FLOATNUM
    (24) value -> . INTNUM
    (62) matrix_functions -> . EYE ( INTNUM )
    (63) matrix_functions -> . ONES ( INTNUM )
    (64) matrix_functions -> . ZEROS ( INTNUM )
    (56) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (57) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (58) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (59) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (61) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (43) unary_minus -> . - right_hand_side_expression
    [               shift and go to state 23
    (               shift and go to state 37
    ID              shift and go to state 38
    STRING          shift and go to state 28
    FLOATNUM        shift and go to state 29
    INTNUM          shift and go to state 30
    EYE             shift and go to state 31
    ONES            shift and go to state 32
    ZEROS           shift and go to state 33
    -               shift and go to state 24

    right_hand_side_expression     shift and go to state 94
    matrix_ref                     shift and go to state 36
    value                          shift and go to state 25
    matrix_functions               shift and go to state 26
    relation_expression            shift and go to state 20
    unary_minus                    shift and go to state 27

state 52

    (60) relation_expression -> right_hand_side_expression GT . right_hand_side_expression
    (25) right_hand_side_expression -> . matrix_ref
    (26) right_hand_side_expression -> . [ ]
    (27) right_hand_side_expression -> . [ list_of_elems ]
    (28) right_hand_side_expression -> . [ vectors ]
    (29) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (36) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (37) right_hand_side_expression -> . right_hand_side_expression '
    (38) right_hand_side_expression -> . value
    (39) right_hand_side_expression -> . matrix_functions
    (40) right_hand_side_expression -> . ( right_hand_side_expression )
    (41) right_hand_side_expression -> . relation_expression
    (42) right_hand_side_expression -> . unary_minus
    (53) matrix_ref -> . ID [ list_of_ints ]
    (21) value -> . STRING
    (22) value -> . ID
    (23) value -> . FLOATNUM
    (24) value -> . INTNUM
    (62) matrix_functions -> . EYE ( INTNUM )
    (63) matrix_functions -> . ONES ( INTNUM )
    (64) matrix_functions -> . ZEROS ( INTNUM )
    (56) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (57) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (58) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (59) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (61) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (43) unary_minus -> . - right_hand_side_expression
    [               shift and go to state 23
    (               shift and go to state 37
    ID              shift and go to state 38
    STRING          shift and go to state 28
    FLOATNUM        shift and go to state 29
    INTNUM          shift and go to state 30
    EYE             shift and go to state 31
    ONES            shift and go to state 32
    ZEROS           shift and go to state 33
    -               shift and go to state 24

    right_hand_side_expression     shift and go to state 95
    matrix_ref                     shift and go to state 36
    value                          shift and go to state 25
    matrix_functions               shift and go to state 26
    relation_expression            shift and go to state 20
    unary_minus                    shift and go to state 27

state 53

    (61) relation_expression -> right_hand_side_expression LT . right_hand_side_expression
    (25) right_hand_side_expression -> . matrix_ref
    (26) right_hand_side_expression -> . [ ]
    (27) right_hand_side_expression -> . [ list_of_elems ]
    (28) right_hand_side_expression -> . [ vectors ]
    (29) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (36) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (37) right_hand_side_expression -> . right_hand_side_expression '
    (38) right_hand_side_expression -> . value
    (39) right_hand_side_expression -> . matrix_functions
    (40) right_hand_side_expression -> . ( right_hand_side_expression )
    (41) right_hand_side_expression -> . relation_expression
    (42) right_hand_side_expression -> . unary_minus
    (53) matrix_ref -> . ID [ list_of_ints ]
    (21) value -> . STRING
    (22) value -> . ID
    (23) value -> . FLOATNUM
    (24) value -> . INTNUM
    (62) matrix_functions -> . EYE ( INTNUM )
    (63) matrix_functions -> . ONES ( INTNUM )
    (64) matrix_functions -> . ZEROS ( INTNUM )
    (56) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (57) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (58) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (59) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (61) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (43) unary_minus -> . - right_hand_side_expression
    [               shift and go to state 23
    (               shift and go to state 37
    ID              shift and go to state 38
    STRING          shift and go to state 28
    FLOATNUM        shift and go to state 29
    INTNUM          shift and go to state 30
    EYE             shift and go to state 31
    ONES            shift and go to state 32
    ZEROS           shift and go to state 33
    -               shift and go to state 24

    right_hand_side_expression     shift and go to state 96
    matrix_ref                     shift and go to state 36
    value                          shift and go to state 25
    matrix_functions               shift and go to state 26
    relation_expression            shift and go to state 20
    unary_minus                    shift and go to state 27

state 54

    (4) instruction -> CONTINUE ; .
    RETURN          reduce using rule 4 (instruction -> CONTINUE ; .)
    CONTINUE        reduce using rule 4 (instruction -> CONTINUE ; .)
    BREAK           reduce using rule 4 (instruction -> CONTINUE ; .)
    {               reduce using rule 4 (instruction -> CONTINUE ; .)
    PRINT           reduce using rule 4 (instruction -> CONTINUE ; .)
    (               reduce using rule 4 (instruction -> CONTINUE ; .)
    FOR             reduce using rule 4 (instruction -> CONTINUE ; .)
    WHILE           reduce using rule 4 (instruction -> CONTINUE ; .)
    IF              reduce using rule 4 (instruction -> CONTINUE ; .)
    ID              reduce using rule 4 (instruction -> CONTINUE ; .)
    [               reduce using rule 4 (instruction -> CONTINUE ; .)
    STRING          reduce using rule 4 (instruction -> CONTINUE ; .)
    FLOATNUM        reduce using rule 4 (instruction -> CONTINUE ; .)
    INTNUM          reduce using rule 4 (instruction -> CONTINUE ; .)
    EYE             reduce using rule 4 (instruction -> CONTINUE ; .)
    ONES            reduce using rule 4 (instruction -> CONTINUE ; .)
    ZEROS           reduce using rule 4 (instruction -> CONTINUE ; .)
    -               reduce using rule 4 (instruction -> CONTINUE ; .)
    $end            reduce using rule 4 (instruction -> CONTINUE ; .)
    }               reduce using rule 4 (instruction -> CONTINUE ; .)
    ELSE            reduce using rule 4 (instruction -> CONTINUE ; .)


state 55

    (5) instruction -> BREAK ; .
    RETURN          reduce using rule 5 (instruction -> BREAK ; .)
    CONTINUE        reduce using rule 5 (instruction -> BREAK ; .)
    BREAK           reduce using rule 5 (instruction -> BREAK ; .)
    {               reduce using rule 5 (instruction -> BREAK ; .)
    PRINT           reduce using rule 5 (instruction -> BREAK ; .)
    (               reduce using rule 5 (instruction -> BREAK ; .)
    FOR             reduce using rule 5 (instruction -> BREAK ; .)
    WHILE           reduce using rule 5 (instruction -> BREAK ; .)
    IF              reduce using rule 5 (instruction -> BREAK ; .)
    ID              reduce using rule 5 (instruction -> BREAK ; .)
    [               reduce using rule 5 (instruction -> BREAK ; .)
    STRING          reduce using rule 5 (instruction -> BREAK ; .)
    FLOATNUM        reduce using rule 5 (instruction -> BREAK ; .)
    INTNUM          reduce using rule 5 (instruction -> BREAK ; .)
    EYE             reduce using rule 5 (instruction -> BREAK ; .)
    ONES            reduce using rule 5 (instruction -> BREAK ; .)
    ZEROS           reduce using rule 5 (instruction -> BREAK ; .)
    -               reduce using rule 5 (instruction -> BREAK ; .)
    $end            reduce using rule 5 (instruction -> BREAK ; .)
    }               reduce using rule 5 (instruction -> BREAK ; .)
    ELSE            reduce using rule 5 (instruction -> BREAK ; .)


state 56

    (11) instruction -> { instructions . }
    (2) instructions -> instructions . instruction
    (3) instruction -> . RETURN right_hand_side_expression ;
    (4) instruction -> . CONTINUE ;
    (5) instruction -> . BREAK ;
    (6) instruction -> . print_instruction
    (7) instruction -> . full_line_expression
    (8) instruction -> . for_instruction
    (9) instruction -> . while_instruction
    (10) instruction -> . if_instruction
    (11) instruction -> . { instructions }
    (18) print_instruction -> . PRINT printables ;
    (44) full_line_expression -> . ( full_line_expression )
    (45) full_line_expression -> . left_hand_side_expression
    (46) full_line_expression -> . assign_expression
    (47) full_line_expression -> . right_hand_side_expression
    (15) for_instruction -> . FOR ID = id_int : id_int instruction
    (14) while_instruction -> . WHILE ( relation_expression ) instruction
    (12) if_instruction -> . IF ( relation_expression ) instruction
    (13) if_instruction -> . IF ( relation_expression ) instruction ELSE instruction
    (54) left_hand_side_expression -> . matrix_ref
    (55) left_hand_side_expression -> . ID
    (48) assign_expression -> . left_hand_side_expression DIVIDEASSIGN right_hand_side_expression ;
    (49) assign_expression -> . left_hand_side_expression TIMESASSIGN right_hand_side_expression ;
    (50) assign_expression -> . left_hand_side_expression MINUSASSIGN right_hand_side_expression ;
    (51) assign_expression -> . left_hand_side_expression PLUSASSIGN right_hand_side_expression ;
    (52) assign_expression -> . left_hand_side_expression = right_hand_side_expression ;
    (25) right_hand_side_expression -> . matrix_ref
    (26) right_hand_side_expression -> . [ ]
    (27) right_hand_side_expression -> . [ list_of_elems ]
    (28) right_hand_side_expression -> . [ vectors ]
    (29) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (36) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (37) right_hand_side_expression -> . right_hand_side_expression '
    (38) right_hand_side_expression -> . value
    (39) right_hand_side_expression -> . matrix_functions
    (40) right_hand_side_expression -> . ( right_hand_side_expression )
    (41) right_hand_side_expression -> . relation_expression
    (42) right_hand_side_expression -> . unary_minus
    (53) matrix_ref -> . ID [ list_of_ints ]
    (21) value -> . STRING
    (22) value -> . ID
    (23) value -> . FLOATNUM
    (24) value -> . INTNUM
    (62) matrix_functions -> . EYE ( INTNUM )
    (63) matrix_functions -> . ONES ( INTNUM )
    (64) matrix_functions -> . ZEROS ( INTNUM )
    (56) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (57) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (58) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (59) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (61) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (43) unary_minus -> . - right_hand_side_expression
    }               shift and go to state 97
    RETURN          shift and go to state 3
    CONTINUE        shift and go to state 5
    BREAK           shift and go to state 6
    {               shift and go to state 12
    PRINT           shift and go to state 13
    (               shift and go to state 14
    FOR             shift and go to state 17
    WHILE           shift and go to state 19
    IF              shift and go to state 21
    ID              shift and go to state 18
    [               shift and go to state 23
    STRING          shift and go to state 28
    FLOATNUM        shift and go to state 29
    INTNUM          shift and go to state 30
    EYE             shift and go to state 31
    ONES            shift and go to state 32
    ZEROS           shift and go to state 33
    -               shift and go to state 24

    instruction                    shift and go to state 34
    right_hand_side_expression     shift and go to state 4
    print_instruction              shift and go to state 7
    full_line_expression           shift and go to state 8
    for_instruction                shift and go to state 9
    while_instruction              shift and go to state 10
    if_instruction                 shift and go to state 11
    left_hand_side_expression      shift and go to state 15
    assign_expression              shift and go to state 16
    relation_expression            shift and go to state 20
    matrix_ref                     shift and go to state 22
    value                          shift and go to state 25
    matrix_functions               shift and go to state 26
    unary_minus                    shift and go to state 27

state 57

    (18) print_instruction -> PRINT printables . ;
    (20) printables -> printables . , value
    ;               shift and go to state 98
    ,               shift and go to state 99


state 58

    (19) printables -> value .
    ;               reduce using rule 19 (printables -> value .)
    ,               reduce using rule 19 (printables -> value .)


state 59

    (22) value -> ID .
    ;               reduce using rule 22 (value -> ID .)
    ,               reduce using rule 22 (value -> ID .)
    ]               reduce using rule 22 (value -> ID .)


state 60

    (44) full_line_expression -> ( full_line_expression . )
    )               shift and go to state 100


state 61

    (40) right_hand_side_expression -> ( right_hand_side_expression . )
    (47) full_line_expression -> right_hand_side_expression .
    (29) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (36) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    (37) right_hand_side_expression -> right_hand_side_expression . '
    (56) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (57) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (58) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (59) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (61) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
  ! shift/reduce conflict for ) resolved as shift
    )               shift and go to state 101
    DOTDIVIDE       shift and go to state 39
    DOTTIMES        shift and go to state 40
    DOTMINUS        shift and go to state 41
    DOTPLUS         shift and go to state 42
    /               shift and go to state 43
    *               shift and go to state 44
    -               shift and go to state 45
    +               shift and go to state 46
    '               shift and go to state 47
    NE              shift and go to state 48
    EQ              shift and go to state 49
    GE              shift and go to state 50
    LE              shift and go to state 51
    GT              shift and go to state 52
    LT              shift and go to state 53


state 62

    (25) right_hand_side_expression -> matrix_ref .
    (54) left_hand_side_expression -> matrix_ref .
  ! reduce/reduce conflict for ) resolved using rule 25 (right_hand_side_expression -> matrix_ref .)
    )               reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    DOTDIVIDE       reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    DOTTIMES        reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    DOTMINUS        reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    DOTPLUS         reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    /               reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    *               reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    -               reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    +               reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    '               reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    NE              reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    EQ              reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    GE              reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    LE              reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    GT              reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    LT              reduce using rule 25 (right_hand_side_expression -> matrix_ref .)
    DIVIDEASSIGN    reduce using rule 54 (left_hand_side_expression -> matrix_ref .)
    TIMESASSIGN     reduce using rule 54 (left_hand_side_expression -> matrix_ref .)
    MINUSASSIGN     reduce using rule 54 (left_hand_side_expression -> matrix_ref .)
    PLUSASSIGN      reduce using rule 54 (left_hand_side_expression -> matrix_ref .)
    =               reduce using rule 54 (left_hand_side_expression -> matrix_ref .)


state 63

    (48) assign_expression -> left_hand_side_expression DIVIDEASSIGN . right_hand_side_expression ;
    (25) right_hand_side_expression -> . matrix_ref
    (26) right_hand_side_expression -> . [ ]
    (27) right_hand_side_expression -> . [ list_of_elems ]
    (28) right_hand_side_expression -> . [ vectors ]
    (29) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (36) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (37) right_hand_side_expression -> . right_hand_side_expression '
    (38) right_hand_side_expression -> . value
    (39) right_hand_side_expression -> . matrix_functions
    (40) right_hand_side_expression -> . ( right_hand_side_expression )
    (41) right_hand_side_expression -> . relation_expression
    (42) right_hand_side_expression -> . unary_minus
    (53) matrix_ref -> . ID [ list_of_ints ]
    (21) value -> . STRING
    (22) value -> . ID
    (23) value -> . FLOATNUM
    (24) value -> . INTNUM
    (62) matrix_functions -> . EYE ( INTNUM )
    (63) matrix_functions -> . ONES ( INTNUM )
    (64) matrix_functions -> . ZEROS ( INTNUM )
    (56) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (57) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (58) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (59) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (61) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (43) unary_minus -> . - right_hand_side_expression
    [               shift and go to state 23
    (               shift and go to state 37
    ID              shift and go to state 38
    STRING          shift and go to state 28
    FLOATNUM        shift and go to state 29
    INTNUM          shift and go to state 30
    EYE             shift and go to state 31
    ONES            shift and go to state 32
    ZEROS           shift and go to state 33
    -               shift and go to state 24

    right_hand_side_expression     shift and go to state 102
    matrix_ref                     shift and go to state 36
    value                          shift and go to state 25
    matrix_functions               shift and go to state 26
    relation_expression            shift and go to state 20
    unary_minus                    shift and go to state 27

state 64

    (49) assign_expression -> left_hand_side_expression TIMESASSIGN . right_hand_side_expression ;
    (25) right_hand_side_expression -> . matrix_ref
    (26) right_hand_side_expression -> . [ ]
    (27) right_hand_side_expression -> . [ list_of_elems ]
    (28) right_hand_side_expression -> . [ vectors ]
    (29) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (36) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (37) right_hand_side_expression -> . right_hand_side_expression '
    (38) right_hand_side_expression -> . value
    (39) right_hand_side_expression -> . matrix_functions
    (40) right_hand_side_expression -> . ( right_hand_side_expression )
    (41) right_hand_side_expression -> . relation_expression
    (42) right_hand_side_expression -> . unary_minus
    (53) matrix_ref -> . ID [ list_of_ints ]
    (21) value -> . STRING
    (22) value -> . ID
    (23) value -> . FLOATNUM
    (24) value -> . INTNUM
    (62) matrix_functions -> . EYE ( INTNUM )
    (63) matrix_functions -> . ONES ( INTNUM )
    (64) matrix_functions -> . ZEROS ( INTNUM )
    (56) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (57) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (58) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (59) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (61) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (43) unary_minus -> . - right_hand_side_expression
    [               shift and go to state 23
    (               shift and go to state 37
    ID              shift and go to state 38
    STRING          shift and go to state 28
    FLOATNUM        shift and go to state 29
    INTNUM          shift and go to state 30
    EYE             shift and go to state 31
    ONES            shift and go to state 32
    ZEROS           shift and go to state 33
    -               shift and go to state 24

    right_hand_side_expression     shift and go to state 103
    matrix_ref                     shift and go to state 36
    value                          shift and go to state 25
    matrix_functions               shift and go to state 26
    relation_expression            shift and go to state 20
    unary_minus                    shift and go to state 27

state 65

    (50) assign_expression -> left_hand_side_expression MINUSASSIGN . right_hand_side_expression ;
    (25) right_hand_side_expression -> . matrix_ref
    (26) right_hand_side_expression -> . [ ]
    (27) right_hand_side_expression -> . [ list_of_elems ]
    (28) right_hand_side_expression -> . [ vectors ]
    (29) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (36) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (37) right_hand_side_expression -> . right_hand_side_expression '
    (38) right_hand_side_expression -> . value
    (39) right_hand_side_expression -> . matrix_functions
    (40) right_hand_side_expression -> . ( right_hand_side_expression )
    (41) right_hand_side_expression -> . relation_expression
    (42) right_hand_side_expression -> . unary_minus
    (53) matrix_ref -> . ID [ list_of_ints ]
    (21) value -> . STRING
    (22) value -> . ID
    (23) value -> . FLOATNUM
    (24) value -> . INTNUM
    (62) matrix_functions -> . EYE ( INTNUM )
    (63) matrix_functions -> . ONES ( INTNUM )
    (64) matrix_functions -> . ZEROS ( INTNUM )
    (56) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (57) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (58) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (59) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (61) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (43) unary_minus -> . - right_hand_side_expression
    [               shift and go to state 23
    (               shift and go to state 37
    ID              shift and go to state 38
    STRING          shift and go to state 28
    FLOATNUM        shift and go to state 29
    INTNUM          shift and go to state 30
    EYE             shift and go to state 31
    ONES            shift and go to state 32
    ZEROS           shift and go to state 33
    -               shift and go to state 24

    right_hand_side_expression     shift and go to state 104
    matrix_ref                     shift and go to state 36
    value                          shift and go to state 25
    matrix_functions               shift and go to state 26
    relation_expression            shift and go to state 20
    unary_minus                    shift and go to state 27

state 66

    (51) assign_expression -> left_hand_side_expression PLUSASSIGN . right_hand_side_expression ;
    (25) right_hand_side_expression -> . matrix_ref
    (26) right_hand_side_expression -> . [ ]
    (27) right_hand_side_expression -> . [ list_of_elems ]
    (28) right_hand_side_expression -> . [ vectors ]
    (29) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (36) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (37) right_hand_side_expression -> . right_hand_side_expression '
    (38) right_hand_side_expression -> . value
    (39) right_hand_side_expression -> . matrix_functions
    (40) right_hand_side_expression -> . ( right_hand_side_expression )
    (41) right_hand_side_expression -> . relation_expression
    (42) right_hand_side_expression -> . unary_minus
    (53) matrix_ref -> . ID [ list_of_ints ]
    (21) value -> . STRING
    (22) value -> . ID
    (23) value -> . FLOATNUM
    (24) value -> . INTNUM
    (62) matrix_functions -> . EYE ( INTNUM )
    (63) matrix_functions -> . ONES ( INTNUM )
    (64) matrix_functions -> . ZEROS ( INTNUM )
    (56) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (57) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (58) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (59) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (61) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (43) unary_minus -> . - right_hand_side_expression
    [               shift and go to state 23
    (               shift and go to state 37
    ID              shift and go to state 38
    STRING          shift and go to state 28
    FLOATNUM        shift and go to state 29
    INTNUM          shift and go to state 30
    EYE             shift and go to state 31
    ONES            shift and go to state 32
    ZEROS           shift and go to state 33
    -               shift and go to state 24

    right_hand_side_expression     shift and go to state 105
    matrix_ref                     shift and go to state 36
    value                          shift and go to state 25
    matrix_functions               shift and go to state 26
    relation_expression            shift and go to state 20
    unary_minus                    shift and go to state 27

state 67

    (52) assign_expression -> left_hand_side_expression = . right_hand_side_expression ;
    (25) right_hand_side_expression -> . matrix_ref
    (26) right_hand_side_expression -> . [ ]
    (27) right_hand_side_expression -> . [ list_of_elems ]
    (28) right_hand_side_expression -> . [ vectors ]
    (29) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (36) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (37) right_hand_side_expression -> . right_hand_side_expression '
    (38) right_hand_side_expression -> . value
    (39) right_hand_side_expression -> . matrix_functions
    (40) right_hand_side_expression -> . ( right_hand_side_expression )
    (41) right_hand_side_expression -> . relation_expression
    (42) right_hand_side_expression -> . unary_minus
    (53) matrix_ref -> . ID [ list_of_ints ]
    (21) value -> . STRING
    (22) value -> . ID
    (23) value -> . FLOATNUM
    (24) value -> . INTNUM
    (62) matrix_functions -> . EYE ( INTNUM )
    (63) matrix_functions -> . ONES ( INTNUM )
    (64) matrix_functions -> . ZEROS ( INTNUM )
    (56) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (57) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (58) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (59) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (61) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (43) unary_minus -> . - right_hand_side_expression
    [               shift and go to state 23
    (               shift and go to state 37
    ID              shift and go to state 38
    STRING          shift and go to state 28
    FLOATNUM        shift and go to state 29
    INTNUM          shift and go to state 30
    EYE             shift and go to state 31
    ONES            shift and go to state 32
    ZEROS           shift and go to state 33
    -               shift and go to state 24

    right_hand_side_expression     shift and go to state 106
    matrix_ref                     shift and go to state 36
    value                          shift and go to state 25
    matrix_functions               shift and go to state 26
    relation_expression            shift and go to state 20
    unary_minus                    shift and go to state 27

state 68

    (15) for_instruction -> FOR ID . = id_int : id_int instruction
    =               shift and go to state 107


state 69

    (53) matrix_ref -> ID [ . list_of_ints ]
    (71) list_of_ints -> . list_of_ints , INTNUM
    (72) list_of_ints -> . INTNUM
    INTNUM          shift and go to state 109

    list_of_ints                   shift and go to state 108

state 70

    (14) while_instruction -> WHILE ( . relation_expression ) instruction
    (56) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (57) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (58) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (59) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (61) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (25) right_hand_side_expression -> . matrix_ref
    (26) right_hand_side_expression -> . [ ]
    (27) right_hand_side_expression -> . [ list_of_elems ]
    (28) right_hand_side_expression -> . [ vectors ]
    (29) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (36) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (37) right_hand_side_expression -> . right_hand_side_expression '
    (38) right_hand_side_expression -> . value
    (39) right_hand_side_expression -> . matrix_functions
    (40) right_hand_side_expression -> . ( right_hand_side_expression )
    (41) right_hand_side_expression -> . relation_expression
    (42) right_hand_side_expression -> . unary_minus
    (53) matrix_ref -> . ID [ list_of_ints ]
    (21) value -> . STRING
    (22) value -> . ID
    (23) value -> . FLOATNUM
    (24) value -> . INTNUM
    (62) matrix_functions -> . EYE ( INTNUM )
    (63) matrix_functions -> . ONES ( INTNUM )
    (64) matrix_functions -> . ZEROS ( INTNUM )
    (43) unary_minus -> . - right_hand_side_expression
    [               shift and go to state 23
    (               shift and go to state 37
    ID              shift and go to state 38
    STRING          shift and go to state 28
    FLOATNUM        shift and go to state 29
    INTNUM          shift and go to state 30
    EYE             shift and go to state 31
    ONES            shift and go to state 32
    ZEROS           shift and go to state 33
    -               shift and go to state 24

    relation_expression            shift and go to state 110
    right_hand_side_expression     shift and go to state 111
    matrix_ref                     shift and go to state 36
    value                          shift and go to state 25
    matrix_functions               shift and go to state 26
    unary_minus                    shift and go to state 27

state 71

    (12) if_instruction -> IF ( . relation_expression ) instruction
    (13) if_instruction -> IF ( . relation_expression ) instruction ELSE instruction
    (56) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (57) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (58) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (59) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (61) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (25) right_hand_side_expression -> . matrix_ref
    (26) right_hand_side_expression -> . [ ]
    (27) right_hand_side_expression -> . [ list_of_elems ]
    (28) right_hand_side_expression -> . [ vectors ]
    (29) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (36) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (37) right_hand_side_expression -> . right_hand_side_expression '
    (38) right_hand_side_expression -> . value
    (39) right_hand_side_expression -> . matrix_functions
    (40) right_hand_side_expression -> . ( right_hand_side_expression )
    (41) right_hand_side_expression -> . relation_expression
    (42) right_hand_side_expression -> . unary_minus
    (53) matrix_ref -> . ID [ list_of_ints ]
    (21) value -> . STRING
    (22) value -> . ID
    (23) value -> . FLOATNUM
    (24) value -> . INTNUM
    (62) matrix_functions -> . EYE ( INTNUM )
    (63) matrix_functions -> . ONES ( INTNUM )
    (64) matrix_functions -> . ZEROS ( INTNUM )
    (43) unary_minus -> . - right_hand_side_expression
    [               shift and go to state 23
    (               shift and go to state 37
    ID              shift and go to state 38
    STRING          shift and go to state 28
    FLOATNUM        shift and go to state 29
    INTNUM          shift and go to state 30
    EYE             shift and go to state 31
    ONES            shift and go to state 32
    ZEROS           shift and go to state 33
    -               shift and go to state 24

    relation_expression            shift and go to state 112
    right_hand_side_expression     shift and go to state 111
    matrix_ref                     shift and go to state 36
    value                          shift and go to state 25
    matrix_functions               shift and go to state 26
    unary_minus                    shift and go to state 27

state 72

    (66) vectors -> [ . ]
    (68) vectors -> [ . list_of_elems ]
    (69) list_of_elems -> . list_of_elems , value
    (70) list_of_elems -> . value
    (21) value -> . STRING
    (22) value -> . ID
    (23) value -> . FLOATNUM
    (24) value -> . INTNUM
    ]               shift and go to state 113
    STRING          shift and go to state 28
    ID              shift and go to state 59
    FLOATNUM        shift and go to state 29
    INTNUM          shift and go to state 30

    list_of_elems                  shift and go to state 114
    value                          shift and go to state 76

state 73

    (26) right_hand_side_expression -> [ ] .
    DOTDIVIDE       reduce using rule 26 (right_hand_side_expression -> [ ] .)
    DOTTIMES        reduce using rule 26 (right_hand_side_expression -> [ ] .)
    DOTMINUS        reduce using rule 26 (right_hand_side_expression -> [ ] .)
    DOTPLUS         reduce using rule 26 (right_hand_side_expression -> [ ] .)
    /               reduce using rule 26 (right_hand_side_expression -> [ ] .)
    *               reduce using rule 26 (right_hand_side_expression -> [ ] .)
    -               reduce using rule 26 (right_hand_side_expression -> [ ] .)
    +               reduce using rule 26 (right_hand_side_expression -> [ ] .)
    '               reduce using rule 26 (right_hand_side_expression -> [ ] .)
    NE              reduce using rule 26 (right_hand_side_expression -> [ ] .)
    EQ              reduce using rule 26 (right_hand_side_expression -> [ ] .)
    GE              reduce using rule 26 (right_hand_side_expression -> [ ] .)
    LE              reduce using rule 26 (right_hand_side_expression -> [ ] .)
    GT              reduce using rule 26 (right_hand_side_expression -> [ ] .)
    LT              reduce using rule 26 (right_hand_side_expression -> [ ] .)
    RETURN          reduce using rule 26 (right_hand_side_expression -> [ ] .)
    CONTINUE        reduce using rule 26 (right_hand_side_expression -> [ ] .)
    BREAK           reduce using rule 26 (right_hand_side_expression -> [ ] .)
    {               reduce using rule 26 (right_hand_side_expression -> [ ] .)
    PRINT           reduce using rule 26 (right_hand_side_expression -> [ ] .)
    (               reduce using rule 26 (right_hand_side_expression -> [ ] .)
    FOR             reduce using rule 26 (right_hand_side_expression -> [ ] .)
    WHILE           reduce using rule 26 (right_hand_side_expression -> [ ] .)
    IF              reduce using rule 26 (right_hand_side_expression -> [ ] .)
    ID              reduce using rule 26 (right_hand_side_expression -> [ ] .)
    [               reduce using rule 26 (right_hand_side_expression -> [ ] .)
    STRING          reduce using rule 26 (right_hand_side_expression -> [ ] .)
    FLOATNUM        reduce using rule 26 (right_hand_side_expression -> [ ] .)
    INTNUM          reduce using rule 26 (right_hand_side_expression -> [ ] .)
    EYE             reduce using rule 26 (right_hand_side_expression -> [ ] .)
    ONES            reduce using rule 26 (right_hand_side_expression -> [ ] .)
    ZEROS           reduce using rule 26 (right_hand_side_expression -> [ ] .)
    $end            reduce using rule 26 (right_hand_side_expression -> [ ] .)
    ;               reduce using rule 26 (right_hand_side_expression -> [ ] .)
    }               reduce using rule 26 (right_hand_side_expression -> [ ] .)
    )               reduce using rule 26 (right_hand_side_expression -> [ ] .)
    ELSE            reduce using rule 26 (right_hand_side_expression -> [ ] .)


state 74

    (27) right_hand_side_expression -> [ list_of_elems . ]
    (69) list_of_elems -> list_of_elems . , value
    ]               shift and go to state 115
    ,               shift and go to state 116


state 75

    (28) right_hand_side_expression -> [ vectors . ]
    (65) vectors -> vectors . , [ ]
    (67) vectors -> vectors . , [ list_of_elems ]
    ]               shift and go to state 117
    ,               shift and go to state 118


state 76

    (70) list_of_elems -> value .
    ]               reduce using rule 70 (list_of_elems -> value .)
    ,               reduce using rule 70 (list_of_elems -> value .)


state 77

    (43) unary_minus -> - right_hand_side_expression .
    (29) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (36) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    (37) right_hand_side_expression -> right_hand_side_expression . '
    (56) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (57) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (58) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (59) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (61) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
    DOTDIVIDE       reduce using rule 43 (unary_minus -> - right_hand_side_expression .)
    DOTTIMES        reduce using rule 43 (unary_minus -> - right_hand_side_expression .)
    DOTMINUS        reduce using rule 43 (unary_minus -> - right_hand_side_expression .)
    DOTPLUS         reduce using rule 43 (unary_minus -> - right_hand_side_expression .)
    /               reduce using rule 43 (unary_minus -> - right_hand_side_expression .)
    *               reduce using rule 43 (unary_minus -> - right_hand_side_expression .)
    -               reduce using rule 43 (unary_minus -> - right_hand_side_expression .)
    +               reduce using rule 43 (unary_minus -> - right_hand_side_expression .)
    '               reduce using rule 43 (unary_minus -> - right_hand_side_expression .)
    NE              reduce using rule 43 (unary_minus -> - right_hand_side_expression .)
    EQ              reduce using rule 43 (unary_minus -> - right_hand_side_expression .)
    GE              reduce using rule 43 (unary_minus -> - right_hand_side_expression .)
    LE              reduce using rule 43 (unary_minus -> - right_hand_side_expression .)
    GT              reduce using rule 43 (unary_minus -> - right_hand_side_expression .)
    LT              reduce using rule 43 (unary_minus -> - right_hand_side_expression .)
    RETURN          reduce using rule 43 (unary_minus -> - right_hand_side_expression .)
    CONTINUE        reduce using rule 43 (unary_minus -> - right_hand_side_expression .)
    BREAK           reduce using rule 43 (unary_minus -> - right_hand_side_expression .)
    {               reduce using rule 43 (unary_minus -> - right_hand_side_expression .)
    PRINT           reduce using rule 43 (unary_minus -> - right_hand_side_expression .)
    (               reduce using rule 43 (unary_minus -> - right_hand_side_expression .)
    FOR             reduce using rule 43 (unary_minus -> - right_hand_side_expression .)
    WHILE           reduce using rule 43 (unary_minus -> - right_hand_side_expression .)
    IF              reduce using rule 43 (unary_minus -> - right_hand_side_expression .)
    ID              reduce using rule 43 (unary_minus -> - right_hand_side_expression .)
    [               reduce using rule 43 (unary_minus -> - right_hand_side_expression .)
    STRING          reduce using rule 43 (unary_minus -> - right_hand_side_expression .)
    FLOATNUM        reduce using rule 43 (unary_minus -> - right_hand_side_expression .)
    INTNUM          reduce using rule 43 (unary_minus -> - right_hand_side_expression .)
    EYE             reduce using rule 43 (unary_minus -> - right_hand_side_expression .)
    ONES            reduce using rule 43 (unary_minus -> - right_hand_side_expression .)
    ZEROS           reduce using rule 43 (unary_minus -> - right_hand_side_expression .)
    $end            reduce using rule 43 (unary_minus -> - right_hand_side_expression .)
    ;               reduce using rule 43 (unary_minus -> - right_hand_side_expression .)
    }               reduce using rule 43 (unary_minus -> - right_hand_side_expression .)
    )               reduce using rule 43 (unary_minus -> - right_hand_side_expression .)
    ELSE            reduce using rule 43 (unary_minus -> - right_hand_side_expression .)


state 78

    (62) matrix_functions -> EYE ( . INTNUM )
    INTNUM          shift and go to state 119


state 79

    (63) matrix_functions -> ONES ( . INTNUM )
    INTNUM          shift and go to state 120


state 80

    (64) matrix_functions -> ZEROS ( . INTNUM )
    INTNUM          shift and go to state 121


state 81

    (3) instruction -> RETURN right_hand_side_expression ; .
    RETURN          reduce using rule 3 (instruction -> RETURN right_hand_side_expression ; .)
    CONTINUE        reduce using rule 3 (instruction -> RETURN right_hand_side_expression ; .)
    BREAK           reduce using rule 3 (instruction -> RETURN right_hand_side_expression ; .)
    {               reduce using rule 3 (instruction -> RETURN right_hand_side_expression ; .)
    PRINT           reduce using rule 3 (instruction -> RETURN right_hand_side_expression ; .)
    (               reduce using rule 3 (instruction -> RETURN right_hand_side_expression ; .)
    FOR             reduce using rule 3 (instruction -> RETURN right_hand_side_expression ; .)
    WHILE           reduce using rule 3 (instruction -> RETURN right_hand_side_expression ; .)
    IF              reduce using rule 3 (instruction -> RETURN right_hand_side_expression ; .)
    ID              reduce using rule 3 (instruction -> RETURN right_hand_side_expression ; .)
    [               reduce using rule 3 (instruction -> RETURN right_hand_side_expression ; .)
    STRING          reduce using rule 3 (instruction -> RETURN right_hand_side_expression ; .)
    FLOATNUM        reduce using rule 3 (instruction -> RETURN right_hand_side_expression ; .)
    INTNUM          reduce using rule 3 (instruction -> RETURN right_hand_side_expression ; .)
    EYE             reduce using rule 3 (instruction -> RETURN right_hand_side_expression ; .)
    ONES            reduce using rule 3 (instruction -> RETURN right_hand_side_expression ; .)
    ZEROS           reduce using rule 3 (instruction -> RETURN right_hand_side_expression ; .)
    -               reduce using rule 3 (instruction -> RETURN right_hand_side_expression ; .)
    $end            reduce using rule 3 (instruction -> RETURN right_hand_side_expression ; .)
    }               reduce using rule 3 (instruction -> RETURN right_hand_side_expression ; .)
    ELSE            reduce using rule 3 (instruction -> RETURN right_hand_side_expression ; .)


state 82

    (40) right_hand_side_expression -> ( right_hand_side_expression . )
    (29) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (36) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    (37) right_hand_side_expression -> right_hand_side_expression . '
    (56) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (57) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (58) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (59) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (61) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
    )               shift and go to state 101
    DOTDIVIDE       shift and go to state 39
    DOTTIMES        shift and go to state 40
    DOTMINUS        shift and go to state 41
    DOTPLUS         shift and go to state 42
    /               shift and go to state 43
    *               shift and go to state 44
    -               shift and go to state 45
    +               shift and go to state 46
    '               shift and go to state 47
    NE              shift and go to state 48
    EQ              shift and go to state 49
    GE              shift and go to state 50
    LE              shift and go to state 51
    GT              shift and go to state 52
    LT              shift and go to state 53


state 83

    (29) right_hand_side_expression -> right_hand_side_expression DOTDIVIDE right_hand_side_expression .
    (29) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (36) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    (37) right_hand_side_expression -> right_hand_side_expression . '
    (56) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (57) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (58) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (59) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (61) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
    DOTDIVIDE       reduce using rule 29 (right_hand_side_expression -> right_hand_side_expression DOTDIVIDE right_hand_side_expression .)
    DOTTIMES        reduce using rule 29 (right_hand_side_expression -> right_hand_side_expression DOTDIVIDE right_hand_side_expression .)
    DOTMINUS        reduce using rule 29 (right_hand_side_expression -> right_hand_side_expression DOTDIVIDE right_hand_side_expression .)
    DOTPLUS         reduce using rule 29 (right_hand_side_expression -> right_hand_side_expression DOTDIVIDE right_hand_side_expression .)
    /               reduce using rule 29 (right_hand_side_expression -> right_hand_side_expression DOTDIVIDE right_hand_side_expression .)
    *               reduce using rule 29 (right_hand_side_expression -> right_hand_side_expression DOTDIVIDE right_hand_side_expression .)
    -               reduce using rule 29 (right_hand_side_expression -> right_hand_side_expression DOTDIVIDE right_hand_side_expression .)
    +               reduce using rule 29 (right_hand_side_expression -> right_hand_side_expression DOTDIVIDE right_hand_side_expression .)
    NE              reduce using rule 29 (right_hand_side_expression -> right_hand_side_expression DOTDIVIDE right_hand_side_expression .)
    EQ              reduce using rule 29 (right_hand_side_expression -> right_hand_side_expression DOTDIVIDE right_hand_side_expression .)
    GE              reduce using rule 29 (right_hand_side_expression -> right_hand_side_expression DOTDIVIDE right_hand_side_expression .)
    LE              reduce using rule 29 (right_hand_side_expression -> right_hand_side_expression DOTDIVIDE right_hand_side_expression .)
    GT              reduce using rule 29 (right_hand_side_expression -> right_hand_side_expression DOTDIVIDE right_hand_side_expression .)
    LT              reduce using rule 29 (right_hand_side_expression -> right_hand_side_expression DOTDIVIDE right_hand_side_expression .)
    RETURN          reduce using rule 29 (right_hand_side_expression -> right_hand_side_expression DOTDIVIDE right_hand_side_expression .)
    CONTINUE        reduce using rule 29 (right_hand_side_expression -> right_hand_side_expression DOTDIVIDE right_hand_side_expression .)
    BREAK           reduce using rule 29 (right_hand_side_expression -> right_hand_side_expression DOTDIVIDE right_hand_side_expression .)
    {               reduce using rule 29 (right_hand_side_expression -> right_hand_side_expression DOTDIVIDE right_hand_side_expression .)
    PRINT           reduce using rule 29 (right_hand_side_expression -> right_hand_side_expression DOTDIVIDE right_hand_side_expression .)
    (               reduce using rule 29 (right_hand_side_expression -> right_hand_side_expression DOTDIVIDE right_hand_side_expression .)
    FOR             reduce using rule 29 (right_hand_side_expression -> right_hand_side_expression DOTDIVIDE right_hand_side_expression .)
    WHILE           reduce using rule 29 (right_hand_side_expression -> right_hand_side_expression DOTDIVIDE right_hand_side_expression .)
    IF              reduce using rule 29 (right_hand_side_expression -> right_hand_side_expression DOTDIVIDE right_hand_side_expression .)
    ID              reduce using rule 29 (right_hand_side_expression -> right_hand_side_expression DOTDIVIDE right_hand_side_expression .)
    [               reduce using rule 29 (right_hand_side_expression -> right_hand_side_expression DOTDIVIDE right_hand_side_expression .)
    STRING          reduce using rule 29 (right_hand_side_expression -> right_hand_side_expression DOTDIVIDE right_hand_side_expression .)
    FLOATNUM        reduce using rule 29 (right_hand_side_expression -> right_hand_side_expression DOTDIVIDE right_hand_side_expression .)
    INTNUM          reduce using rule 29 (right_hand_side_expression -> right_hand_side_expression DOTDIVIDE right_hand_side_expression .)
    EYE             reduce using rule 29 (right_hand_side_expression -> right_hand_side_expression DOTDIVIDE right_hand_side_expression .)
    ONES            reduce using rule 29 (right_hand_side_expression -> right_hand_side_expression DOTDIVIDE right_hand_side_expression .)
    ZEROS           reduce using rule 29 (right_hand_side_expression -> right_hand_side_expression DOTDIVIDE right_hand_side_expression .)
    $end            reduce using rule 29 (right_hand_side_expression -> right_hand_side_expression DOTDIVIDE right_hand_side_expression .)
    ;               reduce using rule 29 (right_hand_side_expression -> right_hand_side_expression DOTDIVIDE right_hand_side_expression .)
    }               reduce using rule 29 (right_hand_side_expression -> right_hand_side_expression DOTDIVIDE right_hand_side_expression .)
    )               reduce using rule 29 (right_hand_side_expression -> right_hand_side_expression DOTDIVIDE right_hand_side_expression .)
    ELSE            reduce using rule 29 (right_hand_side_expression -> right_hand_side_expression DOTDIVIDE right_hand_side_expression .)
    '               shift and go to state 47


state 84

    (30) right_hand_side_expression -> right_hand_side_expression DOTTIMES right_hand_side_expression .
    (29) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (36) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    (37) right_hand_side_expression -> right_hand_side_expression . '
    (56) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (57) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (58) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (59) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (61) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
    DOTDIVIDE       reduce using rule 30 (right_hand_side_expression -> right_hand_side_expression DOTTIMES right_hand_side_expression .)
    DOTTIMES        reduce using rule 30 (right_hand_side_expression -> right_hand_side_expression DOTTIMES right_hand_side_expression .)
    DOTMINUS        reduce using rule 30 (right_hand_side_expression -> right_hand_side_expression DOTTIMES right_hand_side_expression .)
    DOTPLUS         reduce using rule 30 (right_hand_side_expression -> right_hand_side_expression DOTTIMES right_hand_side_expression .)
    /               reduce using rule 30 (right_hand_side_expression -> right_hand_side_expression DOTTIMES right_hand_side_expression .)
    *               reduce using rule 30 (right_hand_side_expression -> right_hand_side_expression DOTTIMES right_hand_side_expression .)
    -               reduce using rule 30 (right_hand_side_expression -> right_hand_side_expression DOTTIMES right_hand_side_expression .)
    +               reduce using rule 30 (right_hand_side_expression -> right_hand_side_expression DOTTIMES right_hand_side_expression .)
    NE              reduce using rule 30 (right_hand_side_expression -> right_hand_side_expression DOTTIMES right_hand_side_expression .)
    EQ              reduce using rule 30 (right_hand_side_expression -> right_hand_side_expression DOTTIMES right_hand_side_expression .)
    GE              reduce using rule 30 (right_hand_side_expression -> right_hand_side_expression DOTTIMES right_hand_side_expression .)
    LE              reduce using rule 30 (right_hand_side_expression -> right_hand_side_expression DOTTIMES right_hand_side_expression .)
    GT              reduce using rule 30 (right_hand_side_expression -> right_hand_side_expression DOTTIMES right_hand_side_expression .)
    LT              reduce using rule 30 (right_hand_side_expression -> right_hand_side_expression DOTTIMES right_hand_side_expression .)
    RETURN          reduce using rule 30 (right_hand_side_expression -> right_hand_side_expression DOTTIMES right_hand_side_expression .)
    CONTINUE        reduce using rule 30 (right_hand_side_expression -> right_hand_side_expression DOTTIMES right_hand_side_expression .)
    BREAK           reduce using rule 30 (right_hand_side_expression -> right_hand_side_expression DOTTIMES right_hand_side_expression .)
    {               reduce using rule 30 (right_hand_side_expression -> right_hand_side_expression DOTTIMES right_hand_side_expression .)
    PRINT           reduce using rule 30 (right_hand_side_expression -> right_hand_side_expression DOTTIMES right_hand_side_expression .)
    (               reduce using rule 30 (right_hand_side_expression -> right_hand_side_expression DOTTIMES right_hand_side_expression .)
    FOR             reduce using rule 30 (right_hand_side_expression -> right_hand_side_expression DOTTIMES right_hand_side_expression .)
    WHILE           reduce using rule 30 (right_hand_side_expression -> right_hand_side_expression DOTTIMES right_hand_side_expression .)
    IF              reduce using rule 30 (right_hand_side_expression -> right_hand_side_expression DOTTIMES right_hand_side_expression .)
    ID              reduce using rule 30 (right_hand_side_expression -> right_hand_side_expression DOTTIMES right_hand_side_expression .)
    [               reduce using rule 30 (right_hand_side_expression -> right_hand_side_expression DOTTIMES right_hand_side_expression .)
    STRING          reduce using rule 30 (right_hand_side_expression -> right_hand_side_expression DOTTIMES right_hand_side_expression .)
    FLOATNUM        reduce using rule 30 (right_hand_side_expression -> right_hand_side_expression DOTTIMES right_hand_side_expression .)
    INTNUM          reduce using rule 30 (right_hand_side_expression -> right_hand_side_expression DOTTIMES right_hand_side_expression .)
    EYE             reduce using rule 30 (right_hand_side_expression -> right_hand_side_expression DOTTIMES right_hand_side_expression .)
    ONES            reduce using rule 30 (right_hand_side_expression -> right_hand_side_expression DOTTIMES right_hand_side_expression .)
    ZEROS           reduce using rule 30 (right_hand_side_expression -> right_hand_side_expression DOTTIMES right_hand_side_expression .)
    $end            reduce using rule 30 (right_hand_side_expression -> right_hand_side_expression DOTTIMES right_hand_side_expression .)
    ;               reduce using rule 30 (right_hand_side_expression -> right_hand_side_expression DOTTIMES right_hand_side_expression .)
    }               reduce using rule 30 (right_hand_side_expression -> right_hand_side_expression DOTTIMES right_hand_side_expression .)
    )               reduce using rule 30 (right_hand_side_expression -> right_hand_side_expression DOTTIMES right_hand_side_expression .)
    ELSE            reduce using rule 30 (right_hand_side_expression -> right_hand_side_expression DOTTIMES right_hand_side_expression .)
    '               shift and go to state 47


state 85

    (31) right_hand_side_expression -> right_hand_side_expression DOTMINUS right_hand_side_expression .
    (29) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (36) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    (37) right_hand_side_expression -> right_hand_side_expression . '
    (56) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (57) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (58) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (59) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (61) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
    DOTMINUS        reduce using rule 31 (right_hand_side_expression -> right_hand_side_expression DOTMINUS right_hand_side_expression .)
    DOTPLUS         reduce using rule 31 (right_hand_side_expression -> right_hand_side_expression DOTMINUS right_hand_side_expression .)
    -               reduce using rule 31 (right_hand_side_expression -> right_hand_side_expression DOTMINUS right_hand_side_expression .)
    +               reduce using rule 31 (right_hand_side_expression -> right_hand_side_expression DOTMINUS right_hand_side_expression .)
    NE              reduce using rule 31 (right_hand_side_expression -> right_hand_side_expression DOTMINUS right_hand_side_expression .)
    EQ              reduce using rule 31 (right_hand_side_expression -> right_hand_side_expression DOTMINUS right_hand_side_expression .)
    GE              reduce using rule 31 (right_hand_side_expression -> right_hand_side_expression DOTMINUS right_hand_side_expression .)
    LE              reduce using rule 31 (right_hand_side_expression -> right_hand_side_expression DOTMINUS right_hand_side_expression .)
    GT              reduce using rule 31 (right_hand_side_expression -> right_hand_side_expression DOTMINUS right_hand_side_expression .)
    LT              reduce using rule 31 (right_hand_side_expression -> right_hand_side_expression DOTMINUS right_hand_side_expression .)
    RETURN          reduce using rule 31 (right_hand_side_expression -> right_hand_side_expression DOTMINUS right_hand_side_expression .)
    CONTINUE        reduce using rule 31 (right_hand_side_expression -> right_hand_side_expression DOTMINUS right_hand_side_expression .)
    BREAK           reduce using rule 31 (right_hand_side_expression -> right_hand_side_expression DOTMINUS right_hand_side_expression .)
    {               reduce using rule 31 (right_hand_side_expression -> right_hand_side_expression DOTMINUS right_hand_side_expression .)
    PRINT           reduce using rule 31 (right_hand_side_expression -> right_hand_side_expression DOTMINUS right_hand_side_expression .)
    (               reduce using rule 31 (right_hand_side_expression -> right_hand_side_expression DOTMINUS right_hand_side_expression .)
    FOR             reduce using rule 31 (right_hand_side_expression -> right_hand_side_expression DOTMINUS right_hand_side_expression .)
    WHILE           reduce using rule 31 (right_hand_side_expression -> right_hand_side_expression DOTMINUS right_hand_side_expression .)
    IF              reduce using rule 31 (right_hand_side_expression -> right_hand_side_expression DOTMINUS right_hand_side_expression .)
    ID              reduce using rule 31 (right_hand_side_expression -> right_hand_side_expression DOTMINUS right_hand_side_expression .)
    [               reduce using rule 31 (right_hand_side_expression -> right_hand_side_expression DOTMINUS right_hand_side_expression .)
    STRING          reduce using rule 31 (right_hand_side_expression -> right_hand_side_expression DOTMINUS right_hand_side_expression .)
    FLOATNUM        reduce using rule 31 (right_hand_side_expression -> right_hand_side_expression DOTMINUS right_hand_side_expression .)
    INTNUM          reduce using rule 31 (right_hand_side_expression -> right_hand_side_expression DOTMINUS right_hand_side_expression .)
    EYE             reduce using rule 31 (right_hand_side_expression -> right_hand_side_expression DOTMINUS right_hand_side_expression .)
    ONES            reduce using rule 31 (right_hand_side_expression -> right_hand_side_expression DOTMINUS right_hand_side_expression .)
    ZEROS           reduce using rule 31 (right_hand_side_expression -> right_hand_side_expression DOTMINUS right_hand_side_expression .)
    $end            reduce using rule 31 (right_hand_side_expression -> right_hand_side_expression DOTMINUS right_hand_side_expression .)
    ;               reduce using rule 31 (right_hand_side_expression -> right_hand_side_expression DOTMINUS right_hand_side_expression .)
    }               reduce using rule 31 (right_hand_side_expression -> right_hand_side_expression DOTMINUS right_hand_side_expression .)
    )               reduce using rule 31 (right_hand_side_expression -> right_hand_side_expression DOTMINUS right_hand_side_expression .)
    ELSE            reduce using rule 31 (right_hand_side_expression -> right_hand_side_expression DOTMINUS right_hand_side_expression .)
    DOTDIVIDE       shift and go to state 39
    DOTTIMES        shift and go to state 40
    /               shift and go to state 43
    *               shift and go to state 44
    '               shift and go to state 47


state 86

    (32) right_hand_side_expression -> right_hand_side_expression DOTPLUS right_hand_side_expression .
    (29) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (36) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    (37) right_hand_side_expression -> right_hand_side_expression . '
    (56) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (57) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (58) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (59) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (61) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
    DOTMINUS        reduce using rule 32 (right_hand_side_expression -> right_hand_side_expression DOTPLUS right_hand_side_expression .)
    DOTPLUS         reduce using rule 32 (right_hand_side_expression -> right_hand_side_expression DOTPLUS right_hand_side_expression .)
    -               reduce using rule 32 (right_hand_side_expression -> right_hand_side_expression DOTPLUS right_hand_side_expression .)
    +               reduce using rule 32 (right_hand_side_expression -> right_hand_side_expression DOTPLUS right_hand_side_expression .)
    NE              reduce using rule 32 (right_hand_side_expression -> right_hand_side_expression DOTPLUS right_hand_side_expression .)
    EQ              reduce using rule 32 (right_hand_side_expression -> right_hand_side_expression DOTPLUS right_hand_side_expression .)
    GE              reduce using rule 32 (right_hand_side_expression -> right_hand_side_expression DOTPLUS right_hand_side_expression .)
    LE              reduce using rule 32 (right_hand_side_expression -> right_hand_side_expression DOTPLUS right_hand_side_expression .)
    GT              reduce using rule 32 (right_hand_side_expression -> right_hand_side_expression DOTPLUS right_hand_side_expression .)
    LT              reduce using rule 32 (right_hand_side_expression -> right_hand_side_expression DOTPLUS right_hand_side_expression .)
    RETURN          reduce using rule 32 (right_hand_side_expression -> right_hand_side_expression DOTPLUS right_hand_side_expression .)
    CONTINUE        reduce using rule 32 (right_hand_side_expression -> right_hand_side_expression DOTPLUS right_hand_side_expression .)
    BREAK           reduce using rule 32 (right_hand_side_expression -> right_hand_side_expression DOTPLUS right_hand_side_expression .)
    {               reduce using rule 32 (right_hand_side_expression -> right_hand_side_expression DOTPLUS right_hand_side_expression .)
    PRINT           reduce using rule 32 (right_hand_side_expression -> right_hand_side_expression DOTPLUS right_hand_side_expression .)
    (               reduce using rule 32 (right_hand_side_expression -> right_hand_side_expression DOTPLUS right_hand_side_expression .)
    FOR             reduce using rule 32 (right_hand_side_expression -> right_hand_side_expression DOTPLUS right_hand_side_expression .)
    WHILE           reduce using rule 32 (right_hand_side_expression -> right_hand_side_expression DOTPLUS right_hand_side_expression .)
    IF              reduce using rule 32 (right_hand_side_expression -> right_hand_side_expression DOTPLUS right_hand_side_expression .)
    ID              reduce using rule 32 (right_hand_side_expression -> right_hand_side_expression DOTPLUS right_hand_side_expression .)
    [               reduce using rule 32 (right_hand_side_expression -> right_hand_side_expression DOTPLUS right_hand_side_expression .)
    STRING          reduce using rule 32 (right_hand_side_expression -> right_hand_side_expression DOTPLUS right_hand_side_expression .)
    FLOATNUM        reduce using rule 32 (right_hand_side_expression -> right_hand_side_expression DOTPLUS right_hand_side_expression .)
    INTNUM          reduce using rule 32 (right_hand_side_expression -> right_hand_side_expression DOTPLUS right_hand_side_expression .)
    EYE             reduce using rule 32 (right_hand_side_expression -> right_hand_side_expression DOTPLUS right_hand_side_expression .)
    ONES            reduce using rule 32 (right_hand_side_expression -> right_hand_side_expression DOTPLUS right_hand_side_expression .)
    ZEROS           reduce using rule 32 (right_hand_side_expression -> right_hand_side_expression DOTPLUS right_hand_side_expression .)
    $end            reduce using rule 32 (right_hand_side_expression -> right_hand_side_expression DOTPLUS right_hand_side_expression .)
    ;               reduce using rule 32 (right_hand_side_expression -> right_hand_side_expression DOTPLUS right_hand_side_expression .)
    }               reduce using rule 32 (right_hand_side_expression -> right_hand_side_expression DOTPLUS right_hand_side_expression .)
    )               reduce using rule 32 (right_hand_side_expression -> right_hand_side_expression DOTPLUS right_hand_side_expression .)
    ELSE            reduce using rule 32 (right_hand_side_expression -> right_hand_side_expression DOTPLUS right_hand_side_expression .)
    DOTDIVIDE       shift and go to state 39
    DOTTIMES        shift and go to state 40
    /               shift and go to state 43
    *               shift and go to state 44
    '               shift and go to state 47


state 87

    (33) right_hand_side_expression -> right_hand_side_expression / right_hand_side_expression .
    (29) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (36) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    (37) right_hand_side_expression -> right_hand_side_expression . '
    (56) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (57) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (58) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (59) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (61) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
    DOTDIVIDE       reduce using rule 33 (right_hand_side_expression -> right_hand_side_expression / right_hand_side_expression .)
    DOTTIMES        reduce using rule 33 (right_hand_side_expression -> right_hand_side_expression / right_hand_side_expression .)
    DOTMINUS        reduce using rule 33 (right_hand_side_expression -> right_hand_side_expression / right_hand_side_expression .)
    DOTPLUS         reduce using rule 33 (right_hand_side_expression -> right_hand_side_expression / right_hand_side_expression .)
    /               reduce using rule 33 (right_hand_side_expression -> right_hand_side_expression / right_hand_side_expression .)
    *               reduce using rule 33 (right_hand_side_expression -> right_hand_side_expression / right_hand_side_expression .)
    -               reduce using rule 33 (right_hand_side_expression -> right_hand_side_expression / right_hand_side_expression .)
    +               reduce using rule 33 (right_hand_side_expression -> right_hand_side_expression / right_hand_side_expression .)
    NE              reduce using rule 33 (right_hand_side_expression -> right_hand_side_expression / right_hand_side_expression .)
    EQ              reduce using rule 33 (right_hand_side_expression -> right_hand_side_expression / right_hand_side_expression .)
    GE              reduce using rule 33 (right_hand_side_expression -> right_hand_side_expression / right_hand_side_expression .)
    LE              reduce using rule 33 (right_hand_side_expression -> right_hand_side_expression / right_hand_side_expression .)
    GT              reduce using rule 33 (right_hand_side_expression -> right_hand_side_expression / right_hand_side_expression .)
    LT              reduce using rule 33 (right_hand_side_expression -> right_hand_side_expression / right_hand_side_expression .)
    RETURN          reduce using rule 33 (right_hand_side_expression -> right_hand_side_expression / right_hand_side_expression .)
    CONTINUE        reduce using rule 33 (right_hand_side_expression -> right_hand_side_expression / right_hand_side_expression .)
    BREAK           reduce using rule 33 (right_hand_side_expression -> right_hand_side_expression / right_hand_side_expression .)
    {               reduce using rule 33 (right_hand_side_expression -> right_hand_side_expression / right_hand_side_expression .)
    PRINT           reduce using rule 33 (right_hand_side_expression -> right_hand_side_expression / right_hand_side_expression .)
    (               reduce using rule 33 (right_hand_side_expression -> right_hand_side_expression / right_hand_side_expression .)
    FOR             reduce using rule 33 (right_hand_side_expression -> right_hand_side_expression / right_hand_side_expression .)
    WHILE           reduce using rule 33 (right_hand_side_expression -> right_hand_side_expression / right_hand_side_expression .)
    IF              reduce using rule 33 (right_hand_side_expression -> right_hand_side_expression / right_hand_side_expression .)
    ID              reduce using rule 33 (right_hand_side_expression -> right_hand_side_expression / right_hand_side_expression .)
    [               reduce using rule 33 (right_hand_side_expression -> right_hand_side_expression / right_hand_side_expression .)
    STRING          reduce using rule 33 (right_hand_side_expression -> right_hand_side_expression / right_hand_side_expression .)
    FLOATNUM        reduce using rule 33 (right_hand_side_expression -> right_hand_side_expression / right_hand_side_expression .)
    INTNUM          reduce using rule 33 (right_hand_side_expression -> right_hand_side_expression / right_hand_side_expression .)
    EYE             reduce using rule 33 (right_hand_side_expression -> right_hand_side_expression / right_hand_side_expression .)
    ONES            reduce using rule 33 (right_hand_side_expression -> right_hand_side_expression / right_hand_side_expression .)
    ZEROS           reduce using rule 33 (right_hand_side_expression -> right_hand_side_expression / right_hand_side_expression .)
    $end            reduce using rule 33 (right_hand_side_expression -> right_hand_side_expression / right_hand_side_expression .)
    ;               reduce using rule 33 (right_hand_side_expression -> right_hand_side_expression / right_hand_side_expression .)
    }               reduce using rule 33 (right_hand_side_expression -> right_hand_side_expression / right_hand_side_expression .)
    )               reduce using rule 33 (right_hand_side_expression -> right_hand_side_expression / right_hand_side_expression .)
    ELSE            reduce using rule 33 (right_hand_side_expression -> right_hand_side_expression / right_hand_side_expression .)
    '               shift and go to state 47


state 88

    (34) right_hand_side_expression -> right_hand_side_expression * right_hand_side_expression .
    (29) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (36) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    (37) right_hand_side_expression -> right_hand_side_expression . '
    (56) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (57) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (58) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (59) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (61) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
    DOTDIVIDE       reduce using rule 34 (right_hand_side_expression -> right_hand_side_expression * right_hand_side_expression .)
    DOTTIMES        reduce using rule 34 (right_hand_side_expression -> right_hand_side_expression * right_hand_side_expression .)
    DOTMINUS        reduce using rule 34 (right_hand_side_expression -> right_hand_side_expression * right_hand_side_expression .)
    DOTPLUS         reduce using rule 34 (right_hand_side_expression -> right_hand_side_expression * right_hand_side_expression .)
    /               reduce using rule 34 (right_hand_side_expression -> right_hand_side_expression * right_hand_side_expression .)
    *               reduce using rule 34 (right_hand_side_expression -> right_hand_side_expression * right_hand_side_expression .)
    -               reduce using rule 34 (right_hand_side_expression -> right_hand_side_expression * right_hand_side_expression .)
    +               reduce using rule 34 (right_hand_side_expression -> right_hand_side_expression * right_hand_side_expression .)
    NE              reduce using rule 34 (right_hand_side_expression -> right_hand_side_expression * right_hand_side_expression .)
    EQ              reduce using rule 34 (right_hand_side_expression -> right_hand_side_expression * right_hand_side_expression .)
    GE              reduce using rule 34 (right_hand_side_expression -> right_hand_side_expression * right_hand_side_expression .)
    LE              reduce using rule 34 (right_hand_side_expression -> right_hand_side_expression * right_hand_side_expression .)
    GT              reduce using rule 34 (right_hand_side_expression -> right_hand_side_expression * right_hand_side_expression .)
    LT              reduce using rule 34 (right_hand_side_expression -> right_hand_side_expression * right_hand_side_expression .)
    RETURN          reduce using rule 34 (right_hand_side_expression -> right_hand_side_expression * right_hand_side_expression .)
    CONTINUE        reduce using rule 34 (right_hand_side_expression -> right_hand_side_expression * right_hand_side_expression .)
    BREAK           reduce using rule 34 (right_hand_side_expression -> right_hand_side_expression * right_hand_side_expression .)
    {               reduce using rule 34 (right_hand_side_expression -> right_hand_side_expression * right_hand_side_expression .)
    PRINT           reduce using rule 34 (right_hand_side_expression -> right_hand_side_expression * right_hand_side_expression .)
    (               reduce using rule 34 (right_hand_side_expression -> right_hand_side_expression * right_hand_side_expression .)
    FOR             reduce using rule 34 (right_hand_side_expression -> right_hand_side_expression * right_hand_side_expression .)
    WHILE           reduce using rule 34 (right_hand_side_expression -> right_hand_side_expression * right_hand_side_expression .)
    IF              reduce using rule 34 (right_hand_side_expression -> right_hand_side_expression * right_hand_side_expression .)
    ID              reduce using rule 34 (right_hand_side_expression -> right_hand_side_expression * right_hand_side_expression .)
    [               reduce using rule 34 (right_hand_side_expression -> right_hand_side_expression * right_hand_side_expression .)
    STRING          reduce using rule 34 (right_hand_side_expression -> right_hand_side_expression * right_hand_side_expression .)
    FLOATNUM        reduce using rule 34 (right_hand_side_expression -> right_hand_side_expression * right_hand_side_expression .)
    INTNUM          reduce using rule 34 (right_hand_side_expression -> right_hand_side_expression * right_hand_side_expression .)
    EYE             reduce using rule 34 (right_hand_side_expression -> right_hand_side_expression * right_hand_side_expression .)
    ONES            reduce using rule 34 (right_hand_side_expression -> right_hand_side_expression * right_hand_side_expression .)
    ZEROS           reduce using rule 34 (right_hand_side_expression -> right_hand_side_expression * right_hand_side_expression .)
    $end            reduce using rule 34 (right_hand_side_expression -> right_hand_side_expression * right_hand_side_expression .)
    ;               reduce using rule 34 (right_hand_side_expression -> right_hand_side_expression * right_hand_side_expression .)
    }               reduce using rule 34 (right_hand_side_expression -> right_hand_side_expression * right_hand_side_expression .)
    )               reduce using rule 34 (right_hand_side_expression -> right_hand_side_expression * right_hand_side_expression .)
    ELSE            reduce using rule 34 (right_hand_side_expression -> right_hand_side_expression * right_hand_side_expression .)
    '               shift and go to state 47


state 89

    (35) right_hand_side_expression -> right_hand_side_expression - right_hand_side_expression .
    (29) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (36) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    (37) right_hand_side_expression -> right_hand_side_expression . '
    (56) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (57) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (58) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (59) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (61) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
    DOTMINUS        reduce using rule 35 (right_hand_side_expression -> right_hand_side_expression - right_hand_side_expression .)
    DOTPLUS         reduce using rule 35 (right_hand_side_expression -> right_hand_side_expression - right_hand_side_expression .)
    -               reduce using rule 35 (right_hand_side_expression -> right_hand_side_expression - right_hand_side_expression .)
    +               reduce using rule 35 (right_hand_side_expression -> right_hand_side_expression - right_hand_side_expression .)
    NE              reduce using rule 35 (right_hand_side_expression -> right_hand_side_expression - right_hand_side_expression .)
    EQ              reduce using rule 35 (right_hand_side_expression -> right_hand_side_expression - right_hand_side_expression .)
    GE              reduce using rule 35 (right_hand_side_expression -> right_hand_side_expression - right_hand_side_expression .)
    LE              reduce using rule 35 (right_hand_side_expression -> right_hand_side_expression - right_hand_side_expression .)
    GT              reduce using rule 35 (right_hand_side_expression -> right_hand_side_expression - right_hand_side_expression .)
    LT              reduce using rule 35 (right_hand_side_expression -> right_hand_side_expression - right_hand_side_expression .)
    RETURN          reduce using rule 35 (right_hand_side_expression -> right_hand_side_expression - right_hand_side_expression .)
    CONTINUE        reduce using rule 35 (right_hand_side_expression -> right_hand_side_expression - right_hand_side_expression .)
    BREAK           reduce using rule 35 (right_hand_side_expression -> right_hand_side_expression - right_hand_side_expression .)
    {               reduce using rule 35 (right_hand_side_expression -> right_hand_side_expression - right_hand_side_expression .)
    PRINT           reduce using rule 35 (right_hand_side_expression -> right_hand_side_expression - right_hand_side_expression .)
    (               reduce using rule 35 (right_hand_side_expression -> right_hand_side_expression - right_hand_side_expression .)
    FOR             reduce using rule 35 (right_hand_side_expression -> right_hand_side_expression - right_hand_side_expression .)
    WHILE           reduce using rule 35 (right_hand_side_expression -> right_hand_side_expression - right_hand_side_expression .)
    IF              reduce using rule 35 (right_hand_side_expression -> right_hand_side_expression - right_hand_side_expression .)
    ID              reduce using rule 35 (right_hand_side_expression -> right_hand_side_expression - right_hand_side_expression .)
    [               reduce using rule 35 (right_hand_side_expression -> right_hand_side_expression - right_hand_side_expression .)
    STRING          reduce using rule 35 (right_hand_side_expression -> right_hand_side_expression - right_hand_side_expression .)
    FLOATNUM        reduce using rule 35 (right_hand_side_expression -> right_hand_side_expression - right_hand_side_expression .)
    INTNUM          reduce using rule 35 (right_hand_side_expression -> right_hand_side_expression - right_hand_side_expression .)
    EYE             reduce using rule 35 (right_hand_side_expression -> right_hand_side_expression - right_hand_side_expression .)
    ONES            reduce using rule 35 (right_hand_side_expression -> right_hand_side_expression - right_hand_side_expression .)
    ZEROS           reduce using rule 35 (right_hand_side_expression -> right_hand_side_expression - right_hand_side_expression .)
    $end            reduce using rule 35 (right_hand_side_expression -> right_hand_side_expression - right_hand_side_expression .)
    ;               reduce using rule 35 (right_hand_side_expression -> right_hand_side_expression - right_hand_side_expression .)
    }               reduce using rule 35 (right_hand_side_expression -> right_hand_side_expression - right_hand_side_expression .)
    )               reduce using rule 35 (right_hand_side_expression -> right_hand_side_expression - right_hand_side_expression .)
    ELSE            reduce using rule 35 (right_hand_side_expression -> right_hand_side_expression - right_hand_side_expression .)
    DOTDIVIDE       shift and go to state 39
    DOTTIMES        shift and go to state 40
    /               shift and go to state 43
    *               shift and go to state 44
    '               shift and go to state 47


state 90

    (36) right_hand_side_expression -> right_hand_side_expression + right_hand_side_expression .
    (29) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (36) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    (37) right_hand_side_expression -> right_hand_side_expression . '
    (56) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (57) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (58) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (59) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (61) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
    DOTMINUS        reduce using rule 36 (right_hand_side_expression -> right_hand_side_expression + right_hand_side_expression .)
    DOTPLUS         reduce using rule 36 (right_hand_side_expression -> right_hand_side_expression + right_hand_side_expression .)
    -               reduce using rule 36 (right_hand_side_expression -> right_hand_side_expression + right_hand_side_expression .)
    +               reduce using rule 36 (right_hand_side_expression -> right_hand_side_expression + right_hand_side_expression .)
    NE              reduce using rule 36 (right_hand_side_expression -> right_hand_side_expression + right_hand_side_expression .)
    EQ              reduce using rule 36 (right_hand_side_expression -> right_hand_side_expression + right_hand_side_expression .)
    GE              reduce using rule 36 (right_hand_side_expression -> right_hand_side_expression + right_hand_side_expression .)
    LE              reduce using rule 36 (right_hand_side_expression -> right_hand_side_expression + right_hand_side_expression .)
    GT              reduce using rule 36 (right_hand_side_expression -> right_hand_side_expression + right_hand_side_expression .)
    LT              reduce using rule 36 (right_hand_side_expression -> right_hand_side_expression + right_hand_side_expression .)
    RETURN          reduce using rule 36 (right_hand_side_expression -> right_hand_side_expression + right_hand_side_expression .)
    CONTINUE        reduce using rule 36 (right_hand_side_expression -> right_hand_side_expression + right_hand_side_expression .)
    BREAK           reduce using rule 36 (right_hand_side_expression -> right_hand_side_expression + right_hand_side_expression .)
    {               reduce using rule 36 (right_hand_side_expression -> right_hand_side_expression + right_hand_side_expression .)
    PRINT           reduce using rule 36 (right_hand_side_expression -> right_hand_side_expression + right_hand_side_expression .)
    (               reduce using rule 36 (right_hand_side_expression -> right_hand_side_expression + right_hand_side_expression .)
    FOR             reduce using rule 36 (right_hand_side_expression -> right_hand_side_expression + right_hand_side_expression .)
    WHILE           reduce using rule 36 (right_hand_side_expression -> right_hand_side_expression + right_hand_side_expression .)
    IF              reduce using rule 36 (right_hand_side_expression -> right_hand_side_expression + right_hand_side_expression .)
    ID              reduce using rule 36 (right_hand_side_expression -> right_hand_side_expression + right_hand_side_expression .)
    [               reduce using rule 36 (right_hand_side_expression -> right_hand_side_expression + right_hand_side_expression .)
    STRING          reduce using rule 36 (right_hand_side_expression -> right_hand_side_expression + right_hand_side_expression .)
    FLOATNUM        reduce using rule 36 (right_hand_side_expression -> right_hand_side_expression + right_hand_side_expression .)
    INTNUM          reduce using rule 36 (right_hand_side_expression -> right_hand_side_expression + right_hand_side_expression .)
    EYE             reduce using rule 36 (right_hand_side_expression -> right_hand_side_expression + right_hand_side_expression .)
    ONES            reduce using rule 36 (right_hand_side_expression -> right_hand_side_expression + right_hand_side_expression .)
    ZEROS           reduce using rule 36 (right_hand_side_expression -> right_hand_side_expression + right_hand_side_expression .)
    $end            reduce using rule 36 (right_hand_side_expression -> right_hand_side_expression + right_hand_side_expression .)
    ;               reduce using rule 36 (right_hand_side_expression -> right_hand_side_expression + right_hand_side_expression .)
    }               reduce using rule 36 (right_hand_side_expression -> right_hand_side_expression + right_hand_side_expression .)
    )               reduce using rule 36 (right_hand_side_expression -> right_hand_side_expression + right_hand_side_expression .)
    ELSE            reduce using rule 36 (right_hand_side_expression -> right_hand_side_expression + right_hand_side_expression .)
    DOTDIVIDE       shift and go to state 39
    DOTTIMES        shift and go to state 40
    /               shift and go to state 43
    *               shift and go to state 44
    '               shift and go to state 47


state 91

    (56) relation_expression -> right_hand_side_expression NE right_hand_side_expression .
    (29) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (36) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    (37) right_hand_side_expression -> right_hand_side_expression . '
    (56) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (57) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (58) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (59) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (61) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
    NE              reduce using rule 56 (relation_expression -> right_hand_side_expression NE right_hand_side_expression .)
    EQ              reduce using rule 56 (relation_expression -> right_hand_side_expression NE right_hand_side_expression .)
    GE              reduce using rule 56 (relation_expression -> right_hand_side_expression NE right_hand_side_expression .)
    LE              reduce using rule 56 (relation_expression -> right_hand_side_expression NE right_hand_side_expression .)
    GT              reduce using rule 56 (relation_expression -> right_hand_side_expression NE right_hand_side_expression .)
    LT              reduce using rule 56 (relation_expression -> right_hand_side_expression NE right_hand_side_expression .)
    RETURN          reduce using rule 56 (relation_expression -> right_hand_side_expression NE right_hand_side_expression .)
    CONTINUE        reduce using rule 56 (relation_expression -> right_hand_side_expression NE right_hand_side_expression .)
    BREAK           reduce using rule 56 (relation_expression -> right_hand_side_expression NE right_hand_side_expression .)
    {               reduce using rule 56 (relation_expression -> right_hand_side_expression NE right_hand_side_expression .)
    PRINT           reduce using rule 56 (relation_expression -> right_hand_side_expression NE right_hand_side_expression .)
    (               reduce using rule 56 (relation_expression -> right_hand_side_expression NE right_hand_side_expression .)
    FOR             reduce using rule 56 (relation_expression -> right_hand_side_expression NE right_hand_side_expression .)
    WHILE           reduce using rule 56 (relation_expression -> right_hand_side_expression NE right_hand_side_expression .)
    IF              reduce using rule 56 (relation_expression -> right_hand_side_expression NE right_hand_side_expression .)
    ID              reduce using rule 56 (relation_expression -> right_hand_side_expression NE right_hand_side_expression .)
    [               reduce using rule 56 (relation_expression -> right_hand_side_expression NE right_hand_side_expression .)
    STRING          reduce using rule 56 (relation_expression -> right_hand_side_expression NE right_hand_side_expression .)
    FLOATNUM        reduce using rule 56 (relation_expression -> right_hand_side_expression NE right_hand_side_expression .)
    INTNUM          reduce using rule 56 (relation_expression -> right_hand_side_expression NE right_hand_side_expression .)
    EYE             reduce using rule 56 (relation_expression -> right_hand_side_expression NE right_hand_side_expression .)
    ONES            reduce using rule 56 (relation_expression -> right_hand_side_expression NE right_hand_side_expression .)
    ZEROS           reduce using rule 56 (relation_expression -> right_hand_side_expression NE right_hand_side_expression .)
    $end            reduce using rule 56 (relation_expression -> right_hand_side_expression NE right_hand_side_expression .)
    ;               reduce using rule 56 (relation_expression -> right_hand_side_expression NE right_hand_side_expression .)
    }               reduce using rule 56 (relation_expression -> right_hand_side_expression NE right_hand_side_expression .)
    )               reduce using rule 56 (relation_expression -> right_hand_side_expression NE right_hand_side_expression .)
    ELSE            reduce using rule 56 (relation_expression -> right_hand_side_expression NE right_hand_side_expression .)
    DOTDIVIDE       shift and go to state 39
    DOTTIMES        shift and go to state 40
    DOTMINUS        shift and go to state 41
    DOTPLUS         shift and go to state 42
    /               shift and go to state 43
    *               shift and go to state 44
    -               shift and go to state 45
    +               shift and go to state 46
    '               shift and go to state 47


state 92

    (57) relation_expression -> right_hand_side_expression EQ right_hand_side_expression .
    (29) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (36) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    (37) right_hand_side_expression -> right_hand_side_expression . '
    (56) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (57) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (58) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (59) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (61) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
    NE              reduce using rule 57 (relation_expression -> right_hand_side_expression EQ right_hand_side_expression .)
    EQ              reduce using rule 57 (relation_expression -> right_hand_side_expression EQ right_hand_side_expression .)
    GE              reduce using rule 57 (relation_expression -> right_hand_side_expression EQ right_hand_side_expression .)
    LE              reduce using rule 57 (relation_expression -> right_hand_side_expression EQ right_hand_side_expression .)
    GT              reduce using rule 57 (relation_expression -> right_hand_side_expression EQ right_hand_side_expression .)
    LT              reduce using rule 57 (relation_expression -> right_hand_side_expression EQ right_hand_side_expression .)
    RETURN          reduce using rule 57 (relation_expression -> right_hand_side_expression EQ right_hand_side_expression .)
    CONTINUE        reduce using rule 57 (relation_expression -> right_hand_side_expression EQ right_hand_side_expression .)
    BREAK           reduce using rule 57 (relation_expression -> right_hand_side_expression EQ right_hand_side_expression .)
    {               reduce using rule 57 (relation_expression -> right_hand_side_expression EQ right_hand_side_expression .)
    PRINT           reduce using rule 57 (relation_expression -> right_hand_side_expression EQ right_hand_side_expression .)
    (               reduce using rule 57 (relation_expression -> right_hand_side_expression EQ right_hand_side_expression .)
    FOR             reduce using rule 57 (relation_expression -> right_hand_side_expression EQ right_hand_side_expression .)
    WHILE           reduce using rule 57 (relation_expression -> right_hand_side_expression EQ right_hand_side_expression .)
    IF              reduce using rule 57 (relation_expression -> right_hand_side_expression EQ right_hand_side_expression .)
    ID              reduce using rule 57 (relation_expression -> right_hand_side_expression EQ right_hand_side_expression .)
    [               reduce using rule 57 (relation_expression -> right_hand_side_expression EQ right_hand_side_expression .)
    STRING          reduce using rule 57 (relation_expression -> right_hand_side_expression EQ right_hand_side_expression .)
    FLOATNUM        reduce using rule 57 (relation_expression -> right_hand_side_expression EQ right_hand_side_expression .)
    INTNUM          reduce using rule 57 (relation_expression -> right_hand_side_expression EQ right_hand_side_expression .)
    EYE             reduce using rule 57 (relation_expression -> right_hand_side_expression EQ right_hand_side_expression .)
    ONES            reduce using rule 57 (relation_expression -> right_hand_side_expression EQ right_hand_side_expression .)
    ZEROS           reduce using rule 57 (relation_expression -> right_hand_side_expression EQ right_hand_side_expression .)
    $end            reduce using rule 57 (relation_expression -> right_hand_side_expression EQ right_hand_side_expression .)
    ;               reduce using rule 57 (relation_expression -> right_hand_side_expression EQ right_hand_side_expression .)
    }               reduce using rule 57 (relation_expression -> right_hand_side_expression EQ right_hand_side_expression .)
    )               reduce using rule 57 (relation_expression -> right_hand_side_expression EQ right_hand_side_expression .)
    ELSE            reduce using rule 57 (relation_expression -> right_hand_side_expression EQ right_hand_side_expression .)
    DOTDIVIDE       shift and go to state 39
    DOTTIMES        shift and go to state 40
    DOTMINUS        shift and go to state 41
    DOTPLUS         shift and go to state 42
    /               shift and go to state 43
    *               shift and go to state 44
    -               shift and go to state 45
    +               shift and go to state 46
    '               shift and go to state 47


state 93

    (58) relation_expression -> right_hand_side_expression GE right_hand_side_expression .
    (29) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (36) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    (37) right_hand_side_expression -> right_hand_side_expression . '
    (56) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (57) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (58) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (59) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (61) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
    NE              reduce using rule 58 (relation_expression -> right_hand_side_expression GE right_hand_side_expression .)
    EQ              reduce using rule 58 (relation_expression -> right_hand_side_expression GE right_hand_side_expression .)
    GE              reduce using rule 58 (relation_expression -> right_hand_side_expression GE right_hand_side_expression .)
    LE              reduce using rule 58 (relation_expression -> right_hand_side_expression GE right_hand_side_expression .)
    GT              reduce using rule 58 (relation_expression -> right_hand_side_expression GE right_hand_side_expression .)
    LT              reduce using rule 58 (relation_expression -> right_hand_side_expression GE right_hand_side_expression .)
    RETURN          reduce using rule 58 (relation_expression -> right_hand_side_expression GE right_hand_side_expression .)
    CONTINUE        reduce using rule 58 (relation_expression -> right_hand_side_expression GE right_hand_side_expression .)
    BREAK           reduce using rule 58 (relation_expression -> right_hand_side_expression GE right_hand_side_expression .)
    {               reduce using rule 58 (relation_expression -> right_hand_side_expression GE right_hand_side_expression .)
    PRINT           reduce using rule 58 (relation_expression -> right_hand_side_expression GE right_hand_side_expression .)
    (               reduce using rule 58 (relation_expression -> right_hand_side_expression GE right_hand_side_expression .)
    FOR             reduce using rule 58 (relation_expression -> right_hand_side_expression GE right_hand_side_expression .)
    WHILE           reduce using rule 58 (relation_expression -> right_hand_side_expression GE right_hand_side_expression .)
    IF              reduce using rule 58 (relation_expression -> right_hand_side_expression GE right_hand_side_expression .)
    ID              reduce using rule 58 (relation_expression -> right_hand_side_expression GE right_hand_side_expression .)
    [               reduce using rule 58 (relation_expression -> right_hand_side_expression GE right_hand_side_expression .)
    STRING          reduce using rule 58 (relation_expression -> right_hand_side_expression GE right_hand_side_expression .)
    FLOATNUM        reduce using rule 58 (relation_expression -> right_hand_side_expression GE right_hand_side_expression .)
    INTNUM          reduce using rule 58 (relation_expression -> right_hand_side_expression GE right_hand_side_expression .)
    EYE             reduce using rule 58 (relation_expression -> right_hand_side_expression GE right_hand_side_expression .)
    ONES            reduce using rule 58 (relation_expression -> right_hand_side_expression GE right_hand_side_expression .)
    ZEROS           reduce using rule 58 (relation_expression -> right_hand_side_expression GE right_hand_side_expression .)
    $end            reduce using rule 58 (relation_expression -> right_hand_side_expression GE right_hand_side_expression .)
    ;               reduce using rule 58 (relation_expression -> right_hand_side_expression GE right_hand_side_expression .)
    }               reduce using rule 58 (relation_expression -> right_hand_side_expression GE right_hand_side_expression .)
    )               reduce using rule 58 (relation_expression -> right_hand_side_expression GE right_hand_side_expression .)
    ELSE            reduce using rule 58 (relation_expression -> right_hand_side_expression GE right_hand_side_expression .)
    DOTDIVIDE       shift and go to state 39
    DOTTIMES        shift and go to state 40
    DOTMINUS        shift and go to state 41
    DOTPLUS         shift and go to state 42
    /               shift and go to state 43
    *               shift and go to state 44
    -               shift and go to state 45
    +               shift and go to state 46
    '               shift and go to state 47


state 94

    (59) relation_expression -> right_hand_side_expression LE right_hand_side_expression .
    (29) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (36) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    (37) right_hand_side_expression -> right_hand_side_expression . '
    (56) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (57) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (58) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (59) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (61) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
    NE              reduce using rule 59 (relation_expression -> right_hand_side_expression LE right_hand_side_expression .)
    EQ              reduce using rule 59 (relation_expression -> right_hand_side_expression LE right_hand_side_expression .)
    GE              reduce using rule 59 (relation_expression -> right_hand_side_expression LE right_hand_side_expression .)
    LE              reduce using rule 59 (relation_expression -> right_hand_side_expression LE right_hand_side_expression .)
    GT              reduce using rule 59 (relation_expression -> right_hand_side_expression LE right_hand_side_expression .)
    LT              reduce using rule 59 (relation_expression -> right_hand_side_expression LE right_hand_side_expression .)
    RETURN          reduce using rule 59 (relation_expression -> right_hand_side_expression LE right_hand_side_expression .)
    CONTINUE        reduce using rule 59 (relation_expression -> right_hand_side_expression LE right_hand_side_expression .)
    BREAK           reduce using rule 59 (relation_expression -> right_hand_side_expression LE right_hand_side_expression .)
    {               reduce using rule 59 (relation_expression -> right_hand_side_expression LE right_hand_side_expression .)
    PRINT           reduce using rule 59 (relation_expression -> right_hand_side_expression LE right_hand_side_expression .)
    (               reduce using rule 59 (relation_expression -> right_hand_side_expression LE right_hand_side_expression .)
    FOR             reduce using rule 59 (relation_expression -> right_hand_side_expression LE right_hand_side_expression .)
    WHILE           reduce using rule 59 (relation_expression -> right_hand_side_expression LE right_hand_side_expression .)
    IF              reduce using rule 59 (relation_expression -> right_hand_side_expression LE right_hand_side_expression .)
    ID              reduce using rule 59 (relation_expression -> right_hand_side_expression LE right_hand_side_expression .)
    [               reduce using rule 59 (relation_expression -> right_hand_side_expression LE right_hand_side_expression .)
    STRING          reduce using rule 59 (relation_expression -> right_hand_side_expression LE right_hand_side_expression .)
    FLOATNUM        reduce using rule 59 (relation_expression -> right_hand_side_expression LE right_hand_side_expression .)
    INTNUM          reduce using rule 59 (relation_expression -> right_hand_side_expression LE right_hand_side_expression .)
    EYE             reduce using rule 59 (relation_expression -> right_hand_side_expression LE right_hand_side_expression .)
    ONES            reduce using rule 59 (relation_expression -> right_hand_side_expression LE right_hand_side_expression .)
    ZEROS           reduce using rule 59 (relation_expression -> right_hand_side_expression LE right_hand_side_expression .)
    $end            reduce using rule 59 (relation_expression -> right_hand_side_expression LE right_hand_side_expression .)
    ;               reduce using rule 59 (relation_expression -> right_hand_side_expression LE right_hand_side_expression .)
    }               reduce using rule 59 (relation_expression -> right_hand_side_expression LE right_hand_side_expression .)
    )               reduce using rule 59 (relation_expression -> right_hand_side_expression LE right_hand_side_expression .)
    ELSE            reduce using rule 59 (relation_expression -> right_hand_side_expression LE right_hand_side_expression .)
    DOTDIVIDE       shift and go to state 39
    DOTTIMES        shift and go to state 40
    DOTMINUS        shift and go to state 41
    DOTPLUS         shift and go to state 42
    /               shift and go to state 43
    *               shift and go to state 44
    -               shift and go to state 45
    +               shift and go to state 46
    '               shift and go to state 47


state 95

    (60) relation_expression -> right_hand_side_expression GT right_hand_side_expression .
    (29) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (36) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    (37) right_hand_side_expression -> right_hand_side_expression . '
    (56) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (57) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (58) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (59) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (61) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
    NE              reduce using rule 60 (relation_expression -> right_hand_side_expression GT right_hand_side_expression .)
    EQ              reduce using rule 60 (relation_expression -> right_hand_side_expression GT right_hand_side_expression .)
    GE              reduce using rule 60 (relation_expression -> right_hand_side_expression GT right_hand_side_expression .)
    LE              reduce using rule 60 (relation_expression -> right_hand_side_expression GT right_hand_side_expression .)
    GT              reduce using rule 60 (relation_expression -> right_hand_side_expression GT right_hand_side_expression .)
    LT              reduce using rule 60 (relation_expression -> right_hand_side_expression GT right_hand_side_expression .)
    RETURN          reduce using rule 60 (relation_expression -> right_hand_side_expression GT right_hand_side_expression .)
    CONTINUE        reduce using rule 60 (relation_expression -> right_hand_side_expression GT right_hand_side_expression .)
    BREAK           reduce using rule 60 (relation_expression -> right_hand_side_expression GT right_hand_side_expression .)
    {               reduce using rule 60 (relation_expression -> right_hand_side_expression GT right_hand_side_expression .)
    PRINT           reduce using rule 60 (relation_expression -> right_hand_side_expression GT right_hand_side_expression .)
    (               reduce using rule 60 (relation_expression -> right_hand_side_expression GT right_hand_side_expression .)
    FOR             reduce using rule 60 (relation_expression -> right_hand_side_expression GT right_hand_side_expression .)
    WHILE           reduce using rule 60 (relation_expression -> right_hand_side_expression GT right_hand_side_expression .)
    IF              reduce using rule 60 (relation_expression -> right_hand_side_expression GT right_hand_side_expression .)
    ID              reduce using rule 60 (relation_expression -> right_hand_side_expression GT right_hand_side_expression .)
    [               reduce using rule 60 (relation_expression -> right_hand_side_expression GT right_hand_side_expression .)
    STRING          reduce using rule 60 (relation_expression -> right_hand_side_expression GT right_hand_side_expression .)
    FLOATNUM        reduce using rule 60 (relation_expression -> right_hand_side_expression GT right_hand_side_expression .)
    INTNUM          reduce using rule 60 (relation_expression -> right_hand_side_expression GT right_hand_side_expression .)
    EYE             reduce using rule 60 (relation_expression -> right_hand_side_expression GT right_hand_side_expression .)
    ONES            reduce using rule 60 (relation_expression -> right_hand_side_expression GT right_hand_side_expression .)
    ZEROS           reduce using rule 60 (relation_expression -> right_hand_side_expression GT right_hand_side_expression .)
    $end            reduce using rule 60 (relation_expression -> right_hand_side_expression GT right_hand_side_expression .)
    ;               reduce using rule 60 (relation_expression -> right_hand_side_expression GT right_hand_side_expression .)
    }               reduce using rule 60 (relation_expression -> right_hand_side_expression GT right_hand_side_expression .)
    )               reduce using rule 60 (relation_expression -> right_hand_side_expression GT right_hand_side_expression .)
    ELSE            reduce using rule 60 (relation_expression -> right_hand_side_expression GT right_hand_side_expression .)
    DOTDIVIDE       shift and go to state 39
    DOTTIMES        shift and go to state 40
    DOTMINUS        shift and go to state 41
    DOTPLUS         shift and go to state 42
    /               shift and go to state 43
    *               shift and go to state 44
    -               shift and go to state 45
    +               shift and go to state 46
    '               shift and go to state 47


state 96

    (61) relation_expression -> right_hand_side_expression LT right_hand_side_expression .
    (29) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (36) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    (37) right_hand_side_expression -> right_hand_side_expression . '
    (56) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (57) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (58) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (59) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (61) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
    NE              reduce using rule 61 (relation_expression -> right_hand_side_expression LT right_hand_side_expression .)
    EQ              reduce using rule 61 (relation_expression -> right_hand_side_expression LT right_hand_side_expression .)
    GE              reduce using rule 61 (relation_expression -> right_hand_side_expression LT right_hand_side_expression .)
    LE              reduce using rule 61 (relation_expression -> right_hand_side_expression LT right_hand_side_expression .)
    GT              reduce using rule 61 (relation_expression -> right_hand_side_expression LT right_hand_side_expression .)
    LT              reduce using rule 61 (relation_expression -> right_hand_side_expression LT right_hand_side_expression .)
    RETURN          reduce using rule 61 (relation_expression -> right_hand_side_expression LT right_hand_side_expression .)
    CONTINUE        reduce using rule 61 (relation_expression -> right_hand_side_expression LT right_hand_side_expression .)
    BREAK           reduce using rule 61 (relation_expression -> right_hand_side_expression LT right_hand_side_expression .)
    {               reduce using rule 61 (relation_expression -> right_hand_side_expression LT right_hand_side_expression .)
    PRINT           reduce using rule 61 (relation_expression -> right_hand_side_expression LT right_hand_side_expression .)
    (               reduce using rule 61 (relation_expression -> right_hand_side_expression LT right_hand_side_expression .)
    FOR             reduce using rule 61 (relation_expression -> right_hand_side_expression LT right_hand_side_expression .)
    WHILE           reduce using rule 61 (relation_expression -> right_hand_side_expression LT right_hand_side_expression .)
    IF              reduce using rule 61 (relation_expression -> right_hand_side_expression LT right_hand_side_expression .)
    ID              reduce using rule 61 (relation_expression -> right_hand_side_expression LT right_hand_side_expression .)
    [               reduce using rule 61 (relation_expression -> right_hand_side_expression LT right_hand_side_expression .)
    STRING          reduce using rule 61 (relation_expression -> right_hand_side_expression LT right_hand_side_expression .)
    FLOATNUM        reduce using rule 61 (relation_expression -> right_hand_side_expression LT right_hand_side_expression .)
    INTNUM          reduce using rule 61 (relation_expression -> right_hand_side_expression LT right_hand_side_expression .)
    EYE             reduce using rule 61 (relation_expression -> right_hand_side_expression LT right_hand_side_expression .)
    ONES            reduce using rule 61 (relation_expression -> right_hand_side_expression LT right_hand_side_expression .)
    ZEROS           reduce using rule 61 (relation_expression -> right_hand_side_expression LT right_hand_side_expression .)
    $end            reduce using rule 61 (relation_expression -> right_hand_side_expression LT right_hand_side_expression .)
    ;               reduce using rule 61 (relation_expression -> right_hand_side_expression LT right_hand_side_expression .)
    }               reduce using rule 61 (relation_expression -> right_hand_side_expression LT right_hand_side_expression .)
    )               reduce using rule 61 (relation_expression -> right_hand_side_expression LT right_hand_side_expression .)
    ELSE            reduce using rule 61 (relation_expression -> right_hand_side_expression LT right_hand_side_expression .)
    DOTDIVIDE       shift and go to state 39
    DOTTIMES        shift and go to state 40
    DOTMINUS        shift and go to state 41
    DOTPLUS         shift and go to state 42
    /               shift and go to state 43
    *               shift and go to state 44
    -               shift and go to state 45
    +               shift and go to state 46
    '               shift and go to state 47


state 97

    (11) instruction -> { instructions } .
    RETURN          reduce using rule 11 (instruction -> { instructions } .)
    CONTINUE        reduce using rule 11 (instruction -> { instructions } .)
    BREAK           reduce using rule 11 (instruction -> { instructions } .)
    {               reduce using rule 11 (instruction -> { instructions } .)
    PRINT           reduce using rule 11 (instruction -> { instructions } .)
    (               reduce using rule 11 (instruction -> { instructions } .)
    FOR             reduce using rule 11 (instruction -> { instructions } .)
    WHILE           reduce using rule 11 (instruction -> { instructions } .)
    IF              reduce using rule 11 (instruction -> { instructions } .)
    ID              reduce using rule 11 (instruction -> { instructions } .)
    [               reduce using rule 11 (instruction -> { instructions } .)
    STRING          reduce using rule 11 (instruction -> { instructions } .)
    FLOATNUM        reduce using rule 11 (instruction -> { instructions } .)
    INTNUM          reduce using rule 11 (instruction -> { instructions } .)
    EYE             reduce using rule 11 (instruction -> { instructions } .)
    ONES            reduce using rule 11 (instruction -> { instructions } .)
    ZEROS           reduce using rule 11 (instruction -> { instructions } .)
    -               reduce using rule 11 (instruction -> { instructions } .)
    $end            reduce using rule 11 (instruction -> { instructions } .)
    }               reduce using rule 11 (instruction -> { instructions } .)
    ELSE            reduce using rule 11 (instruction -> { instructions } .)


state 98

    (18) print_instruction -> PRINT printables ; .
    RETURN          reduce using rule 18 (print_instruction -> PRINT printables ; .)
    CONTINUE        reduce using rule 18 (print_instruction -> PRINT printables ; .)
    BREAK           reduce using rule 18 (print_instruction -> PRINT printables ; .)
    {               reduce using rule 18 (print_instruction -> PRINT printables ; .)
    PRINT           reduce using rule 18 (print_instruction -> PRINT printables ; .)
    (               reduce using rule 18 (print_instruction -> PRINT printables ; .)
    FOR             reduce using rule 18 (print_instruction -> PRINT printables ; .)
    WHILE           reduce using rule 18 (print_instruction -> PRINT printables ; .)
    IF              reduce using rule 18 (print_instruction -> PRINT printables ; .)
    ID              reduce using rule 18 (print_instruction -> PRINT printables ; .)
    [               reduce using rule 18 (print_instruction -> PRINT printables ; .)
    STRING          reduce using rule 18 (print_instruction -> PRINT printables ; .)
    FLOATNUM        reduce using rule 18 (print_instruction -> PRINT printables ; .)
    INTNUM          reduce using rule 18 (print_instruction -> PRINT printables ; .)
    EYE             reduce using rule 18 (print_instruction -> PRINT printables ; .)
    ONES            reduce using rule 18 (print_instruction -> PRINT printables ; .)
    ZEROS           reduce using rule 18 (print_instruction -> PRINT printables ; .)
    -               reduce using rule 18 (print_instruction -> PRINT printables ; .)
    $end            reduce using rule 18 (print_instruction -> PRINT printables ; .)
    }               reduce using rule 18 (print_instruction -> PRINT printables ; .)
    ELSE            reduce using rule 18 (print_instruction -> PRINT printables ; .)


state 99

    (20) printables -> printables , . value
    (21) value -> . STRING
    (22) value -> . ID
    (23) value -> . FLOATNUM
    (24) value -> . INTNUM
    STRING          shift and go to state 28
    ID              shift and go to state 59
    FLOATNUM        shift and go to state 29
    INTNUM          shift and go to state 30

    value                          shift and go to state 122

state 100

    (44) full_line_expression -> ( full_line_expression ) .
    RETURN          reduce using rule 44 (full_line_expression -> ( full_line_expression ) .)
    CONTINUE        reduce using rule 44 (full_line_expression -> ( full_line_expression ) .)
    BREAK           reduce using rule 44 (full_line_expression -> ( full_line_expression ) .)
    {               reduce using rule 44 (full_line_expression -> ( full_line_expression ) .)
    PRINT           reduce using rule 44 (full_line_expression -> ( full_line_expression ) .)
    (               reduce using rule 44 (full_line_expression -> ( full_line_expression ) .)
    FOR             reduce using rule 44 (full_line_expression -> ( full_line_expression ) .)
    WHILE           reduce using rule 44 (full_line_expression -> ( full_line_expression ) .)
    IF              reduce using rule 44 (full_line_expression -> ( full_line_expression ) .)
    ID              reduce using rule 44 (full_line_expression -> ( full_line_expression ) .)
    [               reduce using rule 44 (full_line_expression -> ( full_line_expression ) .)
    STRING          reduce using rule 44 (full_line_expression -> ( full_line_expression ) .)
    FLOATNUM        reduce using rule 44 (full_line_expression -> ( full_line_expression ) .)
    INTNUM          reduce using rule 44 (full_line_expression -> ( full_line_expression ) .)
    EYE             reduce using rule 44 (full_line_expression -> ( full_line_expression ) .)
    ONES            reduce using rule 44 (full_line_expression -> ( full_line_expression ) .)
    ZEROS           reduce using rule 44 (full_line_expression -> ( full_line_expression ) .)
    -               reduce using rule 44 (full_line_expression -> ( full_line_expression ) .)
    $end            reduce using rule 44 (full_line_expression -> ( full_line_expression ) .)
    }               reduce using rule 44 (full_line_expression -> ( full_line_expression ) .)
    )               reduce using rule 44 (full_line_expression -> ( full_line_expression ) .)
    ELSE            reduce using rule 44 (full_line_expression -> ( full_line_expression ) .)


state 101

    (40) right_hand_side_expression -> ( right_hand_side_expression ) .
    DOTDIVIDE       reduce using rule 40 (right_hand_side_expression -> ( right_hand_side_expression ) .)
    DOTTIMES        reduce using rule 40 (right_hand_side_expression -> ( right_hand_side_expression ) .)
    DOTMINUS        reduce using rule 40 (right_hand_side_expression -> ( right_hand_side_expression ) .)
    DOTPLUS         reduce using rule 40 (right_hand_side_expression -> ( right_hand_side_expression ) .)
    /               reduce using rule 40 (right_hand_side_expression -> ( right_hand_side_expression ) .)
    *               reduce using rule 40 (right_hand_side_expression -> ( right_hand_side_expression ) .)
    -               reduce using rule 40 (right_hand_side_expression -> ( right_hand_side_expression ) .)
    +               reduce using rule 40 (right_hand_side_expression -> ( right_hand_side_expression ) .)
    '               reduce using rule 40 (right_hand_side_expression -> ( right_hand_side_expression ) .)
    NE              reduce using rule 40 (right_hand_side_expression -> ( right_hand_side_expression ) .)
    EQ              reduce using rule 40 (right_hand_side_expression -> ( right_hand_side_expression ) .)
    GE              reduce using rule 40 (right_hand_side_expression -> ( right_hand_side_expression ) .)
    LE              reduce using rule 40 (right_hand_side_expression -> ( right_hand_side_expression ) .)
    GT              reduce using rule 40 (right_hand_side_expression -> ( right_hand_side_expression ) .)
    LT              reduce using rule 40 (right_hand_side_expression -> ( right_hand_side_expression ) .)
    RETURN          reduce using rule 40 (right_hand_side_expression -> ( right_hand_side_expression ) .)
    CONTINUE        reduce using rule 40 (right_hand_side_expression -> ( right_hand_side_expression ) .)
    BREAK           reduce using rule 40 (right_hand_side_expression -> ( right_hand_side_expression ) .)
    {               reduce using rule 40 (right_hand_side_expression -> ( right_hand_side_expression ) .)
    PRINT           reduce using rule 40 (right_hand_side_expression -> ( right_hand_side_expression ) .)
    (               reduce using rule 40 (right_hand_side_expression -> ( right_hand_side_expression ) .)
    FOR             reduce using rule 40 (right_hand_side_expression -> ( right_hand_side_expression ) .)
    WHILE           reduce using rule 40 (right_hand_side_expression -> ( right_hand_side_expression ) .)
    IF              reduce using rule 40 (right_hand_side_expression -> ( right_hand_side_expression ) .)
    ID              reduce using rule 40 (right_hand_side_expression -> ( right_hand_side_expression ) .)
    [               reduce using rule 40 (right_hand_side_expression -> ( right_hand_side_expression ) .)
    STRING          reduce using rule 40 (right_hand_side_expression -> ( right_hand_side_expression ) .)
    FLOATNUM        reduce using rule 40 (right_hand_side_expression -> ( right_hand_side_expression ) .)
    INTNUM          reduce using rule 40 (right_hand_side_expression -> ( right_hand_side_expression ) .)
    EYE             reduce using rule 40 (right_hand_side_expression -> ( right_hand_side_expression ) .)
    ONES            reduce using rule 40 (right_hand_side_expression -> ( right_hand_side_expression ) .)
    ZEROS           reduce using rule 40 (right_hand_side_expression -> ( right_hand_side_expression ) .)
    $end            reduce using rule 40 (right_hand_side_expression -> ( right_hand_side_expression ) .)
    ;               reduce using rule 40 (right_hand_side_expression -> ( right_hand_side_expression ) .)
    }               reduce using rule 40 (right_hand_side_expression -> ( right_hand_side_expression ) .)
    )               reduce using rule 40 (right_hand_side_expression -> ( right_hand_side_expression ) .)
    ELSE            reduce using rule 40 (right_hand_side_expression -> ( right_hand_side_expression ) .)


state 102

    (48) assign_expression -> left_hand_side_expression DIVIDEASSIGN right_hand_side_expression . ;
    (29) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (36) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    (37) right_hand_side_expression -> right_hand_side_expression . '
    (56) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (57) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (58) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (59) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (61) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
    ;               shift and go to state 123
    DOTDIVIDE       shift and go to state 39
    DOTTIMES        shift and go to state 40
    DOTMINUS        shift and go to state 41
    DOTPLUS         shift and go to state 42
    /               shift and go to state 43
    *               shift and go to state 44
    -               shift and go to state 45
    +               shift and go to state 46
    '               shift and go to state 47
    NE              shift and go to state 48
    EQ              shift and go to state 49
    GE              shift and go to state 50
    LE              shift and go to state 51
    GT              shift and go to state 52
    LT              shift and go to state 53


state 103

    (49) assign_expression -> left_hand_side_expression TIMESASSIGN right_hand_side_expression . ;
    (29) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (36) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    (37) right_hand_side_expression -> right_hand_side_expression . '
    (56) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (57) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (58) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (59) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (61) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
    ;               shift and go to state 124
    DOTDIVIDE       shift and go to state 39
    DOTTIMES        shift and go to state 40
    DOTMINUS        shift and go to state 41
    DOTPLUS         shift and go to state 42
    /               shift and go to state 43
    *               shift and go to state 44
    -               shift and go to state 45
    +               shift and go to state 46
    '               shift and go to state 47
    NE              shift and go to state 48
    EQ              shift and go to state 49
    GE              shift and go to state 50
    LE              shift and go to state 51
    GT              shift and go to state 52
    LT              shift and go to state 53


state 104

    (50) assign_expression -> left_hand_side_expression MINUSASSIGN right_hand_side_expression . ;
    (29) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (36) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    (37) right_hand_side_expression -> right_hand_side_expression . '
    (56) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (57) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (58) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (59) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (61) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
    ;               shift and go to state 125
    DOTDIVIDE       shift and go to state 39
    DOTTIMES        shift and go to state 40
    DOTMINUS        shift and go to state 41
    DOTPLUS         shift and go to state 42
    /               shift and go to state 43
    *               shift and go to state 44
    -               shift and go to state 45
    +               shift and go to state 46
    '               shift and go to state 47
    NE              shift and go to state 48
    EQ              shift and go to state 49
    GE              shift and go to state 50
    LE              shift and go to state 51
    GT              shift and go to state 52
    LT              shift and go to state 53


state 105

    (51) assign_expression -> left_hand_side_expression PLUSASSIGN right_hand_side_expression . ;
    (29) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (36) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    (37) right_hand_side_expression -> right_hand_side_expression . '
    (56) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (57) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (58) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (59) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (61) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
    ;               shift and go to state 126
    DOTDIVIDE       shift and go to state 39
    DOTTIMES        shift and go to state 40
    DOTMINUS        shift and go to state 41
    DOTPLUS         shift and go to state 42
    /               shift and go to state 43
    *               shift and go to state 44
    -               shift and go to state 45
    +               shift and go to state 46
    '               shift and go to state 47
    NE              shift and go to state 48
    EQ              shift and go to state 49
    GE              shift and go to state 50
    LE              shift and go to state 51
    GT              shift and go to state 52
    LT              shift and go to state 53


state 106

    (52) assign_expression -> left_hand_side_expression = right_hand_side_expression . ;
    (29) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (36) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    (37) right_hand_side_expression -> right_hand_side_expression . '
    (56) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (57) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (58) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (59) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (61) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
    ;               shift and go to state 127
    DOTDIVIDE       shift and go to state 39
    DOTTIMES        shift and go to state 40
    DOTMINUS        shift and go to state 41
    DOTPLUS         shift and go to state 42
    /               shift and go to state 43
    *               shift and go to state 44
    -               shift and go to state 45
    +               shift and go to state 46
    '               shift and go to state 47
    NE              shift and go to state 48
    EQ              shift and go to state 49
    GE              shift and go to state 50
    LE              shift and go to state 51
    GT              shift and go to state 52
    LT              shift and go to state 53


state 107

    (15) for_instruction -> FOR ID = . id_int : id_int instruction
    (16) id_int -> . INTNUM
    (17) id_int -> . ID
    INTNUM          shift and go to state 130
    ID              shift and go to state 128

    id_int                         shift and go to state 129

state 108

    (53) matrix_ref -> ID [ list_of_ints . ]
    (71) list_of_ints -> list_of_ints . , INTNUM
    ]               shift and go to state 131
    ,               shift and go to state 132


state 109

    (72) list_of_ints -> INTNUM .
    ]               reduce using rule 72 (list_of_ints -> INTNUM .)
    ,               reduce using rule 72 (list_of_ints -> INTNUM .)


state 110

    (14) while_instruction -> WHILE ( relation_expression . ) instruction
    (41) right_hand_side_expression -> relation_expression .
    )               shift and go to state 133
    NE              reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    EQ              reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    GE              reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    LE              reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    GT              reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    LT              reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    DOTDIVIDE       reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    DOTTIMES        reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    DOTMINUS        reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    DOTPLUS         reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    /               reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    *               reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    -               reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    +               reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    '               reduce using rule 41 (right_hand_side_expression -> relation_expression .)


state 111

    (56) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (57) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (58) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (59) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (61) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
    (29) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (36) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    (37) right_hand_side_expression -> right_hand_side_expression . '
    NE              shift and go to state 48
    EQ              shift and go to state 49
    GE              shift and go to state 50
    LE              shift and go to state 51
    GT              shift and go to state 52
    LT              shift and go to state 53
    DOTDIVIDE       shift and go to state 39
    DOTTIMES        shift and go to state 40
    DOTMINUS        shift and go to state 41
    DOTPLUS         shift and go to state 42
    /               shift and go to state 43
    *               shift and go to state 44
    -               shift and go to state 45
    +               shift and go to state 46
    '               shift and go to state 47


state 112

    (12) if_instruction -> IF ( relation_expression . ) instruction
    (13) if_instruction -> IF ( relation_expression . ) instruction ELSE instruction
    (41) right_hand_side_expression -> relation_expression .
    )               shift and go to state 134
    NE              reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    EQ              reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    GE              reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    LE              reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    GT              reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    LT              reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    DOTDIVIDE       reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    DOTTIMES        reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    DOTMINUS        reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    DOTPLUS         reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    /               reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    *               reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    -               reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    +               reduce using rule 41 (right_hand_side_expression -> relation_expression .)
    '               reduce using rule 41 (right_hand_side_expression -> relation_expression .)


state 113

    (66) vectors -> [ ] .
    ]               reduce using rule 66 (vectors -> [ ] .)
    ,               reduce using rule 66 (vectors -> [ ] .)


state 114

    (68) vectors -> [ list_of_elems . ]
    (69) list_of_elems -> list_of_elems . , value
    ]               shift and go to state 135
    ,               shift and go to state 116


state 115

    (27) right_hand_side_expression -> [ list_of_elems ] .
    DOTDIVIDE       reduce using rule 27 (right_hand_side_expression -> [ list_of_elems ] .)
    DOTTIMES        reduce using rule 27 (right_hand_side_expression -> [ list_of_elems ] .)
    DOTMINUS        reduce using rule 27 (right_hand_side_expression -> [ list_of_elems ] .)
    DOTPLUS         reduce using rule 27 (right_hand_side_expression -> [ list_of_elems ] .)
    /               reduce using rule 27 (right_hand_side_expression -> [ list_of_elems ] .)
    *               reduce using rule 27 (right_hand_side_expression -> [ list_of_elems ] .)
    -               reduce using rule 27 (right_hand_side_expression -> [ list_of_elems ] .)
    +               reduce using rule 27 (right_hand_side_expression -> [ list_of_elems ] .)
    '               reduce using rule 27 (right_hand_side_expression -> [ list_of_elems ] .)
    NE              reduce using rule 27 (right_hand_side_expression -> [ list_of_elems ] .)
    EQ              reduce using rule 27 (right_hand_side_expression -> [ list_of_elems ] .)
    GE              reduce using rule 27 (right_hand_side_expression -> [ list_of_elems ] .)
    LE              reduce using rule 27 (right_hand_side_expression -> [ list_of_elems ] .)
    GT              reduce using rule 27 (right_hand_side_expression -> [ list_of_elems ] .)
    LT              reduce using rule 27 (right_hand_side_expression -> [ list_of_elems ] .)
    RETURN          reduce using rule 27 (right_hand_side_expression -> [ list_of_elems ] .)
    CONTINUE        reduce using rule 27 (right_hand_side_expression -> [ list_of_elems ] .)
    BREAK           reduce using rule 27 (right_hand_side_expression -> [ list_of_elems ] .)
    {               reduce using rule 27 (right_hand_side_expression -> [ list_of_elems ] .)
    PRINT           reduce using rule 27 (right_hand_side_expression -> [ list_of_elems ] .)
    (               reduce using rule 27 (right_hand_side_expression -> [ list_of_elems ] .)
    FOR             reduce using rule 27 (right_hand_side_expression -> [ list_of_elems ] .)
    WHILE           reduce using rule 27 (right_hand_side_expression -> [ list_of_elems ] .)
    IF              reduce using rule 27 (right_hand_side_expression -> [ list_of_elems ] .)
    ID              reduce using rule 27 (right_hand_side_expression -> [ list_of_elems ] .)
    [               reduce using rule 27 (right_hand_side_expression -> [ list_of_elems ] .)
    STRING          reduce using rule 27 (right_hand_side_expression -> [ list_of_elems ] .)
    FLOATNUM        reduce using rule 27 (right_hand_side_expression -> [ list_of_elems ] .)
    INTNUM          reduce using rule 27 (right_hand_side_expression -> [ list_of_elems ] .)
    EYE             reduce using rule 27 (right_hand_side_expression -> [ list_of_elems ] .)
    ONES            reduce using rule 27 (right_hand_side_expression -> [ list_of_elems ] .)
    ZEROS           reduce using rule 27 (right_hand_side_expression -> [ list_of_elems ] .)
    $end            reduce using rule 27 (right_hand_side_expression -> [ list_of_elems ] .)
    ;               reduce using rule 27 (right_hand_side_expression -> [ list_of_elems ] .)
    }               reduce using rule 27 (right_hand_side_expression -> [ list_of_elems ] .)
    )               reduce using rule 27 (right_hand_side_expression -> [ list_of_elems ] .)
    ELSE            reduce using rule 27 (right_hand_side_expression -> [ list_of_elems ] .)


state 116

    (69) list_of_elems -> list_of_elems , . value
    (21) value -> . STRING
    (22) value -> . ID
    (23) value -> . FLOATNUM
    (24) value -> . INTNUM
    STRING          shift and go to state 28
    ID              shift and go to state 59
    FLOATNUM        shift and go to state 29
    INTNUM          shift and go to state 30

    value                          shift and go to state 136

state 117

    (28) right_hand_side_expression -> [ vectors ] .
    DOTDIVIDE       reduce using rule 28 (right_hand_side_expression -> [ vectors ] .)
    DOTTIMES        reduce using rule 28 (right_hand_side_expression -> [ vectors ] .)
    DOTMINUS        reduce using rule 28 (right_hand_side_expression -> [ vectors ] .)
    DOTPLUS         reduce using rule 28 (right_hand_side_expression -> [ vectors ] .)
    /               reduce using rule 28 (right_hand_side_expression -> [ vectors ] .)
    *               reduce using rule 28 (right_hand_side_expression -> [ vectors ] .)
    -               reduce using rule 28 (right_hand_side_expression -> [ vectors ] .)
    +               reduce using rule 28 (right_hand_side_expression -> [ vectors ] .)
    '               reduce using rule 28 (right_hand_side_expression -> [ vectors ] .)
    NE              reduce using rule 28 (right_hand_side_expression -> [ vectors ] .)
    EQ              reduce using rule 28 (right_hand_side_expression -> [ vectors ] .)
    GE              reduce using rule 28 (right_hand_side_expression -> [ vectors ] .)
    LE              reduce using rule 28 (right_hand_side_expression -> [ vectors ] .)
    GT              reduce using rule 28 (right_hand_side_expression -> [ vectors ] .)
    LT              reduce using rule 28 (right_hand_side_expression -> [ vectors ] .)
    RETURN          reduce using rule 28 (right_hand_side_expression -> [ vectors ] .)
    CONTINUE        reduce using rule 28 (right_hand_side_expression -> [ vectors ] .)
    BREAK           reduce using rule 28 (right_hand_side_expression -> [ vectors ] .)
    {               reduce using rule 28 (right_hand_side_expression -> [ vectors ] .)
    PRINT           reduce using rule 28 (right_hand_side_expression -> [ vectors ] .)
    (               reduce using rule 28 (right_hand_side_expression -> [ vectors ] .)
    FOR             reduce using rule 28 (right_hand_side_expression -> [ vectors ] .)
    WHILE           reduce using rule 28 (right_hand_side_expression -> [ vectors ] .)
    IF              reduce using rule 28 (right_hand_side_expression -> [ vectors ] .)
    ID              reduce using rule 28 (right_hand_side_expression -> [ vectors ] .)
    [               reduce using rule 28 (right_hand_side_expression -> [ vectors ] .)
    STRING          reduce using rule 28 (right_hand_side_expression -> [ vectors ] .)
    FLOATNUM        reduce using rule 28 (right_hand_side_expression -> [ vectors ] .)
    INTNUM          reduce using rule 28 (right_hand_side_expression -> [ vectors ] .)
    EYE             reduce using rule 28 (right_hand_side_expression -> [ vectors ] .)
    ONES            reduce using rule 28 (right_hand_side_expression -> [ vectors ] .)
    ZEROS           reduce using rule 28 (right_hand_side_expression -> [ vectors ] .)
    $end            reduce using rule 28 (right_hand_side_expression -> [ vectors ] .)
    ;               reduce using rule 28 (right_hand_side_expression -> [ vectors ] .)
    }               reduce using rule 28 (right_hand_side_expression -> [ vectors ] .)
    )               reduce using rule 28 (right_hand_side_expression -> [ vectors ] .)
    ELSE            reduce using rule 28 (right_hand_side_expression -> [ vectors ] .)


state 118

    (65) vectors -> vectors , . [ ]
    (67) vectors -> vectors , . [ list_of_elems ]
    [               shift and go to state 137


state 119

    (62) matrix_functions -> EYE ( INTNUM . )
    )               shift and go to state 138


state 120

    (63) matrix_functions -> ONES ( INTNUM . )
    )               shift and go to state 139


state 121

    (64) matrix_functions -> ZEROS ( INTNUM . )
    )               shift and go to state 140


state 122

    (20) printables -> printables , value .
    ;               reduce using rule 20 (printables -> printables , value .)
    ,               reduce using rule 20 (printables -> printables , value .)


state 123

    (48) assign_expression -> left_hand_side_expression DIVIDEASSIGN right_hand_side_expression ; .
    RETURN          reduce using rule 48 (assign_expression -> left_hand_side_expression DIVIDEASSIGN right_hand_side_expression ; .)
    CONTINUE        reduce using rule 48 (assign_expression -> left_hand_side_expression DIVIDEASSIGN right_hand_side_expression ; .)
    BREAK           reduce using rule 48 (assign_expression -> left_hand_side_expression DIVIDEASSIGN right_hand_side_expression ; .)
    {               reduce using rule 48 (assign_expression -> left_hand_side_expression DIVIDEASSIGN right_hand_side_expression ; .)
    PRINT           reduce using rule 48 (assign_expression -> left_hand_side_expression DIVIDEASSIGN right_hand_side_expression ; .)
    (               reduce using rule 48 (assign_expression -> left_hand_side_expression DIVIDEASSIGN right_hand_side_expression ; .)
    FOR             reduce using rule 48 (assign_expression -> left_hand_side_expression DIVIDEASSIGN right_hand_side_expression ; .)
    WHILE           reduce using rule 48 (assign_expression -> left_hand_side_expression DIVIDEASSIGN right_hand_side_expression ; .)
    IF              reduce using rule 48 (assign_expression -> left_hand_side_expression DIVIDEASSIGN right_hand_side_expression ; .)
    ID              reduce using rule 48 (assign_expression -> left_hand_side_expression DIVIDEASSIGN right_hand_side_expression ; .)
    [               reduce using rule 48 (assign_expression -> left_hand_side_expression DIVIDEASSIGN right_hand_side_expression ; .)
    STRING          reduce using rule 48 (assign_expression -> left_hand_side_expression DIVIDEASSIGN right_hand_side_expression ; .)
    FLOATNUM        reduce using rule 48 (assign_expression -> left_hand_side_expression DIVIDEASSIGN right_hand_side_expression ; .)
    INTNUM          reduce using rule 48 (assign_expression -> left_hand_side_expression DIVIDEASSIGN right_hand_side_expression ; .)
    EYE             reduce using rule 48 (assign_expression -> left_hand_side_expression DIVIDEASSIGN right_hand_side_expression ; .)
    ONES            reduce using rule 48 (assign_expression -> left_hand_side_expression DIVIDEASSIGN right_hand_side_expression ; .)
    ZEROS           reduce using rule 48 (assign_expression -> left_hand_side_expression DIVIDEASSIGN right_hand_side_expression ; .)
    -               reduce using rule 48 (assign_expression -> left_hand_side_expression DIVIDEASSIGN right_hand_side_expression ; .)
    $end            reduce using rule 48 (assign_expression -> left_hand_side_expression DIVIDEASSIGN right_hand_side_expression ; .)
    }               reduce using rule 48 (assign_expression -> left_hand_side_expression DIVIDEASSIGN right_hand_side_expression ; .)
    )               reduce using rule 48 (assign_expression -> left_hand_side_expression DIVIDEASSIGN right_hand_side_expression ; .)
    ELSE            reduce using rule 48 (assign_expression -> left_hand_side_expression DIVIDEASSIGN right_hand_side_expression ; .)


state 124

    (49) assign_expression -> left_hand_side_expression TIMESASSIGN right_hand_side_expression ; .
    RETURN          reduce using rule 49 (assign_expression -> left_hand_side_expression TIMESASSIGN right_hand_side_expression ; .)
    CONTINUE        reduce using rule 49 (assign_expression -> left_hand_side_expression TIMESASSIGN right_hand_side_expression ; .)
    BREAK           reduce using rule 49 (assign_expression -> left_hand_side_expression TIMESASSIGN right_hand_side_expression ; .)
    {               reduce using rule 49 (assign_expression -> left_hand_side_expression TIMESASSIGN right_hand_side_expression ; .)
    PRINT           reduce using rule 49 (assign_expression -> left_hand_side_expression TIMESASSIGN right_hand_side_expression ; .)
    (               reduce using rule 49 (assign_expression -> left_hand_side_expression TIMESASSIGN right_hand_side_expression ; .)
    FOR             reduce using rule 49 (assign_expression -> left_hand_side_expression TIMESASSIGN right_hand_side_expression ; .)
    WHILE           reduce using rule 49 (assign_expression -> left_hand_side_expression TIMESASSIGN right_hand_side_expression ; .)
    IF              reduce using rule 49 (assign_expression -> left_hand_side_expression TIMESASSIGN right_hand_side_expression ; .)
    ID              reduce using rule 49 (assign_expression -> left_hand_side_expression TIMESASSIGN right_hand_side_expression ; .)
    [               reduce using rule 49 (assign_expression -> left_hand_side_expression TIMESASSIGN right_hand_side_expression ; .)
    STRING          reduce using rule 49 (assign_expression -> left_hand_side_expression TIMESASSIGN right_hand_side_expression ; .)
    FLOATNUM        reduce using rule 49 (assign_expression -> left_hand_side_expression TIMESASSIGN right_hand_side_expression ; .)
    INTNUM          reduce using rule 49 (assign_expression -> left_hand_side_expression TIMESASSIGN right_hand_side_expression ; .)
    EYE             reduce using rule 49 (assign_expression -> left_hand_side_expression TIMESASSIGN right_hand_side_expression ; .)
    ONES            reduce using rule 49 (assign_expression -> left_hand_side_expression TIMESASSIGN right_hand_side_expression ; .)
    ZEROS           reduce using rule 49 (assign_expression -> left_hand_side_expression TIMESASSIGN right_hand_side_expression ; .)
    -               reduce using rule 49 (assign_expression -> left_hand_side_expression TIMESASSIGN right_hand_side_expression ; .)
    $end            reduce using rule 49 (assign_expression -> left_hand_side_expression TIMESASSIGN right_hand_side_expression ; .)
    }               reduce using rule 49 (assign_expression -> left_hand_side_expression TIMESASSIGN right_hand_side_expression ; .)
    )               reduce using rule 49 (assign_expression -> left_hand_side_expression TIMESASSIGN right_hand_side_expression ; .)
    ELSE            reduce using rule 49 (assign_expression -> left_hand_side_expression TIMESASSIGN right_hand_side_expression ; .)


state 125

    (50) assign_expression -> left_hand_side_expression MINUSASSIGN right_hand_side_expression ; .
    RETURN          reduce using rule 50 (assign_expression -> left_hand_side_expression MINUSASSIGN right_hand_side_expression ; .)
    CONTINUE        reduce using rule 50 (assign_expression -> left_hand_side_expression MINUSASSIGN right_hand_side_expression ; .)
    BREAK           reduce using rule 50 (assign_expression -> left_hand_side_expression MINUSASSIGN right_hand_side_expression ; .)
    {               reduce using rule 50 (assign_expression -> left_hand_side_expression MINUSASSIGN right_hand_side_expression ; .)
    PRINT           reduce using rule 50 (assign_expression -> left_hand_side_expression MINUSASSIGN right_hand_side_expression ; .)
    (               reduce using rule 50 (assign_expression -> left_hand_side_expression MINUSASSIGN right_hand_side_expression ; .)
    FOR             reduce using rule 50 (assign_expression -> left_hand_side_expression MINUSASSIGN right_hand_side_expression ; .)
    WHILE           reduce using rule 50 (assign_expression -> left_hand_side_expression MINUSASSIGN right_hand_side_expression ; .)
    IF              reduce using rule 50 (assign_expression -> left_hand_side_expression MINUSASSIGN right_hand_side_expression ; .)
    ID              reduce using rule 50 (assign_expression -> left_hand_side_expression MINUSASSIGN right_hand_side_expression ; .)
    [               reduce using rule 50 (assign_expression -> left_hand_side_expression MINUSASSIGN right_hand_side_expression ; .)
    STRING          reduce using rule 50 (assign_expression -> left_hand_side_expression MINUSASSIGN right_hand_side_expression ; .)
    FLOATNUM        reduce using rule 50 (assign_expression -> left_hand_side_expression MINUSASSIGN right_hand_side_expression ; .)
    INTNUM          reduce using rule 50 (assign_expression -> left_hand_side_expression MINUSASSIGN right_hand_side_expression ; .)
    EYE             reduce using rule 50 (assign_expression -> left_hand_side_expression MINUSASSIGN right_hand_side_expression ; .)
    ONES            reduce using rule 50 (assign_expression -> left_hand_side_expression MINUSASSIGN right_hand_side_expression ; .)
    ZEROS           reduce using rule 50 (assign_expression -> left_hand_side_expression MINUSASSIGN right_hand_side_expression ; .)
    -               reduce using rule 50 (assign_expression -> left_hand_side_expression MINUSASSIGN right_hand_side_expression ; .)
    $end            reduce using rule 50 (assign_expression -> left_hand_side_expression MINUSASSIGN right_hand_side_expression ; .)
    }               reduce using rule 50 (assign_expression -> left_hand_side_expression MINUSASSIGN right_hand_side_expression ; .)
    )               reduce using rule 50 (assign_expression -> left_hand_side_expression MINUSASSIGN right_hand_side_expression ; .)
    ELSE            reduce using rule 50 (assign_expression -> left_hand_side_expression MINUSASSIGN right_hand_side_expression ; .)


state 126

    (51) assign_expression -> left_hand_side_expression PLUSASSIGN right_hand_side_expression ; .
    RETURN          reduce using rule 51 (assign_expression -> left_hand_side_expression PLUSASSIGN right_hand_side_expression ; .)
    CONTINUE        reduce using rule 51 (assign_expression -> left_hand_side_expression PLUSASSIGN right_hand_side_expression ; .)
    BREAK           reduce using rule 51 (assign_expression -> left_hand_side_expression PLUSASSIGN right_hand_side_expression ; .)
    {               reduce using rule 51 (assign_expression -> left_hand_side_expression PLUSASSIGN right_hand_side_expression ; .)
    PRINT           reduce using rule 51 (assign_expression -> left_hand_side_expression PLUSASSIGN right_hand_side_expression ; .)
    (               reduce using rule 51 (assign_expression -> left_hand_side_expression PLUSASSIGN right_hand_side_expression ; .)
    FOR             reduce using rule 51 (assign_expression -> left_hand_side_expression PLUSASSIGN right_hand_side_expression ; .)
    WHILE           reduce using rule 51 (assign_expression -> left_hand_side_expression PLUSASSIGN right_hand_side_expression ; .)
    IF              reduce using rule 51 (assign_expression -> left_hand_side_expression PLUSASSIGN right_hand_side_expression ; .)
    ID              reduce using rule 51 (assign_expression -> left_hand_side_expression PLUSASSIGN right_hand_side_expression ; .)
    [               reduce using rule 51 (assign_expression -> left_hand_side_expression PLUSASSIGN right_hand_side_expression ; .)
    STRING          reduce using rule 51 (assign_expression -> left_hand_side_expression PLUSASSIGN right_hand_side_expression ; .)
    FLOATNUM        reduce using rule 51 (assign_expression -> left_hand_side_expression PLUSASSIGN right_hand_side_expression ; .)
    INTNUM          reduce using rule 51 (assign_expression -> left_hand_side_expression PLUSASSIGN right_hand_side_expression ; .)
    EYE             reduce using rule 51 (assign_expression -> left_hand_side_expression PLUSASSIGN right_hand_side_expression ; .)
    ONES            reduce using rule 51 (assign_expression -> left_hand_side_expression PLUSASSIGN right_hand_side_expression ; .)
    ZEROS           reduce using rule 51 (assign_expression -> left_hand_side_expression PLUSASSIGN right_hand_side_expression ; .)
    -               reduce using rule 51 (assign_expression -> left_hand_side_expression PLUSASSIGN right_hand_side_expression ; .)
    $end            reduce using rule 51 (assign_expression -> left_hand_side_expression PLUSASSIGN right_hand_side_expression ; .)
    }               reduce using rule 51 (assign_expression -> left_hand_side_expression PLUSASSIGN right_hand_side_expression ; .)
    )               reduce using rule 51 (assign_expression -> left_hand_side_expression PLUSASSIGN right_hand_side_expression ; .)
    ELSE            reduce using rule 51 (assign_expression -> left_hand_side_expression PLUSASSIGN right_hand_side_expression ; .)


state 127

    (52) assign_expression -> left_hand_side_expression = right_hand_side_expression ; .
    RETURN          reduce using rule 52 (assign_expression -> left_hand_side_expression = right_hand_side_expression ; .)
    CONTINUE        reduce using rule 52 (assign_expression -> left_hand_side_expression = right_hand_side_expression ; .)
    BREAK           reduce using rule 52 (assign_expression -> left_hand_side_expression = right_hand_side_expression ; .)
    {               reduce using rule 52 (assign_expression -> left_hand_side_expression = right_hand_side_expression ; .)
    PRINT           reduce using rule 52 (assign_expression -> left_hand_side_expression = right_hand_side_expression ; .)
    (               reduce using rule 52 (assign_expression -> left_hand_side_expression = right_hand_side_expression ; .)
    FOR             reduce using rule 52 (assign_expression -> left_hand_side_expression = right_hand_side_expression ; .)
    WHILE           reduce using rule 52 (assign_expression -> left_hand_side_expression = right_hand_side_expression ; .)
    IF              reduce using rule 52 (assign_expression -> left_hand_side_expression = right_hand_side_expression ; .)
    ID              reduce using rule 52 (assign_expression -> left_hand_side_expression = right_hand_side_expression ; .)
    [               reduce using rule 52 (assign_expression -> left_hand_side_expression = right_hand_side_expression ; .)
    STRING          reduce using rule 52 (assign_expression -> left_hand_side_expression = right_hand_side_expression ; .)
    FLOATNUM        reduce using rule 52 (assign_expression -> left_hand_side_expression = right_hand_side_expression ; .)
    INTNUM          reduce using rule 52 (assign_expression -> left_hand_side_expression = right_hand_side_expression ; .)
    EYE             reduce using rule 52 (assign_expression -> left_hand_side_expression = right_hand_side_expression ; .)
    ONES            reduce using rule 52 (assign_expression -> left_hand_side_expression = right_hand_side_expression ; .)
    ZEROS           reduce using rule 52 (assign_expression -> left_hand_side_expression = right_hand_side_expression ; .)
    -               reduce using rule 52 (assign_expression -> left_hand_side_expression = right_hand_side_expression ; .)
    $end            reduce using rule 52 (assign_expression -> left_hand_side_expression = right_hand_side_expression ; .)
    }               reduce using rule 52 (assign_expression -> left_hand_side_expression = right_hand_side_expression ; .)
    )               reduce using rule 52 (assign_expression -> left_hand_side_expression = right_hand_side_expression ; .)
    ELSE            reduce using rule 52 (assign_expression -> left_hand_side_expression = right_hand_side_expression ; .)


state 128

    (17) id_int -> ID .
    :               reduce using rule 17 (id_int -> ID .)
    RETURN          reduce using rule 17 (id_int -> ID .)
    CONTINUE        reduce using rule 17 (id_int -> ID .)
    BREAK           reduce using rule 17 (id_int -> ID .)
    {               reduce using rule 17 (id_int -> ID .)
    PRINT           reduce using rule 17 (id_int -> ID .)
    (               reduce using rule 17 (id_int -> ID .)
    FOR             reduce using rule 17 (id_int -> ID .)
    WHILE           reduce using rule 17 (id_int -> ID .)
    IF              reduce using rule 17 (id_int -> ID .)
    ID              reduce using rule 17 (id_int -> ID .)
    [               reduce using rule 17 (id_int -> ID .)
    STRING          reduce using rule 17 (id_int -> ID .)
    FLOATNUM        reduce using rule 17 (id_int -> ID .)
    INTNUM          reduce using rule 17 (id_int -> ID .)
    EYE             reduce using rule 17 (id_int -> ID .)
    ONES            reduce using rule 17 (id_int -> ID .)
    ZEROS           reduce using rule 17 (id_int -> ID .)
    -               reduce using rule 17 (id_int -> ID .)


state 129

    (15) for_instruction -> FOR ID = id_int . : id_int instruction
    :               shift and go to state 141


state 130

    (16) id_int -> INTNUM .
    :               reduce using rule 16 (id_int -> INTNUM .)
    RETURN          reduce using rule 16 (id_int -> INTNUM .)
    CONTINUE        reduce using rule 16 (id_int -> INTNUM .)
    BREAK           reduce using rule 16 (id_int -> INTNUM .)
    {               reduce using rule 16 (id_int -> INTNUM .)
    PRINT           reduce using rule 16 (id_int -> INTNUM .)
    (               reduce using rule 16 (id_int -> INTNUM .)
    FOR             reduce using rule 16 (id_int -> INTNUM .)
    WHILE           reduce using rule 16 (id_int -> INTNUM .)
    IF              reduce using rule 16 (id_int -> INTNUM .)
    ID              reduce using rule 16 (id_int -> INTNUM .)
    [               reduce using rule 16 (id_int -> INTNUM .)
    STRING          reduce using rule 16 (id_int -> INTNUM .)
    FLOATNUM        reduce using rule 16 (id_int -> INTNUM .)
    INTNUM          reduce using rule 16 (id_int -> INTNUM .)
    EYE             reduce using rule 16 (id_int -> INTNUM .)
    ONES            reduce using rule 16 (id_int -> INTNUM .)
    ZEROS           reduce using rule 16 (id_int -> INTNUM .)
    -               reduce using rule 16 (id_int -> INTNUM .)


state 131

    (53) matrix_ref -> ID [ list_of_ints ] .
    DIVIDEASSIGN    reduce using rule 53 (matrix_ref -> ID [ list_of_ints ] .)
    TIMESASSIGN     reduce using rule 53 (matrix_ref -> ID [ list_of_ints ] .)
    MINUSASSIGN     reduce using rule 53 (matrix_ref -> ID [ list_of_ints ] .)
    PLUSASSIGN      reduce using rule 53 (matrix_ref -> ID [ list_of_ints ] .)
    =               reduce using rule 53 (matrix_ref -> ID [ list_of_ints ] .)
    RETURN          reduce using rule 53 (matrix_ref -> ID [ list_of_ints ] .)
    CONTINUE        reduce using rule 53 (matrix_ref -> ID [ list_of_ints ] .)
    BREAK           reduce using rule 53 (matrix_ref -> ID [ list_of_ints ] .)
    {               reduce using rule 53 (matrix_ref -> ID [ list_of_ints ] .)
    PRINT           reduce using rule 53 (matrix_ref -> ID [ list_of_ints ] .)
    (               reduce using rule 53 (matrix_ref -> ID [ list_of_ints ] .)
    FOR             reduce using rule 53 (matrix_ref -> ID [ list_of_ints ] .)
    WHILE           reduce using rule 53 (matrix_ref -> ID [ list_of_ints ] .)
    IF              reduce using rule 53 (matrix_ref -> ID [ list_of_ints ] .)
    ID              reduce using rule 53 (matrix_ref -> ID [ list_of_ints ] .)
    [               reduce using rule 53 (matrix_ref -> ID [ list_of_ints ] .)
    STRING          reduce using rule 53 (matrix_ref -> ID [ list_of_ints ] .)
    FLOATNUM        reduce using rule 53 (matrix_ref -> ID [ list_of_ints ] .)
    INTNUM          reduce using rule 53 (matrix_ref -> ID [ list_of_ints ] .)
    EYE             reduce using rule 53 (matrix_ref -> ID [ list_of_ints ] .)
    ONES            reduce using rule 53 (matrix_ref -> ID [ list_of_ints ] .)
    ZEROS           reduce using rule 53 (matrix_ref -> ID [ list_of_ints ] .)
    -               reduce using rule 53 (matrix_ref -> ID [ list_of_ints ] .)
    $end            reduce using rule 53 (matrix_ref -> ID [ list_of_ints ] .)
    DOTDIVIDE       reduce using rule 53 (matrix_ref -> ID [ list_of_ints ] .)
    DOTTIMES        reduce using rule 53 (matrix_ref -> ID [ list_of_ints ] .)
    DOTMINUS        reduce using rule 53 (matrix_ref -> ID [ list_of_ints ] .)
    DOTPLUS         reduce using rule 53 (matrix_ref -> ID [ list_of_ints ] .)
    /               reduce using rule 53 (matrix_ref -> ID [ list_of_ints ] .)
    *               reduce using rule 53 (matrix_ref -> ID [ list_of_ints ] .)
    +               reduce using rule 53 (matrix_ref -> ID [ list_of_ints ] .)
    '               reduce using rule 53 (matrix_ref -> ID [ list_of_ints ] .)
    NE              reduce using rule 53 (matrix_ref -> ID [ list_of_ints ] .)
    EQ              reduce using rule 53 (matrix_ref -> ID [ list_of_ints ] .)
    GE              reduce using rule 53 (matrix_ref -> ID [ list_of_ints ] .)
    LE              reduce using rule 53 (matrix_ref -> ID [ list_of_ints ] .)
    GT              reduce using rule 53 (matrix_ref -> ID [ list_of_ints ] .)
    LT              reduce using rule 53 (matrix_ref -> ID [ list_of_ints ] .)
    ;               reduce using rule 53 (matrix_ref -> ID [ list_of_ints ] .)
    }               reduce using rule 53 (matrix_ref -> ID [ list_of_ints ] .)
    )               reduce using rule 53 (matrix_ref -> ID [ list_of_ints ] .)
    ELSE            reduce using rule 53 (matrix_ref -> ID [ list_of_ints ] .)


state 132

    (71) list_of_ints -> list_of_ints , . INTNUM
    INTNUM          shift and go to state 142


state 133

    (14) while_instruction -> WHILE ( relation_expression ) . instruction
    (3) instruction -> . RETURN right_hand_side_expression ;
    (4) instruction -> . CONTINUE ;
    (5) instruction -> . BREAK ;
    (6) instruction -> . print_instruction
    (7) instruction -> . full_line_expression
    (8) instruction -> . for_instruction
    (9) instruction -> . while_instruction
    (10) instruction -> . if_instruction
    (11) instruction -> . { instructions }
    (18) print_instruction -> . PRINT printables ;
    (44) full_line_expression -> . ( full_line_expression )
    (45) full_line_expression -> . left_hand_side_expression
    (46) full_line_expression -> . assign_expression
    (47) full_line_expression -> . right_hand_side_expression
    (15) for_instruction -> . FOR ID = id_int : id_int instruction
    (14) while_instruction -> . WHILE ( relation_expression ) instruction
    (12) if_instruction -> . IF ( relation_expression ) instruction
    (13) if_instruction -> . IF ( relation_expression ) instruction ELSE instruction
    (54) left_hand_side_expression -> . matrix_ref
    (55) left_hand_side_expression -> . ID
    (48) assign_expression -> . left_hand_side_expression DIVIDEASSIGN right_hand_side_expression ;
    (49) assign_expression -> . left_hand_side_expression TIMESASSIGN right_hand_side_expression ;
    (50) assign_expression -> . left_hand_side_expression MINUSASSIGN right_hand_side_expression ;
    (51) assign_expression -> . left_hand_side_expression PLUSASSIGN right_hand_side_expression ;
    (52) assign_expression -> . left_hand_side_expression = right_hand_side_expression ;
    (25) right_hand_side_expression -> . matrix_ref
    (26) right_hand_side_expression -> . [ ]
    (27) right_hand_side_expression -> . [ list_of_elems ]
    (28) right_hand_side_expression -> . [ vectors ]
    (29) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (36) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (37) right_hand_side_expression -> . right_hand_side_expression '
    (38) right_hand_side_expression -> . value
    (39) right_hand_side_expression -> . matrix_functions
    (40) right_hand_side_expression -> . ( right_hand_side_expression )
    (41) right_hand_side_expression -> . relation_expression
    (42) right_hand_side_expression -> . unary_minus
    (53) matrix_ref -> . ID [ list_of_ints ]
    (21) value -> . STRING
    (22) value -> . ID
    (23) value -> . FLOATNUM
    (24) value -> . INTNUM
    (62) matrix_functions -> . EYE ( INTNUM )
    (63) matrix_functions -> . ONES ( INTNUM )
    (64) matrix_functions -> . ZEROS ( INTNUM )
    (56) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (57) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (58) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (59) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (61) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (43) unary_minus -> . - right_hand_side_expression
    RETURN          shift and go to state 3
    CONTINUE        shift and go to state 5
    BREAK           shift and go to state 6
    {               shift and go to state 12
    PRINT           shift and go to state 13
    (               shift and go to state 14
    FOR             shift and go to state 17
    WHILE           shift and go to state 19
    IF              shift and go to state 21
    ID              shift and go to state 18
    [               shift and go to state 23
    STRING          shift and go to state 28
    FLOATNUM        shift and go to state 29
    INTNUM          shift and go to state 30
    EYE             shift and go to state 31
    ONES            shift and go to state 32
    ZEROS           shift and go to state 33
    -               shift and go to state 24

    relation_expression            shift and go to state 20
    instruction                    shift and go to state 143
    right_hand_side_expression     shift and go to state 4
    print_instruction              shift and go to state 7
    full_line_expression           shift and go to state 8
    for_instruction                shift and go to state 9
    while_instruction              shift and go to state 10
    if_instruction                 shift and go to state 11
    left_hand_side_expression      shift and go to state 15
    assign_expression              shift and go to state 16
    matrix_ref                     shift and go to state 22
    value                          shift and go to state 25
    matrix_functions               shift and go to state 26
    unary_minus                    shift and go to state 27

state 134

    (12) if_instruction -> IF ( relation_expression ) . instruction
    (13) if_instruction -> IF ( relation_expression ) . instruction ELSE instruction
    (3) instruction -> . RETURN right_hand_side_expression ;
    (4) instruction -> . CONTINUE ;
    (5) instruction -> . BREAK ;
    (6) instruction -> . print_instruction
    (7) instruction -> . full_line_expression
    (8) instruction -> . for_instruction
    (9) instruction -> . while_instruction
    (10) instruction -> . if_instruction
    (11) instruction -> . { instructions }
    (18) print_instruction -> . PRINT printables ;
    (44) full_line_expression -> . ( full_line_expression )
    (45) full_line_expression -> . left_hand_side_expression
    (46) full_line_expression -> . assign_expression
    (47) full_line_expression -> . right_hand_side_expression
    (15) for_instruction -> . FOR ID = id_int : id_int instruction
    (14) while_instruction -> . WHILE ( relation_expression ) instruction
    (12) if_instruction -> . IF ( relation_expression ) instruction
    (13) if_instruction -> . IF ( relation_expression ) instruction ELSE instruction
    (54) left_hand_side_expression -> . matrix_ref
    (55) left_hand_side_expression -> . ID
    (48) assign_expression -> . left_hand_side_expression DIVIDEASSIGN right_hand_side_expression ;
    (49) assign_expression -> . left_hand_side_expression TIMESASSIGN right_hand_side_expression ;
    (50) assign_expression -> . left_hand_side_expression MINUSASSIGN right_hand_side_expression ;
    (51) assign_expression -> . left_hand_side_expression PLUSASSIGN right_hand_side_expression ;
    (52) assign_expression -> . left_hand_side_expression = right_hand_side_expression ;
    (25) right_hand_side_expression -> . matrix_ref
    (26) right_hand_side_expression -> . [ ]
    (27) right_hand_side_expression -> . [ list_of_elems ]
    (28) right_hand_side_expression -> . [ vectors ]
    (29) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (36) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (37) right_hand_side_expression -> . right_hand_side_expression '
    (38) right_hand_side_expression -> . value
    (39) right_hand_side_expression -> . matrix_functions
    (40) right_hand_side_expression -> . ( right_hand_side_expression )
    (41) right_hand_side_expression -> . relation_expression
    (42) right_hand_side_expression -> . unary_minus
    (53) matrix_ref -> . ID [ list_of_ints ]
    (21) value -> . STRING
    (22) value -> . ID
    (23) value -> . FLOATNUM
    (24) value -> . INTNUM
    (62) matrix_functions -> . EYE ( INTNUM )
    (63) matrix_functions -> . ONES ( INTNUM )
    (64) matrix_functions -> . ZEROS ( INTNUM )
    (56) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (57) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (58) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (59) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (61) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (43) unary_minus -> . - right_hand_side_expression
    RETURN          shift and go to state 3
    CONTINUE        shift and go to state 5
    BREAK           shift and go to state 6
    {               shift and go to state 12
    PRINT           shift and go to state 13
    (               shift and go to state 14
    FOR             shift and go to state 17
    WHILE           shift and go to state 19
    IF              shift and go to state 21
    ID              shift and go to state 18
    [               shift and go to state 23
    STRING          shift and go to state 28
    FLOATNUM        shift and go to state 29
    INTNUM          shift and go to state 30
    EYE             shift and go to state 31
    ONES            shift and go to state 32
    ZEROS           shift and go to state 33
    -               shift and go to state 24

    relation_expression            shift and go to state 20
    instruction                    shift and go to state 144
    right_hand_side_expression     shift and go to state 4
    print_instruction              shift and go to state 7
    full_line_expression           shift and go to state 8
    for_instruction                shift and go to state 9
    while_instruction              shift and go to state 10
    if_instruction                 shift and go to state 11
    left_hand_side_expression      shift and go to state 15
    assign_expression              shift and go to state 16
    matrix_ref                     shift and go to state 22
    value                          shift and go to state 25
    matrix_functions               shift and go to state 26
    unary_minus                    shift and go to state 27

state 135

    (68) vectors -> [ list_of_elems ] .
    ]               reduce using rule 68 (vectors -> [ list_of_elems ] .)
    ,               reduce using rule 68 (vectors -> [ list_of_elems ] .)


state 136

    (69) list_of_elems -> list_of_elems , value .
    ]               reduce using rule 69 (list_of_elems -> list_of_elems , value .)
    ,               reduce using rule 69 (list_of_elems -> list_of_elems , value .)


state 137

    (65) vectors -> vectors , [ . ]
    (67) vectors -> vectors , [ . list_of_elems ]
    (69) list_of_elems -> . list_of_elems , value
    (70) list_of_elems -> . value
    (21) value -> . STRING
    (22) value -> . ID
    (23) value -> . FLOATNUM
    (24) value -> . INTNUM
    ]               shift and go to state 145
    STRING          shift and go to state 28
    ID              shift and go to state 59
    FLOATNUM        shift and go to state 29
    INTNUM          shift and go to state 30

    list_of_elems                  shift and go to state 146
    value                          shift and go to state 76

state 138

    (62) matrix_functions -> EYE ( INTNUM ) .
    DOTDIVIDE       reduce using rule 62 (matrix_functions -> EYE ( INTNUM ) .)
    DOTTIMES        reduce using rule 62 (matrix_functions -> EYE ( INTNUM ) .)
    DOTMINUS        reduce using rule 62 (matrix_functions -> EYE ( INTNUM ) .)
    DOTPLUS         reduce using rule 62 (matrix_functions -> EYE ( INTNUM ) .)
    /               reduce using rule 62 (matrix_functions -> EYE ( INTNUM ) .)
    *               reduce using rule 62 (matrix_functions -> EYE ( INTNUM ) .)
    -               reduce using rule 62 (matrix_functions -> EYE ( INTNUM ) .)
    +               reduce using rule 62 (matrix_functions -> EYE ( INTNUM ) .)
    '               reduce using rule 62 (matrix_functions -> EYE ( INTNUM ) .)
    NE              reduce using rule 62 (matrix_functions -> EYE ( INTNUM ) .)
    EQ              reduce using rule 62 (matrix_functions -> EYE ( INTNUM ) .)
    GE              reduce using rule 62 (matrix_functions -> EYE ( INTNUM ) .)
    LE              reduce using rule 62 (matrix_functions -> EYE ( INTNUM ) .)
    GT              reduce using rule 62 (matrix_functions -> EYE ( INTNUM ) .)
    LT              reduce using rule 62 (matrix_functions -> EYE ( INTNUM ) .)
    RETURN          reduce using rule 62 (matrix_functions -> EYE ( INTNUM ) .)
    CONTINUE        reduce using rule 62 (matrix_functions -> EYE ( INTNUM ) .)
    BREAK           reduce using rule 62 (matrix_functions -> EYE ( INTNUM ) .)
    {               reduce using rule 62 (matrix_functions -> EYE ( INTNUM ) .)
    PRINT           reduce using rule 62 (matrix_functions -> EYE ( INTNUM ) .)
    (               reduce using rule 62 (matrix_functions -> EYE ( INTNUM ) .)
    FOR             reduce using rule 62 (matrix_functions -> EYE ( INTNUM ) .)
    WHILE           reduce using rule 62 (matrix_functions -> EYE ( INTNUM ) .)
    IF              reduce using rule 62 (matrix_functions -> EYE ( INTNUM ) .)
    ID              reduce using rule 62 (matrix_functions -> EYE ( INTNUM ) .)
    [               reduce using rule 62 (matrix_functions -> EYE ( INTNUM ) .)
    STRING          reduce using rule 62 (matrix_functions -> EYE ( INTNUM ) .)
    FLOATNUM        reduce using rule 62 (matrix_functions -> EYE ( INTNUM ) .)
    INTNUM          reduce using rule 62 (matrix_functions -> EYE ( INTNUM ) .)
    EYE             reduce using rule 62 (matrix_functions -> EYE ( INTNUM ) .)
    ONES            reduce using rule 62 (matrix_functions -> EYE ( INTNUM ) .)
    ZEROS           reduce using rule 62 (matrix_functions -> EYE ( INTNUM ) .)
    $end            reduce using rule 62 (matrix_functions -> EYE ( INTNUM ) .)
    ;               reduce using rule 62 (matrix_functions -> EYE ( INTNUM ) .)
    }               reduce using rule 62 (matrix_functions -> EYE ( INTNUM ) .)
    )               reduce using rule 62 (matrix_functions -> EYE ( INTNUM ) .)
    ELSE            reduce using rule 62 (matrix_functions -> EYE ( INTNUM ) .)


state 139

    (63) matrix_functions -> ONES ( INTNUM ) .
    DOTDIVIDE       reduce using rule 63 (matrix_functions -> ONES ( INTNUM ) .)
    DOTTIMES        reduce using rule 63 (matrix_functions -> ONES ( INTNUM ) .)
    DOTMINUS        reduce using rule 63 (matrix_functions -> ONES ( INTNUM ) .)
    DOTPLUS         reduce using rule 63 (matrix_functions -> ONES ( INTNUM ) .)
    /               reduce using rule 63 (matrix_functions -> ONES ( INTNUM ) .)
    *               reduce using rule 63 (matrix_functions -> ONES ( INTNUM ) .)
    -               reduce using rule 63 (matrix_functions -> ONES ( INTNUM ) .)
    +               reduce using rule 63 (matrix_functions -> ONES ( INTNUM ) .)
    '               reduce using rule 63 (matrix_functions -> ONES ( INTNUM ) .)
    NE              reduce using rule 63 (matrix_functions -> ONES ( INTNUM ) .)
    EQ              reduce using rule 63 (matrix_functions -> ONES ( INTNUM ) .)
    GE              reduce using rule 63 (matrix_functions -> ONES ( INTNUM ) .)
    LE              reduce using rule 63 (matrix_functions -> ONES ( INTNUM ) .)
    GT              reduce using rule 63 (matrix_functions -> ONES ( INTNUM ) .)
    LT              reduce using rule 63 (matrix_functions -> ONES ( INTNUM ) .)
    RETURN          reduce using rule 63 (matrix_functions -> ONES ( INTNUM ) .)
    CONTINUE        reduce using rule 63 (matrix_functions -> ONES ( INTNUM ) .)
    BREAK           reduce using rule 63 (matrix_functions -> ONES ( INTNUM ) .)
    {               reduce using rule 63 (matrix_functions -> ONES ( INTNUM ) .)
    PRINT           reduce using rule 63 (matrix_functions -> ONES ( INTNUM ) .)
    (               reduce using rule 63 (matrix_functions -> ONES ( INTNUM ) .)
    FOR             reduce using rule 63 (matrix_functions -> ONES ( INTNUM ) .)
    WHILE           reduce using rule 63 (matrix_functions -> ONES ( INTNUM ) .)
    IF              reduce using rule 63 (matrix_functions -> ONES ( INTNUM ) .)
    ID              reduce using rule 63 (matrix_functions -> ONES ( INTNUM ) .)
    [               reduce using rule 63 (matrix_functions -> ONES ( INTNUM ) .)
    STRING          reduce using rule 63 (matrix_functions -> ONES ( INTNUM ) .)
    FLOATNUM        reduce using rule 63 (matrix_functions -> ONES ( INTNUM ) .)
    INTNUM          reduce using rule 63 (matrix_functions -> ONES ( INTNUM ) .)
    EYE             reduce using rule 63 (matrix_functions -> ONES ( INTNUM ) .)
    ONES            reduce using rule 63 (matrix_functions -> ONES ( INTNUM ) .)
    ZEROS           reduce using rule 63 (matrix_functions -> ONES ( INTNUM ) .)
    $end            reduce using rule 63 (matrix_functions -> ONES ( INTNUM ) .)
    ;               reduce using rule 63 (matrix_functions -> ONES ( INTNUM ) .)
    }               reduce using rule 63 (matrix_functions -> ONES ( INTNUM ) .)
    )               reduce using rule 63 (matrix_functions -> ONES ( INTNUM ) .)
    ELSE            reduce using rule 63 (matrix_functions -> ONES ( INTNUM ) .)


state 140

    (64) matrix_functions -> ZEROS ( INTNUM ) .
    DOTDIVIDE       reduce using rule 64 (matrix_functions -> ZEROS ( INTNUM ) .)
    DOTTIMES        reduce using rule 64 (matrix_functions -> ZEROS ( INTNUM ) .)
    DOTMINUS        reduce using rule 64 (matrix_functions -> ZEROS ( INTNUM ) .)
    DOTPLUS         reduce using rule 64 (matrix_functions -> ZEROS ( INTNUM ) .)
    /               reduce using rule 64 (matrix_functions -> ZEROS ( INTNUM ) .)
    *               reduce using rule 64 (matrix_functions -> ZEROS ( INTNUM ) .)
    -               reduce using rule 64 (matrix_functions -> ZEROS ( INTNUM ) .)
    +               reduce using rule 64 (matrix_functions -> ZEROS ( INTNUM ) .)
    '               reduce using rule 64 (matrix_functions -> ZEROS ( INTNUM ) .)
    NE              reduce using rule 64 (matrix_functions -> ZEROS ( INTNUM ) .)
    EQ              reduce using rule 64 (matrix_functions -> ZEROS ( INTNUM ) .)
    GE              reduce using rule 64 (matrix_functions -> ZEROS ( INTNUM ) .)
    LE              reduce using rule 64 (matrix_functions -> ZEROS ( INTNUM ) .)
    GT              reduce using rule 64 (matrix_functions -> ZEROS ( INTNUM ) .)
    LT              reduce using rule 64 (matrix_functions -> ZEROS ( INTNUM ) .)
    RETURN          reduce using rule 64 (matrix_functions -> ZEROS ( INTNUM ) .)
    CONTINUE        reduce using rule 64 (matrix_functions -> ZEROS ( INTNUM ) .)
    BREAK           reduce using rule 64 (matrix_functions -> ZEROS ( INTNUM ) .)
    {               reduce using rule 64 (matrix_functions -> ZEROS ( INTNUM ) .)
    PRINT           reduce using rule 64 (matrix_functions -> ZEROS ( INTNUM ) .)
    (               reduce using rule 64 (matrix_functions -> ZEROS ( INTNUM ) .)
    FOR             reduce using rule 64 (matrix_functions -> ZEROS ( INTNUM ) .)
    WHILE           reduce using rule 64 (matrix_functions -> ZEROS ( INTNUM ) .)
    IF              reduce using rule 64 (matrix_functions -> ZEROS ( INTNUM ) .)
    ID              reduce using rule 64 (matrix_functions -> ZEROS ( INTNUM ) .)
    [               reduce using rule 64 (matrix_functions -> ZEROS ( INTNUM ) .)
    STRING          reduce using rule 64 (matrix_functions -> ZEROS ( INTNUM ) .)
    FLOATNUM        reduce using rule 64 (matrix_functions -> ZEROS ( INTNUM ) .)
    INTNUM          reduce using rule 64 (matrix_functions -> ZEROS ( INTNUM ) .)
    EYE             reduce using rule 64 (matrix_functions -> ZEROS ( INTNUM ) .)
    ONES            reduce using rule 64 (matrix_functions -> ZEROS ( INTNUM ) .)
    ZEROS           reduce using rule 64 (matrix_functions -> ZEROS ( INTNUM ) .)
    $end            reduce using rule 64 (matrix_functions -> ZEROS ( INTNUM ) .)
    ;               reduce using rule 64 (matrix_functions -> ZEROS ( INTNUM ) .)
    }               reduce using rule 64 (matrix_functions -> ZEROS ( INTNUM ) .)
    )               reduce using rule 64 (matrix_functions -> ZEROS ( INTNUM ) .)
    ELSE            reduce using rule 64 (matrix_functions -> ZEROS ( INTNUM ) .)


state 141

    (15) for_instruction -> FOR ID = id_int : . id_int instruction
    (16) id_int -> . INTNUM
    (17) id_int -> . ID
    INTNUM          shift and go to state 130
    ID              shift and go to state 128

    id_int                         shift and go to state 147

state 142

    (71) list_of_ints -> list_of_ints , INTNUM .
    ]               reduce using rule 71 (list_of_ints -> list_of_ints , INTNUM .)
    ,               reduce using rule 71 (list_of_ints -> list_of_ints , INTNUM .)


state 143

    (14) while_instruction -> WHILE ( relation_expression ) instruction .
    RETURN          reduce using rule 14 (while_instruction -> WHILE ( relation_expression ) instruction .)
    CONTINUE        reduce using rule 14 (while_instruction -> WHILE ( relation_expression ) instruction .)
    BREAK           reduce using rule 14 (while_instruction -> WHILE ( relation_expression ) instruction .)
    {               reduce using rule 14 (while_instruction -> WHILE ( relation_expression ) instruction .)
    PRINT           reduce using rule 14 (while_instruction -> WHILE ( relation_expression ) instruction .)
    (               reduce using rule 14 (while_instruction -> WHILE ( relation_expression ) instruction .)
    FOR             reduce using rule 14 (while_instruction -> WHILE ( relation_expression ) instruction .)
    WHILE           reduce using rule 14 (while_instruction -> WHILE ( relation_expression ) instruction .)
    IF              reduce using rule 14 (while_instruction -> WHILE ( relation_expression ) instruction .)
    ID              reduce using rule 14 (while_instruction -> WHILE ( relation_expression ) instruction .)
    [               reduce using rule 14 (while_instruction -> WHILE ( relation_expression ) instruction .)
    STRING          reduce using rule 14 (while_instruction -> WHILE ( relation_expression ) instruction .)
    FLOATNUM        reduce using rule 14 (while_instruction -> WHILE ( relation_expression ) instruction .)
    INTNUM          reduce using rule 14 (while_instruction -> WHILE ( relation_expression ) instruction .)
    EYE             reduce using rule 14 (while_instruction -> WHILE ( relation_expression ) instruction .)
    ONES            reduce using rule 14 (while_instruction -> WHILE ( relation_expression ) instruction .)
    ZEROS           reduce using rule 14 (while_instruction -> WHILE ( relation_expression ) instruction .)
    -               reduce using rule 14 (while_instruction -> WHILE ( relation_expression ) instruction .)
    $end            reduce using rule 14 (while_instruction -> WHILE ( relation_expression ) instruction .)
    }               reduce using rule 14 (while_instruction -> WHILE ( relation_expression ) instruction .)
    ELSE            reduce using rule 14 (while_instruction -> WHILE ( relation_expression ) instruction .)


state 144

    (12) if_instruction -> IF ( relation_expression ) instruction .
    (13) if_instruction -> IF ( relation_expression ) instruction . ELSE instruction
    RETURN          reduce using rule 12 (if_instruction -> IF ( relation_expression ) instruction .)
    CONTINUE        reduce using rule 12 (if_instruction -> IF ( relation_expression ) instruction .)
    BREAK           reduce using rule 12 (if_instruction -> IF ( relation_expression ) instruction .)
    {               reduce using rule 12 (if_instruction -> IF ( relation_expression ) instruction .)
    PRINT           reduce using rule 12 (if_instruction -> IF ( relation_expression ) instruction .)
    (               reduce using rule 12 (if_instruction -> IF ( relation_expression ) instruction .)
    FOR             reduce using rule 12 (if_instruction -> IF ( relation_expression ) instruction .)
    WHILE           reduce using rule 12 (if_instruction -> IF ( relation_expression ) instruction .)
    IF              reduce using rule 12 (if_instruction -> IF ( relation_expression ) instruction .)
    ID              reduce using rule 12 (if_instruction -> IF ( relation_expression ) instruction .)
    [               reduce using rule 12 (if_instruction -> IF ( relation_expression ) instruction .)
    STRING          reduce using rule 12 (if_instruction -> IF ( relation_expression ) instruction .)
    FLOATNUM        reduce using rule 12 (if_instruction -> IF ( relation_expression ) instruction .)
    INTNUM          reduce using rule 12 (if_instruction -> IF ( relation_expression ) instruction .)
    EYE             reduce using rule 12 (if_instruction -> IF ( relation_expression ) instruction .)
    ONES            reduce using rule 12 (if_instruction -> IF ( relation_expression ) instruction .)
    ZEROS           reduce using rule 12 (if_instruction -> IF ( relation_expression ) instruction .)
    -               reduce using rule 12 (if_instruction -> IF ( relation_expression ) instruction .)
    $end            reduce using rule 12 (if_instruction -> IF ( relation_expression ) instruction .)
    }               reduce using rule 12 (if_instruction -> IF ( relation_expression ) instruction .)
    ELSE            shift and go to state 148


state 145

    (65) vectors -> vectors , [ ] .
    ]               reduce using rule 65 (vectors -> vectors , [ ] .)
    ,               reduce using rule 65 (vectors -> vectors , [ ] .)


state 146

    (67) vectors -> vectors , [ list_of_elems . ]
    (69) list_of_elems -> list_of_elems . , value
    ]               shift and go to state 149
    ,               shift and go to state 116


state 147

    (15) for_instruction -> FOR ID = id_int : id_int . instruction
    (3) instruction -> . RETURN right_hand_side_expression ;
    (4) instruction -> . CONTINUE ;
    (5) instruction -> . BREAK ;
    (6) instruction -> . print_instruction
    (7) instruction -> . full_line_expression
    (8) instruction -> . for_instruction
    (9) instruction -> . while_instruction
    (10) instruction -> . if_instruction
    (11) instruction -> . { instructions }
    (18) print_instruction -> . PRINT printables ;
    (44) full_line_expression -> . ( full_line_expression )
    (45) full_line_expression -> . left_hand_side_expression
    (46) full_line_expression -> . assign_expression
    (47) full_line_expression -> . right_hand_side_expression
    (15) for_instruction -> . FOR ID = id_int : id_int instruction
    (14) while_instruction -> . WHILE ( relation_expression ) instruction
    (12) if_instruction -> . IF ( relation_expression ) instruction
    (13) if_instruction -> . IF ( relation_expression ) instruction ELSE instruction
    (54) left_hand_side_expression -> . matrix_ref
    (55) left_hand_side_expression -> . ID
    (48) assign_expression -> . left_hand_side_expression DIVIDEASSIGN right_hand_side_expression ;
    (49) assign_expression -> . left_hand_side_expression TIMESASSIGN right_hand_side_expression ;
    (50) assign_expression -> . left_hand_side_expression MINUSASSIGN right_hand_side_expression ;
    (51) assign_expression -> . left_hand_side_expression PLUSASSIGN right_hand_side_expression ;
    (52) assign_expression -> . left_hand_side_expression = right_hand_side_expression ;
    (25) right_hand_side_expression -> . matrix_ref
    (26) right_hand_side_expression -> . [ ]
    (27) right_hand_side_expression -> . [ list_of_elems ]
    (28) right_hand_side_expression -> . [ vectors ]
    (29) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (36) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (37) right_hand_side_expression -> . right_hand_side_expression '
    (38) right_hand_side_expression -> . value
    (39) right_hand_side_expression -> . matrix_functions
    (40) right_hand_side_expression -> . ( right_hand_side_expression )
    (41) right_hand_side_expression -> . relation_expression
    (42) right_hand_side_expression -> . unary_minus
    (53) matrix_ref -> . ID [ list_of_ints ]
    (21) value -> . STRING
    (22) value -> . ID
    (23) value -> . FLOATNUM
    (24) value -> . INTNUM
    (62) matrix_functions -> . EYE ( INTNUM )
    (63) matrix_functions -> . ONES ( INTNUM )
    (64) matrix_functions -> . ZEROS ( INTNUM )
    (56) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (57) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (58) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (59) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (61) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (43) unary_minus -> . - right_hand_side_expression
    RETURN          shift and go to state 3
    CONTINUE        shift and go to state 5
    BREAK           shift and go to state 6
    {               shift and go to state 12
    PRINT           shift and go to state 13
    (               shift and go to state 14
    FOR             shift and go to state 17
    WHILE           shift and go to state 19
    IF              shift and go to state 21
    ID              shift and go to state 18
    [               shift and go to state 23
    STRING          shift and go to state 28
    FLOATNUM        shift and go to state 29
    INTNUM          shift and go to state 30
    EYE             shift and go to state 31
    ONES            shift and go to state 32
    ZEROS           shift and go to state 33
    -               shift and go to state 24

    instruction                    shift and go to state 150
    right_hand_side_expression     shift and go to state 4
    print_instruction              shift and go to state 7
    full_line_expression           shift and go to state 8
    for_instruction                shift and go to state 9
    while_instruction              shift and go to state 10
    if_instruction                 shift and go to state 11
    left_hand_side_expression      shift and go to state 15
    assign_expression              shift and go to state 16
    relation_expression            shift and go to state 20
    matrix_ref                     shift and go to state 22
    value                          shift and go to state 25
    matrix_functions               shift and go to state 26
    unary_minus                    shift and go to state 27

state 148

    (13) if_instruction -> IF ( relation_expression ) instruction ELSE . instruction
    (3) instruction -> . RETURN right_hand_side_expression ;
    (4) instruction -> . CONTINUE ;
    (5) instruction -> . BREAK ;
    (6) instruction -> . print_instruction
    (7) instruction -> . full_line_expression
    (8) instruction -> . for_instruction
    (9) instruction -> . while_instruction
    (10) instruction -> . if_instruction
    (11) instruction -> . { instructions }
    (18) print_instruction -> . PRINT printables ;
    (44) full_line_expression -> . ( full_line_expression )
    (45) full_line_expression -> . left_hand_side_expression
    (46) full_line_expression -> . assign_expression
    (47) full_line_expression -> . right_hand_side_expression
    (15) for_instruction -> . FOR ID = id_int : id_int instruction
    (14) while_instruction -> . WHILE ( relation_expression ) instruction
    (12) if_instruction -> . IF ( relation_expression ) instruction
    (13) if_instruction -> . IF ( relation_expression ) instruction ELSE instruction
    (54) left_hand_side_expression -> . matrix_ref
    (55) left_hand_side_expression -> . ID
    (48) assign_expression -> . left_hand_side_expression DIVIDEASSIGN right_hand_side_expression ;
    (49) assign_expression -> . left_hand_side_expression TIMESASSIGN right_hand_side_expression ;
    (50) assign_expression -> . left_hand_side_expression MINUSASSIGN right_hand_side_expression ;
    (51) assign_expression -> . left_hand_side_expression PLUSASSIGN right_hand_side_expression ;
    (52) assign_expression -> . left_hand_side_expression = right_hand_side_expression ;
    (25) right_hand_side_expression -> . matrix_ref
    (26) right_hand_side_expression -> . [ ]
    (27) right_hand_side_expression -> . [ list_of_elems ]
    (28) right_hand_side_expression -> . [ vectors ]
    (29) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (36) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (37) right_hand_side_expression -> . right_hand_side_expression '
    (38) right_hand_side_expression -> . value
    (39) right_hand_side_expression -> . matrix_functions
    (40) right_hand_side_expression -> . ( right_hand_side_expression )
    (41) right_hand_side_expression -> . relation_expression
    (42) right_hand_side_expression -> . unary_minus
    (53) matrix_ref -> . ID [ list_of_ints ]
    (21) value -> . STRING
    (22) value -> . ID
    (23) value -> . FLOATNUM
    (24) value -> . INTNUM
    (62) matrix_functions -> . EYE ( INTNUM )
    (63) matrix_functions -> . ONES ( INTNUM )
    (64) matrix_functions -> . ZEROS ( INTNUM )
    (56) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (57) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (58) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (59) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (61) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (43) unary_minus -> . - right_hand_side_expression
    RETURN          shift and go to state 3
    CONTINUE        shift and go to state 5
    BREAK           shift and go to state 6
    {               shift and go to state 12
    PRINT           shift and go to state 13
    (               shift and go to state 14
    FOR             shift and go to state 17
    WHILE           shift and go to state 19
    IF              shift and go to state 21
    ID              shift and go to state 18
    [               shift and go to state 23
    STRING          shift and go to state 28
    FLOATNUM        shift and go to state 29
    INTNUM          shift and go to state 30
    EYE             shift and go to state 31
    ONES            shift and go to state 32
    ZEROS           shift and go to state 33
    -               shift and go to state 24

    relation_expression            shift and go to state 20
    instruction                    shift and go to state 151
    right_hand_side_expression     shift and go to state 4
    print_instruction              shift and go to state 7
    full_line_expression           shift and go to state 8
    for_instruction                shift and go to state 9
    while_instruction              shift and go to state 10
    if_instruction                 shift and go to state 11
    left_hand_side_expression      shift and go to state 15
    assign_expression              shift and go to state 16
    matrix_ref                     shift and go to state 22
    value                          shift and go to state 25
    matrix_functions               shift and go to state 26
    unary_minus                    shift and go to state 27

state 149

    (67) vectors -> vectors , [ list_of_elems ] .
    ]               reduce using rule 67 (vectors -> vectors , [ list_of_elems ] .)
    ,               reduce using rule 67 (vectors -> vectors , [ list_of_elems ] .)


state 150

    (15) for_instruction -> FOR ID = id_int : id_int instruction .
    RETURN          reduce using rule 15 (for_instruction -> FOR ID = id_int : id_int instruction .)
    CONTINUE        reduce using rule 15 (for_instruction -> FOR ID = id_int : id_int instruction .)
    BREAK           reduce using rule 15 (for_instruction -> FOR ID = id_int : id_int instruction .)
    {               reduce using rule 15 (for_instruction -> FOR ID = id_int : id_int instruction .)
    PRINT           reduce using rule 15 (for_instruction -> FOR ID = id_int : id_int instruction .)
    (               reduce using rule 15 (for_instruction -> FOR ID = id_int : id_int instruction .)
    FOR             reduce using rule 15 (for_instruction -> FOR ID = id_int : id_int instruction .)
    WHILE           reduce using rule 15 (for_instruction -> FOR ID = id_int : id_int instruction .)
    IF              reduce using rule 15 (for_instruction -> FOR ID = id_int : id_int instruction .)
    ID              reduce using rule 15 (for_instruction -> FOR ID = id_int : id_int instruction .)
    [               reduce using rule 15 (for_instruction -> FOR ID = id_int : id_int instruction .)
    STRING          reduce using rule 15 (for_instruction -> FOR ID = id_int : id_int instruction .)
    FLOATNUM        reduce using rule 15 (for_instruction -> FOR ID = id_int : id_int instruction .)
    INTNUM          reduce using rule 15 (for_instruction -> FOR ID = id_int : id_int instruction .)
    EYE             reduce using rule 15 (for_instruction -> FOR ID = id_int : id_int instruction .)
    ONES            reduce using rule 15 (for_instruction -> FOR ID = id_int : id_int instruction .)
    ZEROS           reduce using rule 15 (for_instruction -> FOR ID = id_int : id_int instruction .)
    -               reduce using rule 15 (for_instruction -> FOR ID = id_int : id_int instruction .)
    $end            reduce using rule 15 (for_instruction -> FOR ID = id_int : id_int instruction .)
    }               reduce using rule 15 (for_instruction -> FOR ID = id_int : id_int instruction .)
    ELSE            reduce using rule 15 (for_instruction -> FOR ID = id_int : id_int instruction .)


state 151

    (13) if_instruction -> IF ( relation_expression ) instruction ELSE instruction .
    RETURN          reduce using rule 13 (if_instruction -> IF ( relation_expression ) instruction ELSE instruction .)
    CONTINUE        reduce using rule 13 (if_instruction -> IF ( relation_expression ) instruction ELSE instruction .)
    BREAK           reduce using rule 13 (if_instruction -> IF ( relation_expression ) instruction ELSE instruction .)
    {               reduce using rule 13 (if_instruction -> IF ( relation_expression ) instruction ELSE instruction .)
    PRINT           reduce using rule 13 (if_instruction -> IF ( relation_expression ) instruction ELSE instruction .)
    (               reduce using rule 13 (if_instruction -> IF ( relation_expression ) instruction ELSE instruction .)
    FOR             reduce using rule 13 (if_instruction -> IF ( relation_expression ) instruction ELSE instruction .)
    WHILE           reduce using rule 13 (if_instruction -> IF ( relation_expression ) instruction ELSE instruction .)
    IF              reduce using rule 13 (if_instruction -> IF ( relation_expression ) instruction ELSE instruction .)
    ID              reduce using rule 13 (if_instruction -> IF ( relation_expression ) instruction ELSE instruction .)
    [               reduce using rule 13 (if_instruction -> IF ( relation_expression ) instruction ELSE instruction .)
    STRING          reduce using rule 13 (if_instruction -> IF ( relation_expression ) instruction ELSE instruction .)
    FLOATNUM        reduce using rule 13 (if_instruction -> IF ( relation_expression ) instruction ELSE instruction .)
    INTNUM          reduce using rule 13 (if_instruction -> IF ( relation_expression ) instruction ELSE instruction .)
    EYE             reduce using rule 13 (if_instruction -> IF ( relation_expression ) instruction ELSE instruction .)
    ONES            reduce using rule 13 (if_instruction -> IF ( relation_expression ) instruction ELSE instruction .)
    ZEROS           reduce using rule 13 (if_instruction -> IF ( relation_expression ) instruction ELSE instruction .)
    -               reduce using rule 13 (if_instruction -> IF ( relation_expression ) instruction ELSE instruction .)
    $end            reduce using rule 13 (if_instruction -> IF ( relation_expression ) instruction ELSE instruction .)
    }               reduce using rule 13 (if_instruction -> IF ( relation_expression ) instruction ELSE instruction .)
    ELSE            reduce using rule 13 (if_instruction -> IF ( relation_expression ) instruction ELSE instruction .)


Conflicts:

shift/reduce conflict for - in state 4 resolved as shift
shift/reduce conflict for [ in state 18 resolved as shift
shift/reduce conflict for [ in state 18 resolved as shift
shift/reduce conflict for [ in state 38 resolved as shift
shift/reduce conflict for ) in state 61 resolved as shift
reduce/reduce conflict in state 18 resolved using rule value -> ID
rejected rule (left_hand_side_expression -> ID) in state 18
reduce/reduce conflict in state 22 resolved using rule right_hand_side_expression -> matrix_ref
rejected rule (left_hand_side_expression -> matrix_ref) in state 22
reduce/reduce conflict in state 62 resolved using rule right_hand_side_expression -> matrix_ref
rejected rule (left_hand_side_expression -> matrix_ref) in state 62