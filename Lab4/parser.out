Grammar:

Rule 0     S' -> instructions
Rule 1     instructions -> instruction
Rule 2     instructions -> instructions instruction
Rule 3     instruction -> RETURN right_hand_side_expression ;
Rule 4     instruction -> CONTINUE ;
Rule 5     instruction -> BREAK ;
Rule 6     instruction -> { instructions }
Rule 7     instruction -> print_instruction
Rule 8     instruction -> full_line_instruction
Rule 9     instruction -> for_instruction
Rule 10    instruction -> while_instruction
Rule 11    instruction -> if_instruction
Rule 12    if_instruction -> IF ( relation_expression ) instruction  [precedence=nonassoc, level=1]
Rule 13    if_instruction -> IF ( relation_expression ) instruction ELSE instruction  [precedence=nonassoc, level=2]
Rule 14    while_instruction -> WHILE ( relation_expression ) instruction
Rule 15    for_instruction -> FOR ID = id_int : id_int instruction
Rule 16    id_int -> ID
Rule 17    id_int -> INTNUM
Rule 18    print_instruction -> PRINT printables ;
Rule 19    printables -> matrix_ref
Rule 20    printables -> value
Rule 21    printables -> printables , value
Rule 22    value -> STRING
Rule 23    value -> ID
Rule 24    value -> FLOATNUM
Rule 25    value -> INTNUM
Rule 26    right_hand_side_expression -> vector
Rule 27    right_hand_side_expression -> right_hand_side_expression DOTDIVIDE right_hand_side_expression  [precedence=left, level=5]
Rule 28    right_hand_side_expression -> right_hand_side_expression DOTTIMES right_hand_side_expression  [precedence=left, level=5]
Rule 29    right_hand_side_expression -> right_hand_side_expression DOTMINUS right_hand_side_expression  [precedence=left, level=4]
Rule 30    right_hand_side_expression -> right_hand_side_expression DOTPLUS right_hand_side_expression  [precedence=left, level=4]
Rule 31    right_hand_side_expression -> right_hand_side_expression / right_hand_side_expression  [precedence=left, level=5]
Rule 32    right_hand_side_expression -> right_hand_side_expression * right_hand_side_expression  [precedence=left, level=5]
Rule 33    right_hand_side_expression -> right_hand_side_expression - right_hand_side_expression  [precedence=left, level=4]
Rule 34    right_hand_side_expression -> right_hand_side_expression + right_hand_side_expression  [precedence=left, level=4]
Rule 35    right_hand_side_expression -> right_hand_side_expression '  [precedence=nonassoc, level=6]
Rule 36    right_hand_side_expression -> value
Rule 37    right_hand_side_expression -> matrix_functions
Rule 38    right_hand_side_expression -> ( right_hand_side_expression )
Rule 39    right_hand_side_expression -> relation_expression
Rule 40    right_hand_side_expression -> unary
Rule 41    unary -> - right_hand_side_expression  [precedence=right, level=7]
Rule 42    full_line_instruction -> ( full_line_instruction )
Rule 43    full_line_instruction -> assign_instruction
Rule 44    assign_instruction -> ID DIVIDEASSIGN right_hand_side_expression ;
Rule 45    assign_instruction -> ID TIMESASSIGN right_hand_side_expression ;
Rule 46    assign_instruction -> ID MINUSASSIGN right_hand_side_expression ;
Rule 47    assign_instruction -> ID PLUSASSIGN right_hand_side_expression ;
Rule 48    assign_instruction -> ID = right_hand_side_expression ;
Rule 49    assign_instruction -> matrix_ref DIVIDEASSIGN right_hand_side_expression ;
Rule 50    assign_instruction -> matrix_ref TIMESASSIGN right_hand_side_expression ;
Rule 51    assign_instruction -> matrix_ref MINUSASSIGN right_hand_side_expression ;
Rule 52    assign_instruction -> matrix_ref PLUSASSIGN right_hand_side_expression ;
Rule 53    assign_instruction -> matrix_ref = right_hand_side_expression ;
Rule 54    matrix_ref -> ID [ variables ]
Rule 55    relation_expression -> right_hand_side_expression NE right_hand_side_expression  [precedence=nonassoc, level=3]
Rule 56    relation_expression -> right_hand_side_expression EQ right_hand_side_expression  [precedence=nonassoc, level=3]
Rule 57    relation_expression -> right_hand_side_expression GE right_hand_side_expression  [precedence=nonassoc, level=3]
Rule 58    relation_expression -> right_hand_side_expression LE right_hand_side_expression  [precedence=nonassoc, level=3]
Rule 59    relation_expression -> right_hand_side_expression GT right_hand_side_expression  [precedence=nonassoc, level=3]
Rule 60    relation_expression -> right_hand_side_expression LT right_hand_side_expression  [precedence=nonassoc, level=3]
Rule 61    matrix_functions -> EYE ( id_int )
Rule 62    matrix_functions -> ONES ( id_int )
Rule 63    matrix_functions -> ZEROS ( id_int )
Rule 64    vector -> [ ]
Rule 65    vector -> [ variables ]
Rule 66    variables -> right_hand_side_expression
Rule 67    variables -> variables , right_hand_side_expression

Terminals, with rules where they appear:

'                    : 35
(                    : 12 13 14 38 42 61 62 63
)                    : 12 13 14 38 42 61 62 63
*                    : 32
+                    : 34
,                    : 21 67
-                    : 33 41
/                    : 31
:                    : 15
;                    : 3 4 5 18 44 45 46 47 48 49 50 51 52 53
=                    : 15 48 53
BREAK                : 5
CONTINUE             : 4
DIVIDEASSIGN         : 44 49
DOTDIVIDE            : 27
DOTMINUS             : 29
DOTPLUS              : 30
DOTTIMES             : 28
ELSE                 : 13
EQ                   : 56
EYE                  : 61
FLOATNUM             : 24
FOR                  : 15
GE                   : 57
GT                   : 59
ID                   : 15 16 23 44 45 46 47 48 54
IF                   : 12 13
INTNUM               : 17 25
LE                   : 58
LT                   : 60
MINUSASSIGN          : 46 51
NE                   : 55
ONES                 : 62
PLUSASSIGN           : 47 52
PRINT                : 18
RETURN               : 3
STRING               : 22
TIMESASSIGN          : 45 50
WHILE                : 14
ZEROS                : 63
[                    : 54 64 65
]                    : 54 64 65
error                : 
{                    : 6
}                    : 6

Nonterminals, with rules where they appear:

assign_instruction   : 43
for_instruction      : 9
full_line_instruction : 8 42
id_int               : 15 15 61 62 63
if_instruction       : 11
instruction          : 1 2 12 13 13 14 15
instructions         : 2 6 0
matrix_functions     : 37
matrix_ref           : 19 49 50 51 52 53
print_instruction    : 7
printables           : 18 21
relation_expression  : 12 13 14 39
right_hand_side_expression : 3 27 27 28 28 29 29 30 30 31 31 32 32 33 33 34 34 35 38 41 44 45 46 47 48 49 50 51 52 53 55 55 56 56 57 57 58 58 59 59 60 60 66 67
unary                : 40
value                : 20 21 36
variables            : 54 65 67
vector               : 26
while_instruction    : 10


state 0

    (0) S' -> . instructions
    (1) instructions -> . instruction
    (2) instructions -> . instructions instruction
    (3) instruction -> . RETURN right_hand_side_expression ;
    (4) instruction -> . CONTINUE ;
    (5) instruction -> . BREAK ;
    (6) instruction -> . { instructions }
    (7) instruction -> . print_instruction
    (8) instruction -> . full_line_instruction
    (9) instruction -> . for_instruction
    (10) instruction -> . while_instruction
    (11) instruction -> . if_instruction
    (18) print_instruction -> . PRINT printables ;
    (42) full_line_instruction -> . ( full_line_instruction )
    (43) full_line_instruction -> . assign_instruction
    (15) for_instruction -> . FOR ID = id_int : id_int instruction
    (14) while_instruction -> . WHILE ( relation_expression ) instruction
    (12) if_instruction -> . IF ( relation_expression ) instruction
    (13) if_instruction -> . IF ( relation_expression ) instruction ELSE instruction
    (44) assign_instruction -> . ID DIVIDEASSIGN right_hand_side_expression ;
    (45) assign_instruction -> . ID TIMESASSIGN right_hand_side_expression ;
    (46) assign_instruction -> . ID MINUSASSIGN right_hand_side_expression ;
    (47) assign_instruction -> . ID PLUSASSIGN right_hand_side_expression ;
    (48) assign_instruction -> . ID = right_hand_side_expression ;
    (49) assign_instruction -> . matrix_ref DIVIDEASSIGN right_hand_side_expression ;
    (50) assign_instruction -> . matrix_ref TIMESASSIGN right_hand_side_expression ;
    (51) assign_instruction -> . matrix_ref MINUSASSIGN right_hand_side_expression ;
    (52) assign_instruction -> . matrix_ref PLUSASSIGN right_hand_side_expression ;
    (53) assign_instruction -> . matrix_ref = right_hand_side_expression ;
    (54) matrix_ref -> . ID [ variables ]
    RETURN          shift and go to state 3
    CONTINUE        shift and go to state 4
    BREAK           shift and go to state 5
    {               shift and go to state 6
    PRINT           shift and go to state 12
    (               shift and go to state 13
    FOR             shift and go to state 15
    WHILE           shift and go to state 17
    IF              shift and go to state 18
    ID              shift and go to state 16

    instructions                   shift and go to state 1
    instruction                    shift and go to state 2
    print_instruction              shift and go to state 7
    full_line_instruction          shift and go to state 8
    for_instruction                shift and go to state 9
    while_instruction              shift and go to state 10
    if_instruction                 shift and go to state 11
    assign_instruction             shift and go to state 14
    matrix_ref                     shift and go to state 19

state 1

    (0) S' -> instructions .
    (2) instructions -> instructions . instruction
    (3) instruction -> . RETURN right_hand_side_expression ;
    (4) instruction -> . CONTINUE ;
    (5) instruction -> . BREAK ;
    (6) instruction -> . { instructions }
    (7) instruction -> . print_instruction
    (8) instruction -> . full_line_instruction
    (9) instruction -> . for_instruction
    (10) instruction -> . while_instruction
    (11) instruction -> . if_instruction
    (18) print_instruction -> . PRINT printables ;
    (42) full_line_instruction -> . ( full_line_instruction )
    (43) full_line_instruction -> . assign_instruction
    (15) for_instruction -> . FOR ID = id_int : id_int instruction
    (14) while_instruction -> . WHILE ( relation_expression ) instruction
    (12) if_instruction -> . IF ( relation_expression ) instruction
    (13) if_instruction -> . IF ( relation_expression ) instruction ELSE instruction
    (44) assign_instruction -> . ID DIVIDEASSIGN right_hand_side_expression ;
    (45) assign_instruction -> . ID TIMESASSIGN right_hand_side_expression ;
    (46) assign_instruction -> . ID MINUSASSIGN right_hand_side_expression ;
    (47) assign_instruction -> . ID PLUSASSIGN right_hand_side_expression ;
    (48) assign_instruction -> . ID = right_hand_side_expression ;
    (49) assign_instruction -> . matrix_ref DIVIDEASSIGN right_hand_side_expression ;
    (50) assign_instruction -> . matrix_ref TIMESASSIGN right_hand_side_expression ;
    (51) assign_instruction -> . matrix_ref MINUSASSIGN right_hand_side_expression ;
    (52) assign_instruction -> . matrix_ref PLUSASSIGN right_hand_side_expression ;
    (53) assign_instruction -> . matrix_ref = right_hand_side_expression ;
    (54) matrix_ref -> . ID [ variables ]
    RETURN          shift and go to state 3
    CONTINUE        shift and go to state 4
    BREAK           shift and go to state 5
    {               shift and go to state 6
    PRINT           shift and go to state 12
    (               shift and go to state 13
    FOR             shift and go to state 15
    WHILE           shift and go to state 17
    IF              shift and go to state 18
    ID              shift and go to state 16

    instruction                    shift and go to state 20
    print_instruction              shift and go to state 7
    full_line_instruction          shift and go to state 8
    for_instruction                shift and go to state 9
    while_instruction              shift and go to state 10
    if_instruction                 shift and go to state 11
    assign_instruction             shift and go to state 14
    matrix_ref                     shift and go to state 19

state 2

    (1) instructions -> instruction .
    RETURN          reduce using rule 1 (instructions -> instruction .)
    CONTINUE        reduce using rule 1 (instructions -> instruction .)
    BREAK           reduce using rule 1 (instructions -> instruction .)
    {               reduce using rule 1 (instructions -> instruction .)
    PRINT           reduce using rule 1 (instructions -> instruction .)
    (               reduce using rule 1 (instructions -> instruction .)
    FOR             reduce using rule 1 (instructions -> instruction .)
    WHILE           reduce using rule 1 (instructions -> instruction .)
    IF              reduce using rule 1 (instructions -> instruction .)
    ID              reduce using rule 1 (instructions -> instruction .)
    $end            reduce using rule 1 (instructions -> instruction .)
    }               reduce using rule 1 (instructions -> instruction .)


state 3

    (3) instruction -> RETURN . right_hand_side_expression ;
    (26) right_hand_side_expression -> . vector
    (27) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (28) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (29) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression '
    (36) right_hand_side_expression -> . value
    (37) right_hand_side_expression -> . matrix_functions
    (38) right_hand_side_expression -> . ( right_hand_side_expression )
    (39) right_hand_side_expression -> . relation_expression
    (40) right_hand_side_expression -> . unary
    (64) vector -> . [ ]
    (65) vector -> . [ variables ]
    (22) value -> . STRING
    (23) value -> . ID
    (24) value -> . FLOATNUM
    (25) value -> . INTNUM
    (61) matrix_functions -> . EYE ( id_int )
    (62) matrix_functions -> . ONES ( id_int )
    (63) matrix_functions -> . ZEROS ( id_int )
    (55) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (56) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (57) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (58) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (59) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (41) unary -> . - right_hand_side_expression
    (               shift and go to state 26
    [               shift and go to state 29
    STRING          shift and go to state 30
    ID              shift and go to state 31
    FLOATNUM        shift and go to state 32
    INTNUM          shift and go to state 33
    EYE             shift and go to state 34
    ONES            shift and go to state 35
    ZEROS           shift and go to state 36
    -               shift and go to state 23

    right_hand_side_expression     shift and go to state 21
    vector                         shift and go to state 22
    value                          shift and go to state 24
    matrix_functions               shift and go to state 25
    relation_expression            shift and go to state 27
    unary                          shift and go to state 28

state 4

    (4) instruction -> CONTINUE . ;
    ;               shift and go to state 37


state 5

    (5) instruction -> BREAK . ;
    ;               shift and go to state 38


state 6

    (6) instruction -> { . instructions }
    (1) instructions -> . instruction
    (2) instructions -> . instructions instruction
    (3) instruction -> . RETURN right_hand_side_expression ;
    (4) instruction -> . CONTINUE ;
    (5) instruction -> . BREAK ;
    (6) instruction -> . { instructions }
    (7) instruction -> . print_instruction
    (8) instruction -> . full_line_instruction
    (9) instruction -> . for_instruction
    (10) instruction -> . while_instruction
    (11) instruction -> . if_instruction
    (18) print_instruction -> . PRINT printables ;
    (42) full_line_instruction -> . ( full_line_instruction )
    (43) full_line_instruction -> . assign_instruction
    (15) for_instruction -> . FOR ID = id_int : id_int instruction
    (14) while_instruction -> . WHILE ( relation_expression ) instruction
    (12) if_instruction -> . IF ( relation_expression ) instruction
    (13) if_instruction -> . IF ( relation_expression ) instruction ELSE instruction
    (44) assign_instruction -> . ID DIVIDEASSIGN right_hand_side_expression ;
    (45) assign_instruction -> . ID TIMESASSIGN right_hand_side_expression ;
    (46) assign_instruction -> . ID MINUSASSIGN right_hand_side_expression ;
    (47) assign_instruction -> . ID PLUSASSIGN right_hand_side_expression ;
    (48) assign_instruction -> . ID = right_hand_side_expression ;
    (49) assign_instruction -> . matrix_ref DIVIDEASSIGN right_hand_side_expression ;
    (50) assign_instruction -> . matrix_ref TIMESASSIGN right_hand_side_expression ;
    (51) assign_instruction -> . matrix_ref MINUSASSIGN right_hand_side_expression ;
    (52) assign_instruction -> . matrix_ref PLUSASSIGN right_hand_side_expression ;
    (53) assign_instruction -> . matrix_ref = right_hand_side_expression ;
    (54) matrix_ref -> . ID [ variables ]
    RETURN          shift and go to state 3
    CONTINUE        shift and go to state 4
    BREAK           shift and go to state 5
    {               shift and go to state 6
    PRINT           shift and go to state 12
    (               shift and go to state 13
    FOR             shift and go to state 15
    WHILE           shift and go to state 17
    IF              shift and go to state 18
    ID              shift and go to state 16

    instructions                   shift and go to state 39
    instruction                    shift and go to state 2
    print_instruction              shift and go to state 7
    full_line_instruction          shift and go to state 8
    for_instruction                shift and go to state 9
    while_instruction              shift and go to state 10
    if_instruction                 shift and go to state 11
    assign_instruction             shift and go to state 14
    matrix_ref                     shift and go to state 19

state 7

    (7) instruction -> print_instruction .
    RETURN          reduce using rule 7 (instruction -> print_instruction .)
    CONTINUE        reduce using rule 7 (instruction -> print_instruction .)
    BREAK           reduce using rule 7 (instruction -> print_instruction .)
    {               reduce using rule 7 (instruction -> print_instruction .)
    PRINT           reduce using rule 7 (instruction -> print_instruction .)
    (               reduce using rule 7 (instruction -> print_instruction .)
    FOR             reduce using rule 7 (instruction -> print_instruction .)
    WHILE           reduce using rule 7 (instruction -> print_instruction .)
    IF              reduce using rule 7 (instruction -> print_instruction .)
    ID              reduce using rule 7 (instruction -> print_instruction .)
    $end            reduce using rule 7 (instruction -> print_instruction .)
    }               reduce using rule 7 (instruction -> print_instruction .)
    ELSE            reduce using rule 7 (instruction -> print_instruction .)


state 8

    (8) instruction -> full_line_instruction .
    RETURN          reduce using rule 8 (instruction -> full_line_instruction .)
    CONTINUE        reduce using rule 8 (instruction -> full_line_instruction .)
    BREAK           reduce using rule 8 (instruction -> full_line_instruction .)
    {               reduce using rule 8 (instruction -> full_line_instruction .)
    PRINT           reduce using rule 8 (instruction -> full_line_instruction .)
    (               reduce using rule 8 (instruction -> full_line_instruction .)
    FOR             reduce using rule 8 (instruction -> full_line_instruction .)
    WHILE           reduce using rule 8 (instruction -> full_line_instruction .)
    IF              reduce using rule 8 (instruction -> full_line_instruction .)
    ID              reduce using rule 8 (instruction -> full_line_instruction .)
    $end            reduce using rule 8 (instruction -> full_line_instruction .)
    }               reduce using rule 8 (instruction -> full_line_instruction .)
    ELSE            reduce using rule 8 (instruction -> full_line_instruction .)


state 9

    (9) instruction -> for_instruction .
    RETURN          reduce using rule 9 (instruction -> for_instruction .)
    CONTINUE        reduce using rule 9 (instruction -> for_instruction .)
    BREAK           reduce using rule 9 (instruction -> for_instruction .)
    {               reduce using rule 9 (instruction -> for_instruction .)
    PRINT           reduce using rule 9 (instruction -> for_instruction .)
    (               reduce using rule 9 (instruction -> for_instruction .)
    FOR             reduce using rule 9 (instruction -> for_instruction .)
    WHILE           reduce using rule 9 (instruction -> for_instruction .)
    IF              reduce using rule 9 (instruction -> for_instruction .)
    ID              reduce using rule 9 (instruction -> for_instruction .)
    $end            reduce using rule 9 (instruction -> for_instruction .)
    }               reduce using rule 9 (instruction -> for_instruction .)
    ELSE            reduce using rule 9 (instruction -> for_instruction .)


state 10

    (10) instruction -> while_instruction .
    RETURN          reduce using rule 10 (instruction -> while_instruction .)
    CONTINUE        reduce using rule 10 (instruction -> while_instruction .)
    BREAK           reduce using rule 10 (instruction -> while_instruction .)
    {               reduce using rule 10 (instruction -> while_instruction .)
    PRINT           reduce using rule 10 (instruction -> while_instruction .)
    (               reduce using rule 10 (instruction -> while_instruction .)
    FOR             reduce using rule 10 (instruction -> while_instruction .)
    WHILE           reduce using rule 10 (instruction -> while_instruction .)
    IF              reduce using rule 10 (instruction -> while_instruction .)
    ID              reduce using rule 10 (instruction -> while_instruction .)
    $end            reduce using rule 10 (instruction -> while_instruction .)
    }               reduce using rule 10 (instruction -> while_instruction .)
    ELSE            reduce using rule 10 (instruction -> while_instruction .)


state 11

    (11) instruction -> if_instruction .
    RETURN          reduce using rule 11 (instruction -> if_instruction .)
    CONTINUE        reduce using rule 11 (instruction -> if_instruction .)
    BREAK           reduce using rule 11 (instruction -> if_instruction .)
    {               reduce using rule 11 (instruction -> if_instruction .)
    PRINT           reduce using rule 11 (instruction -> if_instruction .)
    (               reduce using rule 11 (instruction -> if_instruction .)
    FOR             reduce using rule 11 (instruction -> if_instruction .)
    WHILE           reduce using rule 11 (instruction -> if_instruction .)
    IF              reduce using rule 11 (instruction -> if_instruction .)
    ID              reduce using rule 11 (instruction -> if_instruction .)
    $end            reduce using rule 11 (instruction -> if_instruction .)
    }               reduce using rule 11 (instruction -> if_instruction .)
    ELSE            reduce using rule 11 (instruction -> if_instruction .)


state 12

    (18) print_instruction -> PRINT . printables ;
    (19) printables -> . matrix_ref
    (20) printables -> . value
    (21) printables -> . printables , value
    (54) matrix_ref -> . ID [ variables ]
    (22) value -> . STRING
    (23) value -> . ID
    (24) value -> . FLOATNUM
    (25) value -> . INTNUM
    ID              shift and go to state 43
    STRING          shift and go to state 30
    FLOATNUM        shift and go to state 32
    INTNUM          shift and go to state 33

    printables                     shift and go to state 40
    matrix_ref                     shift and go to state 41
    value                          shift and go to state 42

state 13

    (42) full_line_instruction -> ( . full_line_instruction )
    (42) full_line_instruction -> . ( full_line_instruction )
    (43) full_line_instruction -> . assign_instruction
    (44) assign_instruction -> . ID DIVIDEASSIGN right_hand_side_expression ;
    (45) assign_instruction -> . ID TIMESASSIGN right_hand_side_expression ;
    (46) assign_instruction -> . ID MINUSASSIGN right_hand_side_expression ;
    (47) assign_instruction -> . ID PLUSASSIGN right_hand_side_expression ;
    (48) assign_instruction -> . ID = right_hand_side_expression ;
    (49) assign_instruction -> . matrix_ref DIVIDEASSIGN right_hand_side_expression ;
    (50) assign_instruction -> . matrix_ref TIMESASSIGN right_hand_side_expression ;
    (51) assign_instruction -> . matrix_ref MINUSASSIGN right_hand_side_expression ;
    (52) assign_instruction -> . matrix_ref PLUSASSIGN right_hand_side_expression ;
    (53) assign_instruction -> . matrix_ref = right_hand_side_expression ;
    (54) matrix_ref -> . ID [ variables ]
    (               shift and go to state 13
    ID              shift and go to state 16

    full_line_instruction          shift and go to state 44
    assign_instruction             shift and go to state 14
    matrix_ref                     shift and go to state 19

state 14

    (43) full_line_instruction -> assign_instruction .
    RETURN          reduce using rule 43 (full_line_instruction -> assign_instruction .)
    CONTINUE        reduce using rule 43 (full_line_instruction -> assign_instruction .)
    BREAK           reduce using rule 43 (full_line_instruction -> assign_instruction .)
    {               reduce using rule 43 (full_line_instruction -> assign_instruction .)
    PRINT           reduce using rule 43 (full_line_instruction -> assign_instruction .)
    (               reduce using rule 43 (full_line_instruction -> assign_instruction .)
    FOR             reduce using rule 43 (full_line_instruction -> assign_instruction .)
    WHILE           reduce using rule 43 (full_line_instruction -> assign_instruction .)
    IF              reduce using rule 43 (full_line_instruction -> assign_instruction .)
    ID              reduce using rule 43 (full_line_instruction -> assign_instruction .)
    $end            reduce using rule 43 (full_line_instruction -> assign_instruction .)
    }               reduce using rule 43 (full_line_instruction -> assign_instruction .)
    )               reduce using rule 43 (full_line_instruction -> assign_instruction .)
    ELSE            reduce using rule 43 (full_line_instruction -> assign_instruction .)


state 15

    (15) for_instruction -> FOR . ID = id_int : id_int instruction
    ID              shift and go to state 45


state 16

    (44) assign_instruction -> ID . DIVIDEASSIGN right_hand_side_expression ;
    (45) assign_instruction -> ID . TIMESASSIGN right_hand_side_expression ;
    (46) assign_instruction -> ID . MINUSASSIGN right_hand_side_expression ;
    (47) assign_instruction -> ID . PLUSASSIGN right_hand_side_expression ;
    (48) assign_instruction -> ID . = right_hand_side_expression ;
    (54) matrix_ref -> ID . [ variables ]
    DIVIDEASSIGN    shift and go to state 46
    TIMESASSIGN     shift and go to state 47
    MINUSASSIGN     shift and go to state 48
    PLUSASSIGN      shift and go to state 49
    =               shift and go to state 50
    [               shift and go to state 51


state 17

    (14) while_instruction -> WHILE . ( relation_expression ) instruction
    (               shift and go to state 52


state 18

    (12) if_instruction -> IF . ( relation_expression ) instruction
    (13) if_instruction -> IF . ( relation_expression ) instruction ELSE instruction
    (               shift and go to state 53


state 19

    (49) assign_instruction -> matrix_ref . DIVIDEASSIGN right_hand_side_expression ;
    (50) assign_instruction -> matrix_ref . TIMESASSIGN right_hand_side_expression ;
    (51) assign_instruction -> matrix_ref . MINUSASSIGN right_hand_side_expression ;
    (52) assign_instruction -> matrix_ref . PLUSASSIGN right_hand_side_expression ;
    (53) assign_instruction -> matrix_ref . = right_hand_side_expression ;
    DIVIDEASSIGN    shift and go to state 54
    TIMESASSIGN     shift and go to state 55
    MINUSASSIGN     shift and go to state 56
    PLUSASSIGN      shift and go to state 57
    =               shift and go to state 58


state 20

    (2) instructions -> instructions instruction .
    RETURN          reduce using rule 2 (instructions -> instructions instruction .)
    CONTINUE        reduce using rule 2 (instructions -> instructions instruction .)
    BREAK           reduce using rule 2 (instructions -> instructions instruction .)
    {               reduce using rule 2 (instructions -> instructions instruction .)
    PRINT           reduce using rule 2 (instructions -> instructions instruction .)
    (               reduce using rule 2 (instructions -> instructions instruction .)
    FOR             reduce using rule 2 (instructions -> instructions instruction .)
    WHILE           reduce using rule 2 (instructions -> instructions instruction .)
    IF              reduce using rule 2 (instructions -> instructions instruction .)
    ID              reduce using rule 2 (instructions -> instructions instruction .)
    $end            reduce using rule 2 (instructions -> instructions instruction .)
    }               reduce using rule 2 (instructions -> instructions instruction .)


state 21

    (3) instruction -> RETURN right_hand_side_expression . ;
    (27) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (28) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (29) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . '
    (55) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (56) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (57) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (58) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (59) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
    ;               shift and go to state 59
    DOTDIVIDE       shift and go to state 60
    DOTTIMES        shift and go to state 61
    DOTMINUS        shift and go to state 62
    DOTPLUS         shift and go to state 63
    /               shift and go to state 64
    *               shift and go to state 65
    -               shift and go to state 66
    +               shift and go to state 67
    '               shift and go to state 68
    NE              shift and go to state 69
    EQ              shift and go to state 70
    GE              shift and go to state 71
    LE              shift and go to state 72
    GT              shift and go to state 73
    LT              shift and go to state 74


state 22

    (26) right_hand_side_expression -> vector .
    ;               reduce using rule 26 (right_hand_side_expression -> vector .)
    DOTDIVIDE       reduce using rule 26 (right_hand_side_expression -> vector .)
    DOTTIMES        reduce using rule 26 (right_hand_side_expression -> vector .)
    DOTMINUS        reduce using rule 26 (right_hand_side_expression -> vector .)
    DOTPLUS         reduce using rule 26 (right_hand_side_expression -> vector .)
    /               reduce using rule 26 (right_hand_side_expression -> vector .)
    *               reduce using rule 26 (right_hand_side_expression -> vector .)
    -               reduce using rule 26 (right_hand_side_expression -> vector .)
    +               reduce using rule 26 (right_hand_side_expression -> vector .)
    '               reduce using rule 26 (right_hand_side_expression -> vector .)
    NE              reduce using rule 26 (right_hand_side_expression -> vector .)
    EQ              reduce using rule 26 (right_hand_side_expression -> vector .)
    GE              reduce using rule 26 (right_hand_side_expression -> vector .)
    LE              reduce using rule 26 (right_hand_side_expression -> vector .)
    GT              reduce using rule 26 (right_hand_side_expression -> vector .)
    LT              reduce using rule 26 (right_hand_side_expression -> vector .)
    )               reduce using rule 26 (right_hand_side_expression -> vector .)
    ]               reduce using rule 26 (right_hand_side_expression -> vector .)
    ,               reduce using rule 26 (right_hand_side_expression -> vector .)


state 23

    (41) unary -> - . right_hand_side_expression
    (26) right_hand_side_expression -> . vector
    (27) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (28) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (29) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression '
    (36) right_hand_side_expression -> . value
    (37) right_hand_side_expression -> . matrix_functions
    (38) right_hand_side_expression -> . ( right_hand_side_expression )
    (39) right_hand_side_expression -> . relation_expression
    (40) right_hand_side_expression -> . unary
    (64) vector -> . [ ]
    (65) vector -> . [ variables ]
    (22) value -> . STRING
    (23) value -> . ID
    (24) value -> . FLOATNUM
    (25) value -> . INTNUM
    (61) matrix_functions -> . EYE ( id_int )
    (62) matrix_functions -> . ONES ( id_int )
    (63) matrix_functions -> . ZEROS ( id_int )
    (55) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (56) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (57) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (58) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (59) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (41) unary -> . - right_hand_side_expression
    (               shift and go to state 26
    [               shift and go to state 29
    STRING          shift and go to state 30
    ID              shift and go to state 31
    FLOATNUM        shift and go to state 32
    INTNUM          shift and go to state 33
    EYE             shift and go to state 34
    ONES            shift and go to state 35
    ZEROS           shift and go to state 36
    -               shift and go to state 23

    right_hand_side_expression     shift and go to state 75
    vector                         shift and go to state 22
    value                          shift and go to state 24
    matrix_functions               shift and go to state 25
    relation_expression            shift and go to state 27
    unary                          shift and go to state 28

state 24

    (36) right_hand_side_expression -> value .
    ;               reduce using rule 36 (right_hand_side_expression -> value .)
    DOTDIVIDE       reduce using rule 36 (right_hand_side_expression -> value .)
    DOTTIMES        reduce using rule 36 (right_hand_side_expression -> value .)
    DOTMINUS        reduce using rule 36 (right_hand_side_expression -> value .)
    DOTPLUS         reduce using rule 36 (right_hand_side_expression -> value .)
    /               reduce using rule 36 (right_hand_side_expression -> value .)
    *               reduce using rule 36 (right_hand_side_expression -> value .)
    -               reduce using rule 36 (right_hand_side_expression -> value .)
    +               reduce using rule 36 (right_hand_side_expression -> value .)
    '               reduce using rule 36 (right_hand_side_expression -> value .)
    NE              reduce using rule 36 (right_hand_side_expression -> value .)
    EQ              reduce using rule 36 (right_hand_side_expression -> value .)
    GE              reduce using rule 36 (right_hand_side_expression -> value .)
    LE              reduce using rule 36 (right_hand_side_expression -> value .)
    GT              reduce using rule 36 (right_hand_side_expression -> value .)
    LT              reduce using rule 36 (right_hand_side_expression -> value .)
    )               reduce using rule 36 (right_hand_side_expression -> value .)
    ]               reduce using rule 36 (right_hand_side_expression -> value .)
    ,               reduce using rule 36 (right_hand_side_expression -> value .)


state 25

    (37) right_hand_side_expression -> matrix_functions .
    ;               reduce using rule 37 (right_hand_side_expression -> matrix_functions .)
    DOTDIVIDE       reduce using rule 37 (right_hand_side_expression -> matrix_functions .)
    DOTTIMES        reduce using rule 37 (right_hand_side_expression -> matrix_functions .)
    DOTMINUS        reduce using rule 37 (right_hand_side_expression -> matrix_functions .)
    DOTPLUS         reduce using rule 37 (right_hand_side_expression -> matrix_functions .)
    /               reduce using rule 37 (right_hand_side_expression -> matrix_functions .)
    *               reduce using rule 37 (right_hand_side_expression -> matrix_functions .)
    -               reduce using rule 37 (right_hand_side_expression -> matrix_functions .)
    +               reduce using rule 37 (right_hand_side_expression -> matrix_functions .)
    '               reduce using rule 37 (right_hand_side_expression -> matrix_functions .)
    NE              reduce using rule 37 (right_hand_side_expression -> matrix_functions .)
    EQ              reduce using rule 37 (right_hand_side_expression -> matrix_functions .)
    GE              reduce using rule 37 (right_hand_side_expression -> matrix_functions .)
    LE              reduce using rule 37 (right_hand_side_expression -> matrix_functions .)
    GT              reduce using rule 37 (right_hand_side_expression -> matrix_functions .)
    LT              reduce using rule 37 (right_hand_side_expression -> matrix_functions .)
    )               reduce using rule 37 (right_hand_side_expression -> matrix_functions .)
    ]               reduce using rule 37 (right_hand_side_expression -> matrix_functions .)
    ,               reduce using rule 37 (right_hand_side_expression -> matrix_functions .)


state 26

    (38) right_hand_side_expression -> ( . right_hand_side_expression )
    (26) right_hand_side_expression -> . vector
    (27) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (28) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (29) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression '
    (36) right_hand_side_expression -> . value
    (37) right_hand_side_expression -> . matrix_functions
    (38) right_hand_side_expression -> . ( right_hand_side_expression )
    (39) right_hand_side_expression -> . relation_expression
    (40) right_hand_side_expression -> . unary
    (64) vector -> . [ ]
    (65) vector -> . [ variables ]
    (22) value -> . STRING
    (23) value -> . ID
    (24) value -> . FLOATNUM
    (25) value -> . INTNUM
    (61) matrix_functions -> . EYE ( id_int )
    (62) matrix_functions -> . ONES ( id_int )
    (63) matrix_functions -> . ZEROS ( id_int )
    (55) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (56) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (57) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (58) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (59) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (41) unary -> . - right_hand_side_expression
    (               shift and go to state 26
    [               shift and go to state 29
    STRING          shift and go to state 30
    ID              shift and go to state 31
    FLOATNUM        shift and go to state 32
    INTNUM          shift and go to state 33
    EYE             shift and go to state 34
    ONES            shift and go to state 35
    ZEROS           shift and go to state 36
    -               shift and go to state 23

    right_hand_side_expression     shift and go to state 76
    vector                         shift and go to state 22
    value                          shift and go to state 24
    matrix_functions               shift and go to state 25
    relation_expression            shift and go to state 27
    unary                          shift and go to state 28

state 27

    (39) right_hand_side_expression -> relation_expression .
    ;               reduce using rule 39 (right_hand_side_expression -> relation_expression .)
    DOTDIVIDE       reduce using rule 39 (right_hand_side_expression -> relation_expression .)
    DOTTIMES        reduce using rule 39 (right_hand_side_expression -> relation_expression .)
    DOTMINUS        reduce using rule 39 (right_hand_side_expression -> relation_expression .)
    DOTPLUS         reduce using rule 39 (right_hand_side_expression -> relation_expression .)
    /               reduce using rule 39 (right_hand_side_expression -> relation_expression .)
    *               reduce using rule 39 (right_hand_side_expression -> relation_expression .)
    -               reduce using rule 39 (right_hand_side_expression -> relation_expression .)
    +               reduce using rule 39 (right_hand_side_expression -> relation_expression .)
    '               reduce using rule 39 (right_hand_side_expression -> relation_expression .)
    NE              reduce using rule 39 (right_hand_side_expression -> relation_expression .)
    EQ              reduce using rule 39 (right_hand_side_expression -> relation_expression .)
    GE              reduce using rule 39 (right_hand_side_expression -> relation_expression .)
    LE              reduce using rule 39 (right_hand_side_expression -> relation_expression .)
    GT              reduce using rule 39 (right_hand_side_expression -> relation_expression .)
    LT              reduce using rule 39 (right_hand_side_expression -> relation_expression .)
    )               reduce using rule 39 (right_hand_side_expression -> relation_expression .)
    ]               reduce using rule 39 (right_hand_side_expression -> relation_expression .)
    ,               reduce using rule 39 (right_hand_side_expression -> relation_expression .)


state 28

    (40) right_hand_side_expression -> unary .
    ;               reduce using rule 40 (right_hand_side_expression -> unary .)
    DOTDIVIDE       reduce using rule 40 (right_hand_side_expression -> unary .)
    DOTTIMES        reduce using rule 40 (right_hand_side_expression -> unary .)
    DOTMINUS        reduce using rule 40 (right_hand_side_expression -> unary .)
    DOTPLUS         reduce using rule 40 (right_hand_side_expression -> unary .)
    /               reduce using rule 40 (right_hand_side_expression -> unary .)
    *               reduce using rule 40 (right_hand_side_expression -> unary .)
    -               reduce using rule 40 (right_hand_side_expression -> unary .)
    +               reduce using rule 40 (right_hand_side_expression -> unary .)
    '               reduce using rule 40 (right_hand_side_expression -> unary .)
    NE              reduce using rule 40 (right_hand_side_expression -> unary .)
    EQ              reduce using rule 40 (right_hand_side_expression -> unary .)
    GE              reduce using rule 40 (right_hand_side_expression -> unary .)
    LE              reduce using rule 40 (right_hand_side_expression -> unary .)
    GT              reduce using rule 40 (right_hand_side_expression -> unary .)
    LT              reduce using rule 40 (right_hand_side_expression -> unary .)
    )               reduce using rule 40 (right_hand_side_expression -> unary .)
    ]               reduce using rule 40 (right_hand_side_expression -> unary .)
    ,               reduce using rule 40 (right_hand_side_expression -> unary .)


state 29

    (64) vector -> [ . ]
    (65) vector -> [ . variables ]
    (66) variables -> . right_hand_side_expression
    (67) variables -> . variables , right_hand_side_expression
    (26) right_hand_side_expression -> . vector
    (27) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (28) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (29) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression '
    (36) right_hand_side_expression -> . value
    (37) right_hand_side_expression -> . matrix_functions
    (38) right_hand_side_expression -> . ( right_hand_side_expression )
    (39) right_hand_side_expression -> . relation_expression
    (40) right_hand_side_expression -> . unary
    (64) vector -> . [ ]
    (65) vector -> . [ variables ]
    (22) value -> . STRING
    (23) value -> . ID
    (24) value -> . FLOATNUM
    (25) value -> . INTNUM
    (61) matrix_functions -> . EYE ( id_int )
    (62) matrix_functions -> . ONES ( id_int )
    (63) matrix_functions -> . ZEROS ( id_int )
    (55) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (56) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (57) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (58) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (59) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (41) unary -> . - right_hand_side_expression
    ]               shift and go to state 77
    (               shift and go to state 26
    [               shift and go to state 29
    STRING          shift and go to state 30
    ID              shift and go to state 31
    FLOATNUM        shift and go to state 32
    INTNUM          shift and go to state 33
    EYE             shift and go to state 34
    ONES            shift and go to state 35
    ZEROS           shift and go to state 36
    -               shift and go to state 23

    variables                      shift and go to state 78
    right_hand_side_expression     shift and go to state 79
    vector                         shift and go to state 22
    value                          shift and go to state 24
    matrix_functions               shift and go to state 25
    relation_expression            shift and go to state 27
    unary                          shift and go to state 28

state 30

    (22) value -> STRING .
    ;               reduce using rule 22 (value -> STRING .)
    DOTDIVIDE       reduce using rule 22 (value -> STRING .)
    DOTTIMES        reduce using rule 22 (value -> STRING .)
    DOTMINUS        reduce using rule 22 (value -> STRING .)
    DOTPLUS         reduce using rule 22 (value -> STRING .)
    /               reduce using rule 22 (value -> STRING .)
    *               reduce using rule 22 (value -> STRING .)
    -               reduce using rule 22 (value -> STRING .)
    +               reduce using rule 22 (value -> STRING .)
    '               reduce using rule 22 (value -> STRING .)
    NE              reduce using rule 22 (value -> STRING .)
    EQ              reduce using rule 22 (value -> STRING .)
    GE              reduce using rule 22 (value -> STRING .)
    LE              reduce using rule 22 (value -> STRING .)
    GT              reduce using rule 22 (value -> STRING .)
    LT              reduce using rule 22 (value -> STRING .)
    ,               reduce using rule 22 (value -> STRING .)
    )               reduce using rule 22 (value -> STRING .)
    ]               reduce using rule 22 (value -> STRING .)


state 31

    (23) value -> ID .
    ;               reduce using rule 23 (value -> ID .)
    DOTDIVIDE       reduce using rule 23 (value -> ID .)
    DOTTIMES        reduce using rule 23 (value -> ID .)
    DOTMINUS        reduce using rule 23 (value -> ID .)
    DOTPLUS         reduce using rule 23 (value -> ID .)
    /               reduce using rule 23 (value -> ID .)
    *               reduce using rule 23 (value -> ID .)
    -               reduce using rule 23 (value -> ID .)
    +               reduce using rule 23 (value -> ID .)
    '               reduce using rule 23 (value -> ID .)
    NE              reduce using rule 23 (value -> ID .)
    EQ              reduce using rule 23 (value -> ID .)
    GE              reduce using rule 23 (value -> ID .)
    LE              reduce using rule 23 (value -> ID .)
    GT              reduce using rule 23 (value -> ID .)
    LT              reduce using rule 23 (value -> ID .)
    )               reduce using rule 23 (value -> ID .)
    ]               reduce using rule 23 (value -> ID .)
    ,               reduce using rule 23 (value -> ID .)


state 32

    (24) value -> FLOATNUM .
    ;               reduce using rule 24 (value -> FLOATNUM .)
    DOTDIVIDE       reduce using rule 24 (value -> FLOATNUM .)
    DOTTIMES        reduce using rule 24 (value -> FLOATNUM .)
    DOTMINUS        reduce using rule 24 (value -> FLOATNUM .)
    DOTPLUS         reduce using rule 24 (value -> FLOATNUM .)
    /               reduce using rule 24 (value -> FLOATNUM .)
    *               reduce using rule 24 (value -> FLOATNUM .)
    -               reduce using rule 24 (value -> FLOATNUM .)
    +               reduce using rule 24 (value -> FLOATNUM .)
    '               reduce using rule 24 (value -> FLOATNUM .)
    NE              reduce using rule 24 (value -> FLOATNUM .)
    EQ              reduce using rule 24 (value -> FLOATNUM .)
    GE              reduce using rule 24 (value -> FLOATNUM .)
    LE              reduce using rule 24 (value -> FLOATNUM .)
    GT              reduce using rule 24 (value -> FLOATNUM .)
    LT              reduce using rule 24 (value -> FLOATNUM .)
    ,               reduce using rule 24 (value -> FLOATNUM .)
    )               reduce using rule 24 (value -> FLOATNUM .)
    ]               reduce using rule 24 (value -> FLOATNUM .)


state 33

    (25) value -> INTNUM .
    ;               reduce using rule 25 (value -> INTNUM .)
    DOTDIVIDE       reduce using rule 25 (value -> INTNUM .)
    DOTTIMES        reduce using rule 25 (value -> INTNUM .)
    DOTMINUS        reduce using rule 25 (value -> INTNUM .)
    DOTPLUS         reduce using rule 25 (value -> INTNUM .)
    /               reduce using rule 25 (value -> INTNUM .)
    *               reduce using rule 25 (value -> INTNUM .)
    -               reduce using rule 25 (value -> INTNUM .)
    +               reduce using rule 25 (value -> INTNUM .)
    '               reduce using rule 25 (value -> INTNUM .)
    NE              reduce using rule 25 (value -> INTNUM .)
    EQ              reduce using rule 25 (value -> INTNUM .)
    GE              reduce using rule 25 (value -> INTNUM .)
    LE              reduce using rule 25 (value -> INTNUM .)
    GT              reduce using rule 25 (value -> INTNUM .)
    LT              reduce using rule 25 (value -> INTNUM .)
    ,               reduce using rule 25 (value -> INTNUM .)
    )               reduce using rule 25 (value -> INTNUM .)
    ]               reduce using rule 25 (value -> INTNUM .)


state 34

    (61) matrix_functions -> EYE . ( id_int )
    (               shift and go to state 80


state 35

    (62) matrix_functions -> ONES . ( id_int )
    (               shift and go to state 81


state 36

    (63) matrix_functions -> ZEROS . ( id_int )
    (               shift and go to state 82


state 37

    (4) instruction -> CONTINUE ; .
    RETURN          reduce using rule 4 (instruction -> CONTINUE ; .)
    CONTINUE        reduce using rule 4 (instruction -> CONTINUE ; .)
    BREAK           reduce using rule 4 (instruction -> CONTINUE ; .)
    {               reduce using rule 4 (instruction -> CONTINUE ; .)
    PRINT           reduce using rule 4 (instruction -> CONTINUE ; .)
    (               reduce using rule 4 (instruction -> CONTINUE ; .)
    FOR             reduce using rule 4 (instruction -> CONTINUE ; .)
    WHILE           reduce using rule 4 (instruction -> CONTINUE ; .)
    IF              reduce using rule 4 (instruction -> CONTINUE ; .)
    ID              reduce using rule 4 (instruction -> CONTINUE ; .)
    $end            reduce using rule 4 (instruction -> CONTINUE ; .)
    }               reduce using rule 4 (instruction -> CONTINUE ; .)
    ELSE            reduce using rule 4 (instruction -> CONTINUE ; .)


state 38

    (5) instruction -> BREAK ; .
    RETURN          reduce using rule 5 (instruction -> BREAK ; .)
    CONTINUE        reduce using rule 5 (instruction -> BREAK ; .)
    BREAK           reduce using rule 5 (instruction -> BREAK ; .)
    {               reduce using rule 5 (instruction -> BREAK ; .)
    PRINT           reduce using rule 5 (instruction -> BREAK ; .)
    (               reduce using rule 5 (instruction -> BREAK ; .)
    FOR             reduce using rule 5 (instruction -> BREAK ; .)
    WHILE           reduce using rule 5 (instruction -> BREAK ; .)
    IF              reduce using rule 5 (instruction -> BREAK ; .)
    ID              reduce using rule 5 (instruction -> BREAK ; .)
    $end            reduce using rule 5 (instruction -> BREAK ; .)
    }               reduce using rule 5 (instruction -> BREAK ; .)
    ELSE            reduce using rule 5 (instruction -> BREAK ; .)


state 39

    (6) instruction -> { instructions . }
    (2) instructions -> instructions . instruction
    (3) instruction -> . RETURN right_hand_side_expression ;
    (4) instruction -> . CONTINUE ;
    (5) instruction -> . BREAK ;
    (6) instruction -> . { instructions }
    (7) instruction -> . print_instruction
    (8) instruction -> . full_line_instruction
    (9) instruction -> . for_instruction
    (10) instruction -> . while_instruction
    (11) instruction -> . if_instruction
    (18) print_instruction -> . PRINT printables ;
    (42) full_line_instruction -> . ( full_line_instruction )
    (43) full_line_instruction -> . assign_instruction
    (15) for_instruction -> . FOR ID = id_int : id_int instruction
    (14) while_instruction -> . WHILE ( relation_expression ) instruction
    (12) if_instruction -> . IF ( relation_expression ) instruction
    (13) if_instruction -> . IF ( relation_expression ) instruction ELSE instruction
    (44) assign_instruction -> . ID DIVIDEASSIGN right_hand_side_expression ;
    (45) assign_instruction -> . ID TIMESASSIGN right_hand_side_expression ;
    (46) assign_instruction -> . ID MINUSASSIGN right_hand_side_expression ;
    (47) assign_instruction -> . ID PLUSASSIGN right_hand_side_expression ;
    (48) assign_instruction -> . ID = right_hand_side_expression ;
    (49) assign_instruction -> . matrix_ref DIVIDEASSIGN right_hand_side_expression ;
    (50) assign_instruction -> . matrix_ref TIMESASSIGN right_hand_side_expression ;
    (51) assign_instruction -> . matrix_ref MINUSASSIGN right_hand_side_expression ;
    (52) assign_instruction -> . matrix_ref PLUSASSIGN right_hand_side_expression ;
    (53) assign_instruction -> . matrix_ref = right_hand_side_expression ;
    (54) matrix_ref -> . ID [ variables ]
    }               shift and go to state 83
    RETURN          shift and go to state 3
    CONTINUE        shift and go to state 4
    BREAK           shift and go to state 5
    {               shift and go to state 6
    PRINT           shift and go to state 12
    (               shift and go to state 13
    FOR             shift and go to state 15
    WHILE           shift and go to state 17
    IF              shift and go to state 18
    ID              shift and go to state 16

    instruction                    shift and go to state 20
    print_instruction              shift and go to state 7
    full_line_instruction          shift and go to state 8
    for_instruction                shift and go to state 9
    while_instruction              shift and go to state 10
    if_instruction                 shift and go to state 11
    assign_instruction             shift and go to state 14
    matrix_ref                     shift and go to state 19

state 40

    (18) print_instruction -> PRINT printables . ;
    (21) printables -> printables . , value
    ;               shift and go to state 84
    ,               shift and go to state 85


state 41

    (19) printables -> matrix_ref .
    ;               reduce using rule 19 (printables -> matrix_ref .)
    ,               reduce using rule 19 (printables -> matrix_ref .)


state 42

    (20) printables -> value .
    ;               reduce using rule 20 (printables -> value .)
    ,               reduce using rule 20 (printables -> value .)


state 43

    (54) matrix_ref -> ID . [ variables ]
    (23) value -> ID .
    [               shift and go to state 51
    ;               reduce using rule 23 (value -> ID .)
    ,               reduce using rule 23 (value -> ID .)


state 44

    (42) full_line_instruction -> ( full_line_instruction . )
    )               shift and go to state 86


state 45

    (15) for_instruction -> FOR ID . = id_int : id_int instruction
    =               shift and go to state 87


state 46

    (44) assign_instruction -> ID DIVIDEASSIGN . right_hand_side_expression ;
    (26) right_hand_side_expression -> . vector
    (27) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (28) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (29) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression '
    (36) right_hand_side_expression -> . value
    (37) right_hand_side_expression -> . matrix_functions
    (38) right_hand_side_expression -> . ( right_hand_side_expression )
    (39) right_hand_side_expression -> . relation_expression
    (40) right_hand_side_expression -> . unary
    (64) vector -> . [ ]
    (65) vector -> . [ variables ]
    (22) value -> . STRING
    (23) value -> . ID
    (24) value -> . FLOATNUM
    (25) value -> . INTNUM
    (61) matrix_functions -> . EYE ( id_int )
    (62) matrix_functions -> . ONES ( id_int )
    (63) matrix_functions -> . ZEROS ( id_int )
    (55) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (56) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (57) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (58) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (59) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (41) unary -> . - right_hand_side_expression
    (               shift and go to state 26
    [               shift and go to state 29
    STRING          shift and go to state 30
    ID              shift and go to state 31
    FLOATNUM        shift and go to state 32
    INTNUM          shift and go to state 33
    EYE             shift and go to state 34
    ONES            shift and go to state 35
    ZEROS           shift and go to state 36
    -               shift and go to state 23

    right_hand_side_expression     shift and go to state 88
    vector                         shift and go to state 22
    value                          shift and go to state 24
    matrix_functions               shift and go to state 25
    relation_expression            shift and go to state 27
    unary                          shift and go to state 28

state 47

    (45) assign_instruction -> ID TIMESASSIGN . right_hand_side_expression ;
    (26) right_hand_side_expression -> . vector
    (27) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (28) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (29) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression '
    (36) right_hand_side_expression -> . value
    (37) right_hand_side_expression -> . matrix_functions
    (38) right_hand_side_expression -> . ( right_hand_side_expression )
    (39) right_hand_side_expression -> . relation_expression
    (40) right_hand_side_expression -> . unary
    (64) vector -> . [ ]
    (65) vector -> . [ variables ]
    (22) value -> . STRING
    (23) value -> . ID
    (24) value -> . FLOATNUM
    (25) value -> . INTNUM
    (61) matrix_functions -> . EYE ( id_int )
    (62) matrix_functions -> . ONES ( id_int )
    (63) matrix_functions -> . ZEROS ( id_int )
    (55) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (56) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (57) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (58) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (59) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (41) unary -> . - right_hand_side_expression
    (               shift and go to state 26
    [               shift and go to state 29
    STRING          shift and go to state 30
    ID              shift and go to state 31
    FLOATNUM        shift and go to state 32
    INTNUM          shift and go to state 33
    EYE             shift and go to state 34
    ONES            shift and go to state 35
    ZEROS           shift and go to state 36
    -               shift and go to state 23

    right_hand_side_expression     shift and go to state 89
    vector                         shift and go to state 22
    value                          shift and go to state 24
    matrix_functions               shift and go to state 25
    relation_expression            shift and go to state 27
    unary                          shift and go to state 28

state 48

    (46) assign_instruction -> ID MINUSASSIGN . right_hand_side_expression ;
    (26) right_hand_side_expression -> . vector
    (27) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (28) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (29) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression '
    (36) right_hand_side_expression -> . value
    (37) right_hand_side_expression -> . matrix_functions
    (38) right_hand_side_expression -> . ( right_hand_side_expression )
    (39) right_hand_side_expression -> . relation_expression
    (40) right_hand_side_expression -> . unary
    (64) vector -> . [ ]
    (65) vector -> . [ variables ]
    (22) value -> . STRING
    (23) value -> . ID
    (24) value -> . FLOATNUM
    (25) value -> . INTNUM
    (61) matrix_functions -> . EYE ( id_int )
    (62) matrix_functions -> . ONES ( id_int )
    (63) matrix_functions -> . ZEROS ( id_int )
    (55) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (56) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (57) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (58) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (59) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (41) unary -> . - right_hand_side_expression
    (               shift and go to state 26
    [               shift and go to state 29
    STRING          shift and go to state 30
    ID              shift and go to state 31
    FLOATNUM        shift and go to state 32
    INTNUM          shift and go to state 33
    EYE             shift and go to state 34
    ONES            shift and go to state 35
    ZEROS           shift and go to state 36
    -               shift and go to state 23

    right_hand_side_expression     shift and go to state 90
    vector                         shift and go to state 22
    value                          shift and go to state 24
    matrix_functions               shift and go to state 25
    relation_expression            shift and go to state 27
    unary                          shift and go to state 28

state 49

    (47) assign_instruction -> ID PLUSASSIGN . right_hand_side_expression ;
    (26) right_hand_side_expression -> . vector
    (27) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (28) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (29) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression '
    (36) right_hand_side_expression -> . value
    (37) right_hand_side_expression -> . matrix_functions
    (38) right_hand_side_expression -> . ( right_hand_side_expression )
    (39) right_hand_side_expression -> . relation_expression
    (40) right_hand_side_expression -> . unary
    (64) vector -> . [ ]
    (65) vector -> . [ variables ]
    (22) value -> . STRING
    (23) value -> . ID
    (24) value -> . FLOATNUM
    (25) value -> . INTNUM
    (61) matrix_functions -> . EYE ( id_int )
    (62) matrix_functions -> . ONES ( id_int )
    (63) matrix_functions -> . ZEROS ( id_int )
    (55) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (56) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (57) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (58) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (59) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (41) unary -> . - right_hand_side_expression
    (               shift and go to state 26
    [               shift and go to state 29
    STRING          shift and go to state 30
    ID              shift and go to state 31
    FLOATNUM        shift and go to state 32
    INTNUM          shift and go to state 33
    EYE             shift and go to state 34
    ONES            shift and go to state 35
    ZEROS           shift and go to state 36
    -               shift and go to state 23

    right_hand_side_expression     shift and go to state 91
    vector                         shift and go to state 22
    value                          shift and go to state 24
    matrix_functions               shift and go to state 25
    relation_expression            shift and go to state 27
    unary                          shift and go to state 28

state 50

    (48) assign_instruction -> ID = . right_hand_side_expression ;
    (26) right_hand_side_expression -> . vector
    (27) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (28) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (29) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression '
    (36) right_hand_side_expression -> . value
    (37) right_hand_side_expression -> . matrix_functions
    (38) right_hand_side_expression -> . ( right_hand_side_expression )
    (39) right_hand_side_expression -> . relation_expression
    (40) right_hand_side_expression -> . unary
    (64) vector -> . [ ]
    (65) vector -> . [ variables ]
    (22) value -> . STRING
    (23) value -> . ID
    (24) value -> . FLOATNUM
    (25) value -> . INTNUM
    (61) matrix_functions -> . EYE ( id_int )
    (62) matrix_functions -> . ONES ( id_int )
    (63) matrix_functions -> . ZEROS ( id_int )
    (55) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (56) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (57) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (58) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (59) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (41) unary -> . - right_hand_side_expression
    (               shift and go to state 26
    [               shift and go to state 29
    STRING          shift and go to state 30
    ID              shift and go to state 31
    FLOATNUM        shift and go to state 32
    INTNUM          shift and go to state 33
    EYE             shift and go to state 34
    ONES            shift and go to state 35
    ZEROS           shift and go to state 36
    -               shift and go to state 23

    right_hand_side_expression     shift and go to state 92
    vector                         shift and go to state 22
    value                          shift and go to state 24
    matrix_functions               shift and go to state 25
    relation_expression            shift and go to state 27
    unary                          shift and go to state 28

state 51

    (54) matrix_ref -> ID [ . variables ]
    (66) variables -> . right_hand_side_expression
    (67) variables -> . variables , right_hand_side_expression
    (26) right_hand_side_expression -> . vector
    (27) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (28) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (29) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression '
    (36) right_hand_side_expression -> . value
    (37) right_hand_side_expression -> . matrix_functions
    (38) right_hand_side_expression -> . ( right_hand_side_expression )
    (39) right_hand_side_expression -> . relation_expression
    (40) right_hand_side_expression -> . unary
    (64) vector -> . [ ]
    (65) vector -> . [ variables ]
    (22) value -> . STRING
    (23) value -> . ID
    (24) value -> . FLOATNUM
    (25) value -> . INTNUM
    (61) matrix_functions -> . EYE ( id_int )
    (62) matrix_functions -> . ONES ( id_int )
    (63) matrix_functions -> . ZEROS ( id_int )
    (55) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (56) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (57) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (58) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (59) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (41) unary -> . - right_hand_side_expression
    (               shift and go to state 26
    [               shift and go to state 29
    STRING          shift and go to state 30
    ID              shift and go to state 31
    FLOATNUM        shift and go to state 32
    INTNUM          shift and go to state 33
    EYE             shift and go to state 34
    ONES            shift and go to state 35
    ZEROS           shift and go to state 36
    -               shift and go to state 23

    variables                      shift and go to state 93
    right_hand_side_expression     shift and go to state 79
    vector                         shift and go to state 22
    value                          shift and go to state 24
    matrix_functions               shift and go to state 25
    relation_expression            shift and go to state 27
    unary                          shift and go to state 28

state 52

    (14) while_instruction -> WHILE ( . relation_expression ) instruction
    (55) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (56) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (57) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (58) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (59) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (26) right_hand_side_expression -> . vector
    (27) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (28) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (29) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression '
    (36) right_hand_side_expression -> . value
    (37) right_hand_side_expression -> . matrix_functions
    (38) right_hand_side_expression -> . ( right_hand_side_expression )
    (39) right_hand_side_expression -> . relation_expression
    (40) right_hand_side_expression -> . unary
    (64) vector -> . [ ]
    (65) vector -> . [ variables ]
    (22) value -> . STRING
    (23) value -> . ID
    (24) value -> . FLOATNUM
    (25) value -> . INTNUM
    (61) matrix_functions -> . EYE ( id_int )
    (62) matrix_functions -> . ONES ( id_int )
    (63) matrix_functions -> . ZEROS ( id_int )
    (41) unary -> . - right_hand_side_expression
    (               shift and go to state 26
    [               shift and go to state 29
    STRING          shift and go to state 30
    ID              shift and go to state 31
    FLOATNUM        shift and go to state 32
    INTNUM          shift and go to state 33
    EYE             shift and go to state 34
    ONES            shift and go to state 35
    ZEROS           shift and go to state 36
    -               shift and go to state 23

    relation_expression            shift and go to state 94
    right_hand_side_expression     shift and go to state 95
    vector                         shift and go to state 22
    value                          shift and go to state 24
    matrix_functions               shift and go to state 25
    unary                          shift and go to state 28

state 53

    (12) if_instruction -> IF ( . relation_expression ) instruction
    (13) if_instruction -> IF ( . relation_expression ) instruction ELSE instruction
    (55) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (56) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (57) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (58) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (59) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (26) right_hand_side_expression -> . vector
    (27) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (28) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (29) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression '
    (36) right_hand_side_expression -> . value
    (37) right_hand_side_expression -> . matrix_functions
    (38) right_hand_side_expression -> . ( right_hand_side_expression )
    (39) right_hand_side_expression -> . relation_expression
    (40) right_hand_side_expression -> . unary
    (64) vector -> . [ ]
    (65) vector -> . [ variables ]
    (22) value -> . STRING
    (23) value -> . ID
    (24) value -> . FLOATNUM
    (25) value -> . INTNUM
    (61) matrix_functions -> . EYE ( id_int )
    (62) matrix_functions -> . ONES ( id_int )
    (63) matrix_functions -> . ZEROS ( id_int )
    (41) unary -> . - right_hand_side_expression
    (               shift and go to state 26
    [               shift and go to state 29
    STRING          shift and go to state 30
    ID              shift and go to state 31
    FLOATNUM        shift and go to state 32
    INTNUM          shift and go to state 33
    EYE             shift and go to state 34
    ONES            shift and go to state 35
    ZEROS           shift and go to state 36
    -               shift and go to state 23

    relation_expression            shift and go to state 96
    right_hand_side_expression     shift and go to state 95
    vector                         shift and go to state 22
    value                          shift and go to state 24
    matrix_functions               shift and go to state 25
    unary                          shift and go to state 28

state 54

    (49) assign_instruction -> matrix_ref DIVIDEASSIGN . right_hand_side_expression ;
    (26) right_hand_side_expression -> . vector
    (27) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (28) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (29) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression '
    (36) right_hand_side_expression -> . value
    (37) right_hand_side_expression -> . matrix_functions
    (38) right_hand_side_expression -> . ( right_hand_side_expression )
    (39) right_hand_side_expression -> . relation_expression
    (40) right_hand_side_expression -> . unary
    (64) vector -> . [ ]
    (65) vector -> . [ variables ]
    (22) value -> . STRING
    (23) value -> . ID
    (24) value -> . FLOATNUM
    (25) value -> . INTNUM
    (61) matrix_functions -> . EYE ( id_int )
    (62) matrix_functions -> . ONES ( id_int )
    (63) matrix_functions -> . ZEROS ( id_int )
    (55) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (56) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (57) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (58) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (59) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (41) unary -> . - right_hand_side_expression
    (               shift and go to state 26
    [               shift and go to state 29
    STRING          shift and go to state 30
    ID              shift and go to state 31
    FLOATNUM        shift and go to state 32
    INTNUM          shift and go to state 33
    EYE             shift and go to state 34
    ONES            shift and go to state 35
    ZEROS           shift and go to state 36
    -               shift and go to state 23

    right_hand_side_expression     shift and go to state 97
    vector                         shift and go to state 22
    value                          shift and go to state 24
    matrix_functions               shift and go to state 25
    relation_expression            shift and go to state 27
    unary                          shift and go to state 28

state 55

    (50) assign_instruction -> matrix_ref TIMESASSIGN . right_hand_side_expression ;
    (26) right_hand_side_expression -> . vector
    (27) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (28) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (29) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression '
    (36) right_hand_side_expression -> . value
    (37) right_hand_side_expression -> . matrix_functions
    (38) right_hand_side_expression -> . ( right_hand_side_expression )
    (39) right_hand_side_expression -> . relation_expression
    (40) right_hand_side_expression -> . unary
    (64) vector -> . [ ]
    (65) vector -> . [ variables ]
    (22) value -> . STRING
    (23) value -> . ID
    (24) value -> . FLOATNUM
    (25) value -> . INTNUM
    (61) matrix_functions -> . EYE ( id_int )
    (62) matrix_functions -> . ONES ( id_int )
    (63) matrix_functions -> . ZEROS ( id_int )
    (55) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (56) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (57) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (58) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (59) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (41) unary -> . - right_hand_side_expression
    (               shift and go to state 26
    [               shift and go to state 29
    STRING          shift and go to state 30
    ID              shift and go to state 31
    FLOATNUM        shift and go to state 32
    INTNUM          shift and go to state 33
    EYE             shift and go to state 34
    ONES            shift and go to state 35
    ZEROS           shift and go to state 36
    -               shift and go to state 23

    right_hand_side_expression     shift and go to state 98
    vector                         shift and go to state 22
    value                          shift and go to state 24
    matrix_functions               shift and go to state 25
    relation_expression            shift and go to state 27
    unary                          shift and go to state 28

state 56

    (51) assign_instruction -> matrix_ref MINUSASSIGN . right_hand_side_expression ;
    (26) right_hand_side_expression -> . vector
    (27) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (28) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (29) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression '
    (36) right_hand_side_expression -> . value
    (37) right_hand_side_expression -> . matrix_functions
    (38) right_hand_side_expression -> . ( right_hand_side_expression )
    (39) right_hand_side_expression -> . relation_expression
    (40) right_hand_side_expression -> . unary
    (64) vector -> . [ ]
    (65) vector -> . [ variables ]
    (22) value -> . STRING
    (23) value -> . ID
    (24) value -> . FLOATNUM
    (25) value -> . INTNUM
    (61) matrix_functions -> . EYE ( id_int )
    (62) matrix_functions -> . ONES ( id_int )
    (63) matrix_functions -> . ZEROS ( id_int )
    (55) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (56) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (57) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (58) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (59) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (41) unary -> . - right_hand_side_expression
    (               shift and go to state 26
    [               shift and go to state 29
    STRING          shift and go to state 30
    ID              shift and go to state 31
    FLOATNUM        shift and go to state 32
    INTNUM          shift and go to state 33
    EYE             shift and go to state 34
    ONES            shift and go to state 35
    ZEROS           shift and go to state 36
    -               shift and go to state 23

    right_hand_side_expression     shift and go to state 99
    vector                         shift and go to state 22
    value                          shift and go to state 24
    matrix_functions               shift and go to state 25
    relation_expression            shift and go to state 27
    unary                          shift and go to state 28

state 57

    (52) assign_instruction -> matrix_ref PLUSASSIGN . right_hand_side_expression ;
    (26) right_hand_side_expression -> . vector
    (27) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (28) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (29) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression '
    (36) right_hand_side_expression -> . value
    (37) right_hand_side_expression -> . matrix_functions
    (38) right_hand_side_expression -> . ( right_hand_side_expression )
    (39) right_hand_side_expression -> . relation_expression
    (40) right_hand_side_expression -> . unary
    (64) vector -> . [ ]
    (65) vector -> . [ variables ]
    (22) value -> . STRING
    (23) value -> . ID
    (24) value -> . FLOATNUM
    (25) value -> . INTNUM
    (61) matrix_functions -> . EYE ( id_int )
    (62) matrix_functions -> . ONES ( id_int )
    (63) matrix_functions -> . ZEROS ( id_int )
    (55) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (56) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (57) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (58) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (59) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (41) unary -> . - right_hand_side_expression
    (               shift and go to state 26
    [               shift and go to state 29
    STRING          shift and go to state 30
    ID              shift and go to state 31
    FLOATNUM        shift and go to state 32
    INTNUM          shift and go to state 33
    EYE             shift and go to state 34
    ONES            shift and go to state 35
    ZEROS           shift and go to state 36
    -               shift and go to state 23

    right_hand_side_expression     shift and go to state 100
    vector                         shift and go to state 22
    value                          shift and go to state 24
    matrix_functions               shift and go to state 25
    relation_expression            shift and go to state 27
    unary                          shift and go to state 28

state 58

    (53) assign_instruction -> matrix_ref = . right_hand_side_expression ;
    (26) right_hand_side_expression -> . vector
    (27) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (28) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (29) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression '
    (36) right_hand_side_expression -> . value
    (37) right_hand_side_expression -> . matrix_functions
    (38) right_hand_side_expression -> . ( right_hand_side_expression )
    (39) right_hand_side_expression -> . relation_expression
    (40) right_hand_side_expression -> . unary
    (64) vector -> . [ ]
    (65) vector -> . [ variables ]
    (22) value -> . STRING
    (23) value -> . ID
    (24) value -> . FLOATNUM
    (25) value -> . INTNUM
    (61) matrix_functions -> . EYE ( id_int )
    (62) matrix_functions -> . ONES ( id_int )
    (63) matrix_functions -> . ZEROS ( id_int )
    (55) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (56) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (57) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (58) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (59) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (41) unary -> . - right_hand_side_expression
    (               shift and go to state 26
    [               shift and go to state 29
    STRING          shift and go to state 30
    ID              shift and go to state 31
    FLOATNUM        shift and go to state 32
    INTNUM          shift and go to state 33
    EYE             shift and go to state 34
    ONES            shift and go to state 35
    ZEROS           shift and go to state 36
    -               shift and go to state 23

    right_hand_side_expression     shift and go to state 101
    vector                         shift and go to state 22
    value                          shift and go to state 24
    matrix_functions               shift and go to state 25
    relation_expression            shift and go to state 27
    unary                          shift and go to state 28

state 59

    (3) instruction -> RETURN right_hand_side_expression ; .
    RETURN          reduce using rule 3 (instruction -> RETURN right_hand_side_expression ; .)
    CONTINUE        reduce using rule 3 (instruction -> RETURN right_hand_side_expression ; .)
    BREAK           reduce using rule 3 (instruction -> RETURN right_hand_side_expression ; .)
    {               reduce using rule 3 (instruction -> RETURN right_hand_side_expression ; .)
    PRINT           reduce using rule 3 (instruction -> RETURN right_hand_side_expression ; .)
    (               reduce using rule 3 (instruction -> RETURN right_hand_side_expression ; .)
    FOR             reduce using rule 3 (instruction -> RETURN right_hand_side_expression ; .)
    WHILE           reduce using rule 3 (instruction -> RETURN right_hand_side_expression ; .)
    IF              reduce using rule 3 (instruction -> RETURN right_hand_side_expression ; .)
    ID              reduce using rule 3 (instruction -> RETURN right_hand_side_expression ; .)
    $end            reduce using rule 3 (instruction -> RETURN right_hand_side_expression ; .)
    }               reduce using rule 3 (instruction -> RETURN right_hand_side_expression ; .)
    ELSE            reduce using rule 3 (instruction -> RETURN right_hand_side_expression ; .)


state 60

    (27) right_hand_side_expression -> right_hand_side_expression DOTDIVIDE . right_hand_side_expression
    (26) right_hand_side_expression -> . vector
    (27) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (28) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (29) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression '
    (36) right_hand_side_expression -> . value
    (37) right_hand_side_expression -> . matrix_functions
    (38) right_hand_side_expression -> . ( right_hand_side_expression )
    (39) right_hand_side_expression -> . relation_expression
    (40) right_hand_side_expression -> . unary
    (64) vector -> . [ ]
    (65) vector -> . [ variables ]
    (22) value -> . STRING
    (23) value -> . ID
    (24) value -> . FLOATNUM
    (25) value -> . INTNUM
    (61) matrix_functions -> . EYE ( id_int )
    (62) matrix_functions -> . ONES ( id_int )
    (63) matrix_functions -> . ZEROS ( id_int )
    (55) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (56) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (57) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (58) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (59) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (41) unary -> . - right_hand_side_expression
    (               shift and go to state 26
    [               shift and go to state 29
    STRING          shift and go to state 30
    ID              shift and go to state 31
    FLOATNUM        shift and go to state 32
    INTNUM          shift and go to state 33
    EYE             shift and go to state 34
    ONES            shift and go to state 35
    ZEROS           shift and go to state 36
    -               shift and go to state 23

    right_hand_side_expression     shift and go to state 102
    vector                         shift and go to state 22
    value                          shift and go to state 24
    matrix_functions               shift and go to state 25
    relation_expression            shift and go to state 27
    unary                          shift and go to state 28

state 61

    (28) right_hand_side_expression -> right_hand_side_expression DOTTIMES . right_hand_side_expression
    (26) right_hand_side_expression -> . vector
    (27) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (28) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (29) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression '
    (36) right_hand_side_expression -> . value
    (37) right_hand_side_expression -> . matrix_functions
    (38) right_hand_side_expression -> . ( right_hand_side_expression )
    (39) right_hand_side_expression -> . relation_expression
    (40) right_hand_side_expression -> . unary
    (64) vector -> . [ ]
    (65) vector -> . [ variables ]
    (22) value -> . STRING
    (23) value -> . ID
    (24) value -> . FLOATNUM
    (25) value -> . INTNUM
    (61) matrix_functions -> . EYE ( id_int )
    (62) matrix_functions -> . ONES ( id_int )
    (63) matrix_functions -> . ZEROS ( id_int )
    (55) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (56) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (57) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (58) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (59) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (41) unary -> . - right_hand_side_expression
    (               shift and go to state 26
    [               shift and go to state 29
    STRING          shift and go to state 30
    ID              shift and go to state 31
    FLOATNUM        shift and go to state 32
    INTNUM          shift and go to state 33
    EYE             shift and go to state 34
    ONES            shift and go to state 35
    ZEROS           shift and go to state 36
    -               shift and go to state 23

    right_hand_side_expression     shift and go to state 103
    vector                         shift and go to state 22
    value                          shift and go to state 24
    matrix_functions               shift and go to state 25
    relation_expression            shift and go to state 27
    unary                          shift and go to state 28

state 62

    (29) right_hand_side_expression -> right_hand_side_expression DOTMINUS . right_hand_side_expression
    (26) right_hand_side_expression -> . vector
    (27) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (28) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (29) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression '
    (36) right_hand_side_expression -> . value
    (37) right_hand_side_expression -> . matrix_functions
    (38) right_hand_side_expression -> . ( right_hand_side_expression )
    (39) right_hand_side_expression -> . relation_expression
    (40) right_hand_side_expression -> . unary
    (64) vector -> . [ ]
    (65) vector -> . [ variables ]
    (22) value -> . STRING
    (23) value -> . ID
    (24) value -> . FLOATNUM
    (25) value -> . INTNUM
    (61) matrix_functions -> . EYE ( id_int )
    (62) matrix_functions -> . ONES ( id_int )
    (63) matrix_functions -> . ZEROS ( id_int )
    (55) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (56) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (57) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (58) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (59) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (41) unary -> . - right_hand_side_expression
    (               shift and go to state 26
    [               shift and go to state 29
    STRING          shift and go to state 30
    ID              shift and go to state 31
    FLOATNUM        shift and go to state 32
    INTNUM          shift and go to state 33
    EYE             shift and go to state 34
    ONES            shift and go to state 35
    ZEROS           shift and go to state 36
    -               shift and go to state 23

    right_hand_side_expression     shift and go to state 104
    vector                         shift and go to state 22
    value                          shift and go to state 24
    matrix_functions               shift and go to state 25
    relation_expression            shift and go to state 27
    unary                          shift and go to state 28

state 63

    (30) right_hand_side_expression -> right_hand_side_expression DOTPLUS . right_hand_side_expression
    (26) right_hand_side_expression -> . vector
    (27) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (28) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (29) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression '
    (36) right_hand_side_expression -> . value
    (37) right_hand_side_expression -> . matrix_functions
    (38) right_hand_side_expression -> . ( right_hand_side_expression )
    (39) right_hand_side_expression -> . relation_expression
    (40) right_hand_side_expression -> . unary
    (64) vector -> . [ ]
    (65) vector -> . [ variables ]
    (22) value -> . STRING
    (23) value -> . ID
    (24) value -> . FLOATNUM
    (25) value -> . INTNUM
    (61) matrix_functions -> . EYE ( id_int )
    (62) matrix_functions -> . ONES ( id_int )
    (63) matrix_functions -> . ZEROS ( id_int )
    (55) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (56) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (57) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (58) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (59) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (41) unary -> . - right_hand_side_expression
    (               shift and go to state 26
    [               shift and go to state 29
    STRING          shift and go to state 30
    ID              shift and go to state 31
    FLOATNUM        shift and go to state 32
    INTNUM          shift and go to state 33
    EYE             shift and go to state 34
    ONES            shift and go to state 35
    ZEROS           shift and go to state 36
    -               shift and go to state 23

    right_hand_side_expression     shift and go to state 105
    vector                         shift and go to state 22
    value                          shift and go to state 24
    matrix_functions               shift and go to state 25
    relation_expression            shift and go to state 27
    unary                          shift and go to state 28

state 64

    (31) right_hand_side_expression -> right_hand_side_expression / . right_hand_side_expression
    (26) right_hand_side_expression -> . vector
    (27) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (28) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (29) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression '
    (36) right_hand_side_expression -> . value
    (37) right_hand_side_expression -> . matrix_functions
    (38) right_hand_side_expression -> . ( right_hand_side_expression )
    (39) right_hand_side_expression -> . relation_expression
    (40) right_hand_side_expression -> . unary
    (64) vector -> . [ ]
    (65) vector -> . [ variables ]
    (22) value -> . STRING
    (23) value -> . ID
    (24) value -> . FLOATNUM
    (25) value -> . INTNUM
    (61) matrix_functions -> . EYE ( id_int )
    (62) matrix_functions -> . ONES ( id_int )
    (63) matrix_functions -> . ZEROS ( id_int )
    (55) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (56) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (57) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (58) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (59) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (41) unary -> . - right_hand_side_expression
    (               shift and go to state 26
    [               shift and go to state 29
    STRING          shift and go to state 30
    ID              shift and go to state 31
    FLOATNUM        shift and go to state 32
    INTNUM          shift and go to state 33
    EYE             shift and go to state 34
    ONES            shift and go to state 35
    ZEROS           shift and go to state 36
    -               shift and go to state 23

    right_hand_side_expression     shift and go to state 106
    vector                         shift and go to state 22
    value                          shift and go to state 24
    matrix_functions               shift and go to state 25
    relation_expression            shift and go to state 27
    unary                          shift and go to state 28

state 65

    (32) right_hand_side_expression -> right_hand_side_expression * . right_hand_side_expression
    (26) right_hand_side_expression -> . vector
    (27) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (28) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (29) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression '
    (36) right_hand_side_expression -> . value
    (37) right_hand_side_expression -> . matrix_functions
    (38) right_hand_side_expression -> . ( right_hand_side_expression )
    (39) right_hand_side_expression -> . relation_expression
    (40) right_hand_side_expression -> . unary
    (64) vector -> . [ ]
    (65) vector -> . [ variables ]
    (22) value -> . STRING
    (23) value -> . ID
    (24) value -> . FLOATNUM
    (25) value -> . INTNUM
    (61) matrix_functions -> . EYE ( id_int )
    (62) matrix_functions -> . ONES ( id_int )
    (63) matrix_functions -> . ZEROS ( id_int )
    (55) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (56) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (57) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (58) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (59) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (41) unary -> . - right_hand_side_expression
    (               shift and go to state 26
    [               shift and go to state 29
    STRING          shift and go to state 30
    ID              shift and go to state 31
    FLOATNUM        shift and go to state 32
    INTNUM          shift and go to state 33
    EYE             shift and go to state 34
    ONES            shift and go to state 35
    ZEROS           shift and go to state 36
    -               shift and go to state 23

    right_hand_side_expression     shift and go to state 107
    vector                         shift and go to state 22
    value                          shift and go to state 24
    matrix_functions               shift and go to state 25
    relation_expression            shift and go to state 27
    unary                          shift and go to state 28

state 66

    (33) right_hand_side_expression -> right_hand_side_expression - . right_hand_side_expression
    (26) right_hand_side_expression -> . vector
    (27) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (28) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (29) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression '
    (36) right_hand_side_expression -> . value
    (37) right_hand_side_expression -> . matrix_functions
    (38) right_hand_side_expression -> . ( right_hand_side_expression )
    (39) right_hand_side_expression -> . relation_expression
    (40) right_hand_side_expression -> . unary
    (64) vector -> . [ ]
    (65) vector -> . [ variables ]
    (22) value -> . STRING
    (23) value -> . ID
    (24) value -> . FLOATNUM
    (25) value -> . INTNUM
    (61) matrix_functions -> . EYE ( id_int )
    (62) matrix_functions -> . ONES ( id_int )
    (63) matrix_functions -> . ZEROS ( id_int )
    (55) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (56) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (57) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (58) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (59) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (41) unary -> . - right_hand_side_expression
    (               shift and go to state 26
    [               shift and go to state 29
    STRING          shift and go to state 30
    ID              shift and go to state 31
    FLOATNUM        shift and go to state 32
    INTNUM          shift and go to state 33
    EYE             shift and go to state 34
    ONES            shift and go to state 35
    ZEROS           shift and go to state 36
    -               shift and go to state 23

    right_hand_side_expression     shift and go to state 108
    vector                         shift and go to state 22
    value                          shift and go to state 24
    matrix_functions               shift and go to state 25
    relation_expression            shift and go to state 27
    unary                          shift and go to state 28

state 67

    (34) right_hand_side_expression -> right_hand_side_expression + . right_hand_side_expression
    (26) right_hand_side_expression -> . vector
    (27) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (28) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (29) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression '
    (36) right_hand_side_expression -> . value
    (37) right_hand_side_expression -> . matrix_functions
    (38) right_hand_side_expression -> . ( right_hand_side_expression )
    (39) right_hand_side_expression -> . relation_expression
    (40) right_hand_side_expression -> . unary
    (64) vector -> . [ ]
    (65) vector -> . [ variables ]
    (22) value -> . STRING
    (23) value -> . ID
    (24) value -> . FLOATNUM
    (25) value -> . INTNUM
    (61) matrix_functions -> . EYE ( id_int )
    (62) matrix_functions -> . ONES ( id_int )
    (63) matrix_functions -> . ZEROS ( id_int )
    (55) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (56) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (57) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (58) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (59) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (41) unary -> . - right_hand_side_expression
    (               shift and go to state 26
    [               shift and go to state 29
    STRING          shift and go to state 30
    ID              shift and go to state 31
    FLOATNUM        shift and go to state 32
    INTNUM          shift and go to state 33
    EYE             shift and go to state 34
    ONES            shift and go to state 35
    ZEROS           shift and go to state 36
    -               shift and go to state 23

    right_hand_side_expression     shift and go to state 109
    vector                         shift and go to state 22
    value                          shift and go to state 24
    matrix_functions               shift and go to state 25
    relation_expression            shift and go to state 27
    unary                          shift and go to state 28

state 68

    (35) right_hand_side_expression -> right_hand_side_expression ' .
    ;               reduce using rule 35 (right_hand_side_expression -> right_hand_side_expression ' .)
    DOTDIVIDE       reduce using rule 35 (right_hand_side_expression -> right_hand_side_expression ' .)
    DOTTIMES        reduce using rule 35 (right_hand_side_expression -> right_hand_side_expression ' .)
    DOTMINUS        reduce using rule 35 (right_hand_side_expression -> right_hand_side_expression ' .)
    DOTPLUS         reduce using rule 35 (right_hand_side_expression -> right_hand_side_expression ' .)
    /               reduce using rule 35 (right_hand_side_expression -> right_hand_side_expression ' .)
    *               reduce using rule 35 (right_hand_side_expression -> right_hand_side_expression ' .)
    -               reduce using rule 35 (right_hand_side_expression -> right_hand_side_expression ' .)
    +               reduce using rule 35 (right_hand_side_expression -> right_hand_side_expression ' .)
    '               reduce using rule 35 (right_hand_side_expression -> right_hand_side_expression ' .)
    NE              reduce using rule 35 (right_hand_side_expression -> right_hand_side_expression ' .)
    EQ              reduce using rule 35 (right_hand_side_expression -> right_hand_side_expression ' .)
    GE              reduce using rule 35 (right_hand_side_expression -> right_hand_side_expression ' .)
    LE              reduce using rule 35 (right_hand_side_expression -> right_hand_side_expression ' .)
    GT              reduce using rule 35 (right_hand_side_expression -> right_hand_side_expression ' .)
    LT              reduce using rule 35 (right_hand_side_expression -> right_hand_side_expression ' .)
    )               reduce using rule 35 (right_hand_side_expression -> right_hand_side_expression ' .)
    ]               reduce using rule 35 (right_hand_side_expression -> right_hand_side_expression ' .)
    ,               reduce using rule 35 (right_hand_side_expression -> right_hand_side_expression ' .)


state 69

    (55) relation_expression -> right_hand_side_expression NE . right_hand_side_expression
    (26) right_hand_side_expression -> . vector
    (27) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (28) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (29) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression '
    (36) right_hand_side_expression -> . value
    (37) right_hand_side_expression -> . matrix_functions
    (38) right_hand_side_expression -> . ( right_hand_side_expression )
    (39) right_hand_side_expression -> . relation_expression
    (40) right_hand_side_expression -> . unary
    (64) vector -> . [ ]
    (65) vector -> . [ variables ]
    (22) value -> . STRING
    (23) value -> . ID
    (24) value -> . FLOATNUM
    (25) value -> . INTNUM
    (61) matrix_functions -> . EYE ( id_int )
    (62) matrix_functions -> . ONES ( id_int )
    (63) matrix_functions -> . ZEROS ( id_int )
    (55) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (56) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (57) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (58) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (59) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (41) unary -> . - right_hand_side_expression
    (               shift and go to state 26
    [               shift and go to state 29
    STRING          shift and go to state 30
    ID              shift and go to state 31
    FLOATNUM        shift and go to state 32
    INTNUM          shift and go to state 33
    EYE             shift and go to state 34
    ONES            shift and go to state 35
    ZEROS           shift and go to state 36
    -               shift and go to state 23

    right_hand_side_expression     shift and go to state 110
    vector                         shift and go to state 22
    value                          shift and go to state 24
    matrix_functions               shift and go to state 25
    relation_expression            shift and go to state 27
    unary                          shift and go to state 28

state 70

    (56) relation_expression -> right_hand_side_expression EQ . right_hand_side_expression
    (26) right_hand_side_expression -> . vector
    (27) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (28) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (29) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression '
    (36) right_hand_side_expression -> . value
    (37) right_hand_side_expression -> . matrix_functions
    (38) right_hand_side_expression -> . ( right_hand_side_expression )
    (39) right_hand_side_expression -> . relation_expression
    (40) right_hand_side_expression -> . unary
    (64) vector -> . [ ]
    (65) vector -> . [ variables ]
    (22) value -> . STRING
    (23) value -> . ID
    (24) value -> . FLOATNUM
    (25) value -> . INTNUM
    (61) matrix_functions -> . EYE ( id_int )
    (62) matrix_functions -> . ONES ( id_int )
    (63) matrix_functions -> . ZEROS ( id_int )
    (55) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (56) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (57) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (58) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (59) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (41) unary -> . - right_hand_side_expression
    (               shift and go to state 26
    [               shift and go to state 29
    STRING          shift and go to state 30
    ID              shift and go to state 31
    FLOATNUM        shift and go to state 32
    INTNUM          shift and go to state 33
    EYE             shift and go to state 34
    ONES            shift and go to state 35
    ZEROS           shift and go to state 36
    -               shift and go to state 23

    right_hand_side_expression     shift and go to state 111
    vector                         shift and go to state 22
    value                          shift and go to state 24
    matrix_functions               shift and go to state 25
    relation_expression            shift and go to state 27
    unary                          shift and go to state 28

state 71

    (57) relation_expression -> right_hand_side_expression GE . right_hand_side_expression
    (26) right_hand_side_expression -> . vector
    (27) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (28) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (29) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression '
    (36) right_hand_side_expression -> . value
    (37) right_hand_side_expression -> . matrix_functions
    (38) right_hand_side_expression -> . ( right_hand_side_expression )
    (39) right_hand_side_expression -> . relation_expression
    (40) right_hand_side_expression -> . unary
    (64) vector -> . [ ]
    (65) vector -> . [ variables ]
    (22) value -> . STRING
    (23) value -> . ID
    (24) value -> . FLOATNUM
    (25) value -> . INTNUM
    (61) matrix_functions -> . EYE ( id_int )
    (62) matrix_functions -> . ONES ( id_int )
    (63) matrix_functions -> . ZEROS ( id_int )
    (55) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (56) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (57) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (58) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (59) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (41) unary -> . - right_hand_side_expression
    (               shift and go to state 26
    [               shift and go to state 29
    STRING          shift and go to state 30
    ID              shift and go to state 31
    FLOATNUM        shift and go to state 32
    INTNUM          shift and go to state 33
    EYE             shift and go to state 34
    ONES            shift and go to state 35
    ZEROS           shift and go to state 36
    -               shift and go to state 23

    right_hand_side_expression     shift and go to state 112
    vector                         shift and go to state 22
    value                          shift and go to state 24
    matrix_functions               shift and go to state 25
    relation_expression            shift and go to state 27
    unary                          shift and go to state 28

state 72

    (58) relation_expression -> right_hand_side_expression LE . right_hand_side_expression
    (26) right_hand_side_expression -> . vector
    (27) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (28) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (29) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression '
    (36) right_hand_side_expression -> . value
    (37) right_hand_side_expression -> . matrix_functions
    (38) right_hand_side_expression -> . ( right_hand_side_expression )
    (39) right_hand_side_expression -> . relation_expression
    (40) right_hand_side_expression -> . unary
    (64) vector -> . [ ]
    (65) vector -> . [ variables ]
    (22) value -> . STRING
    (23) value -> . ID
    (24) value -> . FLOATNUM
    (25) value -> . INTNUM
    (61) matrix_functions -> . EYE ( id_int )
    (62) matrix_functions -> . ONES ( id_int )
    (63) matrix_functions -> . ZEROS ( id_int )
    (55) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (56) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (57) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (58) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (59) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (41) unary -> . - right_hand_side_expression
    (               shift and go to state 26
    [               shift and go to state 29
    STRING          shift and go to state 30
    ID              shift and go to state 31
    FLOATNUM        shift and go to state 32
    INTNUM          shift and go to state 33
    EYE             shift and go to state 34
    ONES            shift and go to state 35
    ZEROS           shift and go to state 36
    -               shift and go to state 23

    right_hand_side_expression     shift and go to state 113
    vector                         shift and go to state 22
    value                          shift and go to state 24
    matrix_functions               shift and go to state 25
    relation_expression            shift and go to state 27
    unary                          shift and go to state 28

state 73

    (59) relation_expression -> right_hand_side_expression GT . right_hand_side_expression
    (26) right_hand_side_expression -> . vector
    (27) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (28) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (29) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression '
    (36) right_hand_side_expression -> . value
    (37) right_hand_side_expression -> . matrix_functions
    (38) right_hand_side_expression -> . ( right_hand_side_expression )
    (39) right_hand_side_expression -> . relation_expression
    (40) right_hand_side_expression -> . unary
    (64) vector -> . [ ]
    (65) vector -> . [ variables ]
    (22) value -> . STRING
    (23) value -> . ID
    (24) value -> . FLOATNUM
    (25) value -> . INTNUM
    (61) matrix_functions -> . EYE ( id_int )
    (62) matrix_functions -> . ONES ( id_int )
    (63) matrix_functions -> . ZEROS ( id_int )
    (55) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (56) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (57) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (58) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (59) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (41) unary -> . - right_hand_side_expression
    (               shift and go to state 26
    [               shift and go to state 29
    STRING          shift and go to state 30
    ID              shift and go to state 31
    FLOATNUM        shift and go to state 32
    INTNUM          shift and go to state 33
    EYE             shift and go to state 34
    ONES            shift and go to state 35
    ZEROS           shift and go to state 36
    -               shift and go to state 23

    right_hand_side_expression     shift and go to state 114
    vector                         shift and go to state 22
    value                          shift and go to state 24
    matrix_functions               shift and go to state 25
    relation_expression            shift and go to state 27
    unary                          shift and go to state 28

state 74

    (60) relation_expression -> right_hand_side_expression LT . right_hand_side_expression
    (26) right_hand_side_expression -> . vector
    (27) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (28) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (29) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression '
    (36) right_hand_side_expression -> . value
    (37) right_hand_side_expression -> . matrix_functions
    (38) right_hand_side_expression -> . ( right_hand_side_expression )
    (39) right_hand_side_expression -> . relation_expression
    (40) right_hand_side_expression -> . unary
    (64) vector -> . [ ]
    (65) vector -> . [ variables ]
    (22) value -> . STRING
    (23) value -> . ID
    (24) value -> . FLOATNUM
    (25) value -> . INTNUM
    (61) matrix_functions -> . EYE ( id_int )
    (62) matrix_functions -> . ONES ( id_int )
    (63) matrix_functions -> . ZEROS ( id_int )
    (55) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (56) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (57) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (58) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (59) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (41) unary -> . - right_hand_side_expression
    (               shift and go to state 26
    [               shift and go to state 29
    STRING          shift and go to state 30
    ID              shift and go to state 31
    FLOATNUM        shift and go to state 32
    INTNUM          shift and go to state 33
    EYE             shift and go to state 34
    ONES            shift and go to state 35
    ZEROS           shift and go to state 36
    -               shift and go to state 23

    right_hand_side_expression     shift and go to state 115
    vector                         shift and go to state 22
    value                          shift and go to state 24
    matrix_functions               shift and go to state 25
    relation_expression            shift and go to state 27
    unary                          shift and go to state 28

state 75

    (41) unary -> - right_hand_side_expression .
    (27) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (28) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (29) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . '
    (55) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (56) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (57) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (58) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (59) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
    ;               reduce using rule 41 (unary -> - right_hand_side_expression .)
    DOTDIVIDE       reduce using rule 41 (unary -> - right_hand_side_expression .)
    DOTTIMES        reduce using rule 41 (unary -> - right_hand_side_expression .)
    DOTMINUS        reduce using rule 41 (unary -> - right_hand_side_expression .)
    DOTPLUS         reduce using rule 41 (unary -> - right_hand_side_expression .)
    /               reduce using rule 41 (unary -> - right_hand_side_expression .)
    *               reduce using rule 41 (unary -> - right_hand_side_expression .)
    -               reduce using rule 41 (unary -> - right_hand_side_expression .)
    +               reduce using rule 41 (unary -> - right_hand_side_expression .)
    '               reduce using rule 41 (unary -> - right_hand_side_expression .)
    NE              reduce using rule 41 (unary -> - right_hand_side_expression .)
    EQ              reduce using rule 41 (unary -> - right_hand_side_expression .)
    GE              reduce using rule 41 (unary -> - right_hand_side_expression .)
    LE              reduce using rule 41 (unary -> - right_hand_side_expression .)
    GT              reduce using rule 41 (unary -> - right_hand_side_expression .)
    LT              reduce using rule 41 (unary -> - right_hand_side_expression .)
    )               reduce using rule 41 (unary -> - right_hand_side_expression .)
    ]               reduce using rule 41 (unary -> - right_hand_side_expression .)
    ,               reduce using rule 41 (unary -> - right_hand_side_expression .)


state 76

    (38) right_hand_side_expression -> ( right_hand_side_expression . )
    (27) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (28) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (29) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . '
    (55) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (56) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (57) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (58) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (59) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
    )               shift and go to state 116
    DOTDIVIDE       shift and go to state 60
    DOTTIMES        shift and go to state 61
    DOTMINUS        shift and go to state 62
    DOTPLUS         shift and go to state 63
    /               shift and go to state 64
    *               shift and go to state 65
    -               shift and go to state 66
    +               shift and go to state 67
    '               shift and go to state 68
    NE              shift and go to state 69
    EQ              shift and go to state 70
    GE              shift and go to state 71
    LE              shift and go to state 72
    GT              shift and go to state 73
    LT              shift and go to state 74


state 77

    (64) vector -> [ ] .
    ;               reduce using rule 64 (vector -> [ ] .)
    DOTDIVIDE       reduce using rule 64 (vector -> [ ] .)
    DOTTIMES        reduce using rule 64 (vector -> [ ] .)
    DOTMINUS        reduce using rule 64 (vector -> [ ] .)
    DOTPLUS         reduce using rule 64 (vector -> [ ] .)
    /               reduce using rule 64 (vector -> [ ] .)
    *               reduce using rule 64 (vector -> [ ] .)
    -               reduce using rule 64 (vector -> [ ] .)
    +               reduce using rule 64 (vector -> [ ] .)
    '               reduce using rule 64 (vector -> [ ] .)
    NE              reduce using rule 64 (vector -> [ ] .)
    EQ              reduce using rule 64 (vector -> [ ] .)
    GE              reduce using rule 64 (vector -> [ ] .)
    LE              reduce using rule 64 (vector -> [ ] .)
    GT              reduce using rule 64 (vector -> [ ] .)
    LT              reduce using rule 64 (vector -> [ ] .)
    )               reduce using rule 64 (vector -> [ ] .)
    ]               reduce using rule 64 (vector -> [ ] .)
    ,               reduce using rule 64 (vector -> [ ] .)


state 78

    (65) vector -> [ variables . ]
    (67) variables -> variables . , right_hand_side_expression
    ]               shift and go to state 117
    ,               shift and go to state 118


state 79

    (66) variables -> right_hand_side_expression .
    (27) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (28) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (29) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . '
    (55) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (56) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (57) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (58) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (59) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
    ]               reduce using rule 66 (variables -> right_hand_side_expression .)
    ,               reduce using rule 66 (variables -> right_hand_side_expression .)
    DOTDIVIDE       shift and go to state 60
    DOTTIMES        shift and go to state 61
    DOTMINUS        shift and go to state 62
    DOTPLUS         shift and go to state 63
    /               shift and go to state 64
    *               shift and go to state 65
    -               shift and go to state 66
    +               shift and go to state 67
    '               shift and go to state 68
    NE              shift and go to state 69
    EQ              shift and go to state 70
    GE              shift and go to state 71
    LE              shift and go to state 72
    GT              shift and go to state 73
    LT              shift and go to state 74


state 80

    (61) matrix_functions -> EYE ( . id_int )
    (16) id_int -> . ID
    (17) id_int -> . INTNUM
    ID              shift and go to state 120
    INTNUM          shift and go to state 121

    id_int                         shift and go to state 119

state 81

    (62) matrix_functions -> ONES ( . id_int )
    (16) id_int -> . ID
    (17) id_int -> . INTNUM
    ID              shift and go to state 120
    INTNUM          shift and go to state 121

    id_int                         shift and go to state 122

state 82

    (63) matrix_functions -> ZEROS ( . id_int )
    (16) id_int -> . ID
    (17) id_int -> . INTNUM
    ID              shift and go to state 120
    INTNUM          shift and go to state 121

    id_int                         shift and go to state 123

state 83

    (6) instruction -> { instructions } .
    RETURN          reduce using rule 6 (instruction -> { instructions } .)
    CONTINUE        reduce using rule 6 (instruction -> { instructions } .)
    BREAK           reduce using rule 6 (instruction -> { instructions } .)
    {               reduce using rule 6 (instruction -> { instructions } .)
    PRINT           reduce using rule 6 (instruction -> { instructions } .)
    (               reduce using rule 6 (instruction -> { instructions } .)
    FOR             reduce using rule 6 (instruction -> { instructions } .)
    WHILE           reduce using rule 6 (instruction -> { instructions } .)
    IF              reduce using rule 6 (instruction -> { instructions } .)
    ID              reduce using rule 6 (instruction -> { instructions } .)
    $end            reduce using rule 6 (instruction -> { instructions } .)
    }               reduce using rule 6 (instruction -> { instructions } .)
    ELSE            reduce using rule 6 (instruction -> { instructions } .)


state 84

    (18) print_instruction -> PRINT printables ; .
    RETURN          reduce using rule 18 (print_instruction -> PRINT printables ; .)
    CONTINUE        reduce using rule 18 (print_instruction -> PRINT printables ; .)
    BREAK           reduce using rule 18 (print_instruction -> PRINT printables ; .)
    {               reduce using rule 18 (print_instruction -> PRINT printables ; .)
    PRINT           reduce using rule 18 (print_instruction -> PRINT printables ; .)
    (               reduce using rule 18 (print_instruction -> PRINT printables ; .)
    FOR             reduce using rule 18 (print_instruction -> PRINT printables ; .)
    WHILE           reduce using rule 18 (print_instruction -> PRINT printables ; .)
    IF              reduce using rule 18 (print_instruction -> PRINT printables ; .)
    ID              reduce using rule 18 (print_instruction -> PRINT printables ; .)
    $end            reduce using rule 18 (print_instruction -> PRINT printables ; .)
    }               reduce using rule 18 (print_instruction -> PRINT printables ; .)
    ELSE            reduce using rule 18 (print_instruction -> PRINT printables ; .)


state 85

    (21) printables -> printables , . value
    (22) value -> . STRING
    (23) value -> . ID
    (24) value -> . FLOATNUM
    (25) value -> . INTNUM
    STRING          shift and go to state 30
    ID              shift and go to state 31
    FLOATNUM        shift and go to state 32
    INTNUM          shift and go to state 33

    value                          shift and go to state 124

state 86

    (42) full_line_instruction -> ( full_line_instruction ) .
    RETURN          reduce using rule 42 (full_line_instruction -> ( full_line_instruction ) .)
    CONTINUE        reduce using rule 42 (full_line_instruction -> ( full_line_instruction ) .)
    BREAK           reduce using rule 42 (full_line_instruction -> ( full_line_instruction ) .)
    {               reduce using rule 42 (full_line_instruction -> ( full_line_instruction ) .)
    PRINT           reduce using rule 42 (full_line_instruction -> ( full_line_instruction ) .)
    (               reduce using rule 42 (full_line_instruction -> ( full_line_instruction ) .)
    FOR             reduce using rule 42 (full_line_instruction -> ( full_line_instruction ) .)
    WHILE           reduce using rule 42 (full_line_instruction -> ( full_line_instruction ) .)
    IF              reduce using rule 42 (full_line_instruction -> ( full_line_instruction ) .)
    ID              reduce using rule 42 (full_line_instruction -> ( full_line_instruction ) .)
    $end            reduce using rule 42 (full_line_instruction -> ( full_line_instruction ) .)
    }               reduce using rule 42 (full_line_instruction -> ( full_line_instruction ) .)
    )               reduce using rule 42 (full_line_instruction -> ( full_line_instruction ) .)
    ELSE            reduce using rule 42 (full_line_instruction -> ( full_line_instruction ) .)


state 87

    (15) for_instruction -> FOR ID = . id_int : id_int instruction
    (16) id_int -> . ID
    (17) id_int -> . INTNUM
    ID              shift and go to state 120
    INTNUM          shift and go to state 121

    id_int                         shift and go to state 125

state 88

    (44) assign_instruction -> ID DIVIDEASSIGN right_hand_side_expression . ;
    (27) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (28) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (29) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . '
    (55) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (56) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (57) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (58) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (59) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
    ;               shift and go to state 126
    DOTDIVIDE       shift and go to state 60
    DOTTIMES        shift and go to state 61
    DOTMINUS        shift and go to state 62
    DOTPLUS         shift and go to state 63
    /               shift and go to state 64
    *               shift and go to state 65
    -               shift and go to state 66
    +               shift and go to state 67
    '               shift and go to state 68
    NE              shift and go to state 69
    EQ              shift and go to state 70
    GE              shift and go to state 71
    LE              shift and go to state 72
    GT              shift and go to state 73
    LT              shift and go to state 74


state 89

    (45) assign_instruction -> ID TIMESASSIGN right_hand_side_expression . ;
    (27) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (28) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (29) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . '
    (55) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (56) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (57) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (58) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (59) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
    ;               shift and go to state 127
    DOTDIVIDE       shift and go to state 60
    DOTTIMES        shift and go to state 61
    DOTMINUS        shift and go to state 62
    DOTPLUS         shift and go to state 63
    /               shift and go to state 64
    *               shift and go to state 65
    -               shift and go to state 66
    +               shift and go to state 67
    '               shift and go to state 68
    NE              shift and go to state 69
    EQ              shift and go to state 70
    GE              shift and go to state 71
    LE              shift and go to state 72
    GT              shift and go to state 73
    LT              shift and go to state 74


state 90

    (46) assign_instruction -> ID MINUSASSIGN right_hand_side_expression . ;
    (27) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (28) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (29) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . '
    (55) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (56) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (57) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (58) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (59) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
    ;               shift and go to state 128
    DOTDIVIDE       shift and go to state 60
    DOTTIMES        shift and go to state 61
    DOTMINUS        shift and go to state 62
    DOTPLUS         shift and go to state 63
    /               shift and go to state 64
    *               shift and go to state 65
    -               shift and go to state 66
    +               shift and go to state 67
    '               shift and go to state 68
    NE              shift and go to state 69
    EQ              shift and go to state 70
    GE              shift and go to state 71
    LE              shift and go to state 72
    GT              shift and go to state 73
    LT              shift and go to state 74


state 91

    (47) assign_instruction -> ID PLUSASSIGN right_hand_side_expression . ;
    (27) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (28) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (29) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . '
    (55) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (56) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (57) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (58) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (59) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
    ;               shift and go to state 129
    DOTDIVIDE       shift and go to state 60
    DOTTIMES        shift and go to state 61
    DOTMINUS        shift and go to state 62
    DOTPLUS         shift and go to state 63
    /               shift and go to state 64
    *               shift and go to state 65
    -               shift and go to state 66
    +               shift and go to state 67
    '               shift and go to state 68
    NE              shift and go to state 69
    EQ              shift and go to state 70
    GE              shift and go to state 71
    LE              shift and go to state 72
    GT              shift and go to state 73
    LT              shift and go to state 74


state 92

    (48) assign_instruction -> ID = right_hand_side_expression . ;
    (27) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (28) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (29) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . '
    (55) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (56) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (57) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (58) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (59) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
    ;               shift and go to state 130
    DOTDIVIDE       shift and go to state 60
    DOTTIMES        shift and go to state 61
    DOTMINUS        shift and go to state 62
    DOTPLUS         shift and go to state 63
    /               shift and go to state 64
    *               shift and go to state 65
    -               shift and go to state 66
    +               shift and go to state 67
    '               shift and go to state 68
    NE              shift and go to state 69
    EQ              shift and go to state 70
    GE              shift and go to state 71
    LE              shift and go to state 72
    GT              shift and go to state 73
    LT              shift and go to state 74


state 93

    (54) matrix_ref -> ID [ variables . ]
    (67) variables -> variables . , right_hand_side_expression
    ]               shift and go to state 131
    ,               shift and go to state 118


state 94

    (14) while_instruction -> WHILE ( relation_expression . ) instruction
    (39) right_hand_side_expression -> relation_expression .
    )               shift and go to state 132
    NE              reduce using rule 39 (right_hand_side_expression -> relation_expression .)
    EQ              reduce using rule 39 (right_hand_side_expression -> relation_expression .)
    GE              reduce using rule 39 (right_hand_side_expression -> relation_expression .)
    LE              reduce using rule 39 (right_hand_side_expression -> relation_expression .)
    GT              reduce using rule 39 (right_hand_side_expression -> relation_expression .)
    LT              reduce using rule 39 (right_hand_side_expression -> relation_expression .)
    DOTDIVIDE       reduce using rule 39 (right_hand_side_expression -> relation_expression .)
    DOTTIMES        reduce using rule 39 (right_hand_side_expression -> relation_expression .)
    DOTMINUS        reduce using rule 39 (right_hand_side_expression -> relation_expression .)
    DOTPLUS         reduce using rule 39 (right_hand_side_expression -> relation_expression .)
    /               reduce using rule 39 (right_hand_side_expression -> relation_expression .)
    *               reduce using rule 39 (right_hand_side_expression -> relation_expression .)
    -               reduce using rule 39 (right_hand_side_expression -> relation_expression .)
    +               reduce using rule 39 (right_hand_side_expression -> relation_expression .)
    '               reduce using rule 39 (right_hand_side_expression -> relation_expression .)


state 95

    (55) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (56) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (57) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (58) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (59) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
    (27) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (28) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (29) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . '
    NE              shift and go to state 69
    EQ              shift and go to state 70
    GE              shift and go to state 71
    LE              shift and go to state 72
    GT              shift and go to state 73
    LT              shift and go to state 74
    DOTDIVIDE       shift and go to state 60
    DOTTIMES        shift and go to state 61
    DOTMINUS        shift and go to state 62
    DOTPLUS         shift and go to state 63
    /               shift and go to state 64
    *               shift and go to state 65
    -               shift and go to state 66
    +               shift and go to state 67
    '               shift and go to state 68


state 96

    (12) if_instruction -> IF ( relation_expression . ) instruction
    (13) if_instruction -> IF ( relation_expression . ) instruction ELSE instruction
    (39) right_hand_side_expression -> relation_expression .
    )               shift and go to state 133
    NE              reduce using rule 39 (right_hand_side_expression -> relation_expression .)
    EQ              reduce using rule 39 (right_hand_side_expression -> relation_expression .)
    GE              reduce using rule 39 (right_hand_side_expression -> relation_expression .)
    LE              reduce using rule 39 (right_hand_side_expression -> relation_expression .)
    GT              reduce using rule 39 (right_hand_side_expression -> relation_expression .)
    LT              reduce using rule 39 (right_hand_side_expression -> relation_expression .)
    DOTDIVIDE       reduce using rule 39 (right_hand_side_expression -> relation_expression .)
    DOTTIMES        reduce using rule 39 (right_hand_side_expression -> relation_expression .)
    DOTMINUS        reduce using rule 39 (right_hand_side_expression -> relation_expression .)
    DOTPLUS         reduce using rule 39 (right_hand_side_expression -> relation_expression .)
    /               reduce using rule 39 (right_hand_side_expression -> relation_expression .)
    *               reduce using rule 39 (right_hand_side_expression -> relation_expression .)
    -               reduce using rule 39 (right_hand_side_expression -> relation_expression .)
    +               reduce using rule 39 (right_hand_side_expression -> relation_expression .)
    '               reduce using rule 39 (right_hand_side_expression -> relation_expression .)


state 97

    (49) assign_instruction -> matrix_ref DIVIDEASSIGN right_hand_side_expression . ;
    (27) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (28) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (29) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . '
    (55) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (56) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (57) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (58) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (59) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
    ;               shift and go to state 134
    DOTDIVIDE       shift and go to state 60
    DOTTIMES        shift and go to state 61
    DOTMINUS        shift and go to state 62
    DOTPLUS         shift and go to state 63
    /               shift and go to state 64
    *               shift and go to state 65
    -               shift and go to state 66
    +               shift and go to state 67
    '               shift and go to state 68
    NE              shift and go to state 69
    EQ              shift and go to state 70
    GE              shift and go to state 71
    LE              shift and go to state 72
    GT              shift and go to state 73
    LT              shift and go to state 74


state 98

    (50) assign_instruction -> matrix_ref TIMESASSIGN right_hand_side_expression . ;
    (27) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (28) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (29) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . '
    (55) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (56) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (57) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (58) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (59) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
    ;               shift and go to state 135
    DOTDIVIDE       shift and go to state 60
    DOTTIMES        shift and go to state 61
    DOTMINUS        shift and go to state 62
    DOTPLUS         shift and go to state 63
    /               shift and go to state 64
    *               shift and go to state 65
    -               shift and go to state 66
    +               shift and go to state 67
    '               shift and go to state 68
    NE              shift and go to state 69
    EQ              shift and go to state 70
    GE              shift and go to state 71
    LE              shift and go to state 72
    GT              shift and go to state 73
    LT              shift and go to state 74


state 99

    (51) assign_instruction -> matrix_ref MINUSASSIGN right_hand_side_expression . ;
    (27) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (28) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (29) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . '
    (55) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (56) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (57) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (58) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (59) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
    ;               shift and go to state 136
    DOTDIVIDE       shift and go to state 60
    DOTTIMES        shift and go to state 61
    DOTMINUS        shift and go to state 62
    DOTPLUS         shift and go to state 63
    /               shift and go to state 64
    *               shift and go to state 65
    -               shift and go to state 66
    +               shift and go to state 67
    '               shift and go to state 68
    NE              shift and go to state 69
    EQ              shift and go to state 70
    GE              shift and go to state 71
    LE              shift and go to state 72
    GT              shift and go to state 73
    LT              shift and go to state 74


state 100

    (52) assign_instruction -> matrix_ref PLUSASSIGN right_hand_side_expression . ;
    (27) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (28) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (29) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . '
    (55) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (56) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (57) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (58) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (59) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
    ;               shift and go to state 137
    DOTDIVIDE       shift and go to state 60
    DOTTIMES        shift and go to state 61
    DOTMINUS        shift and go to state 62
    DOTPLUS         shift and go to state 63
    /               shift and go to state 64
    *               shift and go to state 65
    -               shift and go to state 66
    +               shift and go to state 67
    '               shift and go to state 68
    NE              shift and go to state 69
    EQ              shift and go to state 70
    GE              shift and go to state 71
    LE              shift and go to state 72
    GT              shift and go to state 73
    LT              shift and go to state 74


state 101

    (53) assign_instruction -> matrix_ref = right_hand_side_expression . ;
    (27) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (28) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (29) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . '
    (55) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (56) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (57) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (58) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (59) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
    ;               shift and go to state 138
    DOTDIVIDE       shift and go to state 60
    DOTTIMES        shift and go to state 61
    DOTMINUS        shift and go to state 62
    DOTPLUS         shift and go to state 63
    /               shift and go to state 64
    *               shift and go to state 65
    -               shift and go to state 66
    +               shift and go to state 67
    '               shift and go to state 68
    NE              shift and go to state 69
    EQ              shift and go to state 70
    GE              shift and go to state 71
    LE              shift and go to state 72
    GT              shift and go to state 73
    LT              shift and go to state 74


state 102

    (27) right_hand_side_expression -> right_hand_side_expression DOTDIVIDE right_hand_side_expression .
    (27) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (28) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (29) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . '
    (55) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (56) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (57) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (58) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (59) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
    ;               reduce using rule 27 (right_hand_side_expression -> right_hand_side_expression DOTDIVIDE right_hand_side_expression .)
    DOTDIVIDE       reduce using rule 27 (right_hand_side_expression -> right_hand_side_expression DOTDIVIDE right_hand_side_expression .)
    DOTTIMES        reduce using rule 27 (right_hand_side_expression -> right_hand_side_expression DOTDIVIDE right_hand_side_expression .)
    DOTMINUS        reduce using rule 27 (right_hand_side_expression -> right_hand_side_expression DOTDIVIDE right_hand_side_expression .)
    DOTPLUS         reduce using rule 27 (right_hand_side_expression -> right_hand_side_expression DOTDIVIDE right_hand_side_expression .)
    /               reduce using rule 27 (right_hand_side_expression -> right_hand_side_expression DOTDIVIDE right_hand_side_expression .)
    *               reduce using rule 27 (right_hand_side_expression -> right_hand_side_expression DOTDIVIDE right_hand_side_expression .)
    -               reduce using rule 27 (right_hand_side_expression -> right_hand_side_expression DOTDIVIDE right_hand_side_expression .)
    +               reduce using rule 27 (right_hand_side_expression -> right_hand_side_expression DOTDIVIDE right_hand_side_expression .)
    NE              reduce using rule 27 (right_hand_side_expression -> right_hand_side_expression DOTDIVIDE right_hand_side_expression .)
    EQ              reduce using rule 27 (right_hand_side_expression -> right_hand_side_expression DOTDIVIDE right_hand_side_expression .)
    GE              reduce using rule 27 (right_hand_side_expression -> right_hand_side_expression DOTDIVIDE right_hand_side_expression .)
    LE              reduce using rule 27 (right_hand_side_expression -> right_hand_side_expression DOTDIVIDE right_hand_side_expression .)
    GT              reduce using rule 27 (right_hand_side_expression -> right_hand_side_expression DOTDIVIDE right_hand_side_expression .)
    LT              reduce using rule 27 (right_hand_side_expression -> right_hand_side_expression DOTDIVIDE right_hand_side_expression .)
    )               reduce using rule 27 (right_hand_side_expression -> right_hand_side_expression DOTDIVIDE right_hand_side_expression .)
    ]               reduce using rule 27 (right_hand_side_expression -> right_hand_side_expression DOTDIVIDE right_hand_side_expression .)
    ,               reduce using rule 27 (right_hand_side_expression -> right_hand_side_expression DOTDIVIDE right_hand_side_expression .)
    '               shift and go to state 68


state 103

    (28) right_hand_side_expression -> right_hand_side_expression DOTTIMES right_hand_side_expression .
    (27) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (28) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (29) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . '
    (55) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (56) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (57) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (58) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (59) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
    ;               reduce using rule 28 (right_hand_side_expression -> right_hand_side_expression DOTTIMES right_hand_side_expression .)
    DOTDIVIDE       reduce using rule 28 (right_hand_side_expression -> right_hand_side_expression DOTTIMES right_hand_side_expression .)
    DOTTIMES        reduce using rule 28 (right_hand_side_expression -> right_hand_side_expression DOTTIMES right_hand_side_expression .)
    DOTMINUS        reduce using rule 28 (right_hand_side_expression -> right_hand_side_expression DOTTIMES right_hand_side_expression .)
    DOTPLUS         reduce using rule 28 (right_hand_side_expression -> right_hand_side_expression DOTTIMES right_hand_side_expression .)
    /               reduce using rule 28 (right_hand_side_expression -> right_hand_side_expression DOTTIMES right_hand_side_expression .)
    *               reduce using rule 28 (right_hand_side_expression -> right_hand_side_expression DOTTIMES right_hand_side_expression .)
    -               reduce using rule 28 (right_hand_side_expression -> right_hand_side_expression DOTTIMES right_hand_side_expression .)
    +               reduce using rule 28 (right_hand_side_expression -> right_hand_side_expression DOTTIMES right_hand_side_expression .)
    NE              reduce using rule 28 (right_hand_side_expression -> right_hand_side_expression DOTTIMES right_hand_side_expression .)
    EQ              reduce using rule 28 (right_hand_side_expression -> right_hand_side_expression DOTTIMES right_hand_side_expression .)
    GE              reduce using rule 28 (right_hand_side_expression -> right_hand_side_expression DOTTIMES right_hand_side_expression .)
    LE              reduce using rule 28 (right_hand_side_expression -> right_hand_side_expression DOTTIMES right_hand_side_expression .)
    GT              reduce using rule 28 (right_hand_side_expression -> right_hand_side_expression DOTTIMES right_hand_side_expression .)
    LT              reduce using rule 28 (right_hand_side_expression -> right_hand_side_expression DOTTIMES right_hand_side_expression .)
    )               reduce using rule 28 (right_hand_side_expression -> right_hand_side_expression DOTTIMES right_hand_side_expression .)
    ]               reduce using rule 28 (right_hand_side_expression -> right_hand_side_expression DOTTIMES right_hand_side_expression .)
    ,               reduce using rule 28 (right_hand_side_expression -> right_hand_side_expression DOTTIMES right_hand_side_expression .)
    '               shift and go to state 68


state 104

    (29) right_hand_side_expression -> right_hand_side_expression DOTMINUS right_hand_side_expression .
    (27) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (28) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (29) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . '
    (55) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (56) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (57) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (58) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (59) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
    ;               reduce using rule 29 (right_hand_side_expression -> right_hand_side_expression DOTMINUS right_hand_side_expression .)
    DOTMINUS        reduce using rule 29 (right_hand_side_expression -> right_hand_side_expression DOTMINUS right_hand_side_expression .)
    DOTPLUS         reduce using rule 29 (right_hand_side_expression -> right_hand_side_expression DOTMINUS right_hand_side_expression .)
    -               reduce using rule 29 (right_hand_side_expression -> right_hand_side_expression DOTMINUS right_hand_side_expression .)
    +               reduce using rule 29 (right_hand_side_expression -> right_hand_side_expression DOTMINUS right_hand_side_expression .)
    NE              reduce using rule 29 (right_hand_side_expression -> right_hand_side_expression DOTMINUS right_hand_side_expression .)
    EQ              reduce using rule 29 (right_hand_side_expression -> right_hand_side_expression DOTMINUS right_hand_side_expression .)
    GE              reduce using rule 29 (right_hand_side_expression -> right_hand_side_expression DOTMINUS right_hand_side_expression .)
    LE              reduce using rule 29 (right_hand_side_expression -> right_hand_side_expression DOTMINUS right_hand_side_expression .)
    GT              reduce using rule 29 (right_hand_side_expression -> right_hand_side_expression DOTMINUS right_hand_side_expression .)
    LT              reduce using rule 29 (right_hand_side_expression -> right_hand_side_expression DOTMINUS right_hand_side_expression .)
    )               reduce using rule 29 (right_hand_side_expression -> right_hand_side_expression DOTMINUS right_hand_side_expression .)
    ]               reduce using rule 29 (right_hand_side_expression -> right_hand_side_expression DOTMINUS right_hand_side_expression .)
    ,               reduce using rule 29 (right_hand_side_expression -> right_hand_side_expression DOTMINUS right_hand_side_expression .)
    DOTDIVIDE       shift and go to state 60
    DOTTIMES        shift and go to state 61
    /               shift and go to state 64
    *               shift and go to state 65
    '               shift and go to state 68


state 105

    (30) right_hand_side_expression -> right_hand_side_expression DOTPLUS right_hand_side_expression .
    (27) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (28) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (29) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . '
    (55) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (56) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (57) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (58) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (59) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
    ;               reduce using rule 30 (right_hand_side_expression -> right_hand_side_expression DOTPLUS right_hand_side_expression .)
    DOTMINUS        reduce using rule 30 (right_hand_side_expression -> right_hand_side_expression DOTPLUS right_hand_side_expression .)
    DOTPLUS         reduce using rule 30 (right_hand_side_expression -> right_hand_side_expression DOTPLUS right_hand_side_expression .)
    -               reduce using rule 30 (right_hand_side_expression -> right_hand_side_expression DOTPLUS right_hand_side_expression .)
    +               reduce using rule 30 (right_hand_side_expression -> right_hand_side_expression DOTPLUS right_hand_side_expression .)
    NE              reduce using rule 30 (right_hand_side_expression -> right_hand_side_expression DOTPLUS right_hand_side_expression .)
    EQ              reduce using rule 30 (right_hand_side_expression -> right_hand_side_expression DOTPLUS right_hand_side_expression .)
    GE              reduce using rule 30 (right_hand_side_expression -> right_hand_side_expression DOTPLUS right_hand_side_expression .)
    LE              reduce using rule 30 (right_hand_side_expression -> right_hand_side_expression DOTPLUS right_hand_side_expression .)
    GT              reduce using rule 30 (right_hand_side_expression -> right_hand_side_expression DOTPLUS right_hand_side_expression .)
    LT              reduce using rule 30 (right_hand_side_expression -> right_hand_side_expression DOTPLUS right_hand_side_expression .)
    )               reduce using rule 30 (right_hand_side_expression -> right_hand_side_expression DOTPLUS right_hand_side_expression .)
    ]               reduce using rule 30 (right_hand_side_expression -> right_hand_side_expression DOTPLUS right_hand_side_expression .)
    ,               reduce using rule 30 (right_hand_side_expression -> right_hand_side_expression DOTPLUS right_hand_side_expression .)
    DOTDIVIDE       shift and go to state 60
    DOTTIMES        shift and go to state 61
    /               shift and go to state 64
    *               shift and go to state 65
    '               shift and go to state 68


state 106

    (31) right_hand_side_expression -> right_hand_side_expression / right_hand_side_expression .
    (27) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (28) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (29) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . '
    (55) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (56) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (57) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (58) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (59) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
    ;               reduce using rule 31 (right_hand_side_expression -> right_hand_side_expression / right_hand_side_expression .)
    DOTDIVIDE       reduce using rule 31 (right_hand_side_expression -> right_hand_side_expression / right_hand_side_expression .)
    DOTTIMES        reduce using rule 31 (right_hand_side_expression -> right_hand_side_expression / right_hand_side_expression .)
    DOTMINUS        reduce using rule 31 (right_hand_side_expression -> right_hand_side_expression / right_hand_side_expression .)
    DOTPLUS         reduce using rule 31 (right_hand_side_expression -> right_hand_side_expression / right_hand_side_expression .)
    /               reduce using rule 31 (right_hand_side_expression -> right_hand_side_expression / right_hand_side_expression .)
    *               reduce using rule 31 (right_hand_side_expression -> right_hand_side_expression / right_hand_side_expression .)
    -               reduce using rule 31 (right_hand_side_expression -> right_hand_side_expression / right_hand_side_expression .)
    +               reduce using rule 31 (right_hand_side_expression -> right_hand_side_expression / right_hand_side_expression .)
    NE              reduce using rule 31 (right_hand_side_expression -> right_hand_side_expression / right_hand_side_expression .)
    EQ              reduce using rule 31 (right_hand_side_expression -> right_hand_side_expression / right_hand_side_expression .)
    GE              reduce using rule 31 (right_hand_side_expression -> right_hand_side_expression / right_hand_side_expression .)
    LE              reduce using rule 31 (right_hand_side_expression -> right_hand_side_expression / right_hand_side_expression .)
    GT              reduce using rule 31 (right_hand_side_expression -> right_hand_side_expression / right_hand_side_expression .)
    LT              reduce using rule 31 (right_hand_side_expression -> right_hand_side_expression / right_hand_side_expression .)
    )               reduce using rule 31 (right_hand_side_expression -> right_hand_side_expression / right_hand_side_expression .)
    ]               reduce using rule 31 (right_hand_side_expression -> right_hand_side_expression / right_hand_side_expression .)
    ,               reduce using rule 31 (right_hand_side_expression -> right_hand_side_expression / right_hand_side_expression .)
    '               shift and go to state 68


state 107

    (32) right_hand_side_expression -> right_hand_side_expression * right_hand_side_expression .
    (27) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (28) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (29) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . '
    (55) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (56) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (57) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (58) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (59) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
    ;               reduce using rule 32 (right_hand_side_expression -> right_hand_side_expression * right_hand_side_expression .)
    DOTDIVIDE       reduce using rule 32 (right_hand_side_expression -> right_hand_side_expression * right_hand_side_expression .)
    DOTTIMES        reduce using rule 32 (right_hand_side_expression -> right_hand_side_expression * right_hand_side_expression .)
    DOTMINUS        reduce using rule 32 (right_hand_side_expression -> right_hand_side_expression * right_hand_side_expression .)
    DOTPLUS         reduce using rule 32 (right_hand_side_expression -> right_hand_side_expression * right_hand_side_expression .)
    /               reduce using rule 32 (right_hand_side_expression -> right_hand_side_expression * right_hand_side_expression .)
    *               reduce using rule 32 (right_hand_side_expression -> right_hand_side_expression * right_hand_side_expression .)
    -               reduce using rule 32 (right_hand_side_expression -> right_hand_side_expression * right_hand_side_expression .)
    +               reduce using rule 32 (right_hand_side_expression -> right_hand_side_expression * right_hand_side_expression .)
    NE              reduce using rule 32 (right_hand_side_expression -> right_hand_side_expression * right_hand_side_expression .)
    EQ              reduce using rule 32 (right_hand_side_expression -> right_hand_side_expression * right_hand_side_expression .)
    GE              reduce using rule 32 (right_hand_side_expression -> right_hand_side_expression * right_hand_side_expression .)
    LE              reduce using rule 32 (right_hand_side_expression -> right_hand_side_expression * right_hand_side_expression .)
    GT              reduce using rule 32 (right_hand_side_expression -> right_hand_side_expression * right_hand_side_expression .)
    LT              reduce using rule 32 (right_hand_side_expression -> right_hand_side_expression * right_hand_side_expression .)
    )               reduce using rule 32 (right_hand_side_expression -> right_hand_side_expression * right_hand_side_expression .)
    ]               reduce using rule 32 (right_hand_side_expression -> right_hand_side_expression * right_hand_side_expression .)
    ,               reduce using rule 32 (right_hand_side_expression -> right_hand_side_expression * right_hand_side_expression .)
    '               shift and go to state 68


state 108

    (33) right_hand_side_expression -> right_hand_side_expression - right_hand_side_expression .
    (27) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (28) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (29) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . '
    (55) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (56) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (57) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (58) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (59) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
    ;               reduce using rule 33 (right_hand_side_expression -> right_hand_side_expression - right_hand_side_expression .)
    DOTMINUS        reduce using rule 33 (right_hand_side_expression -> right_hand_side_expression - right_hand_side_expression .)
    DOTPLUS         reduce using rule 33 (right_hand_side_expression -> right_hand_side_expression - right_hand_side_expression .)
    -               reduce using rule 33 (right_hand_side_expression -> right_hand_side_expression - right_hand_side_expression .)
    +               reduce using rule 33 (right_hand_side_expression -> right_hand_side_expression - right_hand_side_expression .)
    NE              reduce using rule 33 (right_hand_side_expression -> right_hand_side_expression - right_hand_side_expression .)
    EQ              reduce using rule 33 (right_hand_side_expression -> right_hand_side_expression - right_hand_side_expression .)
    GE              reduce using rule 33 (right_hand_side_expression -> right_hand_side_expression - right_hand_side_expression .)
    LE              reduce using rule 33 (right_hand_side_expression -> right_hand_side_expression - right_hand_side_expression .)
    GT              reduce using rule 33 (right_hand_side_expression -> right_hand_side_expression - right_hand_side_expression .)
    LT              reduce using rule 33 (right_hand_side_expression -> right_hand_side_expression - right_hand_side_expression .)
    )               reduce using rule 33 (right_hand_side_expression -> right_hand_side_expression - right_hand_side_expression .)
    ]               reduce using rule 33 (right_hand_side_expression -> right_hand_side_expression - right_hand_side_expression .)
    ,               reduce using rule 33 (right_hand_side_expression -> right_hand_side_expression - right_hand_side_expression .)
    DOTDIVIDE       shift and go to state 60
    DOTTIMES        shift and go to state 61
    /               shift and go to state 64
    *               shift and go to state 65
    '               shift and go to state 68


state 109

    (34) right_hand_side_expression -> right_hand_side_expression + right_hand_side_expression .
    (27) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (28) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (29) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . '
    (55) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (56) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (57) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (58) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (59) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
    ;               reduce using rule 34 (right_hand_side_expression -> right_hand_side_expression + right_hand_side_expression .)
    DOTMINUS        reduce using rule 34 (right_hand_side_expression -> right_hand_side_expression + right_hand_side_expression .)
    DOTPLUS         reduce using rule 34 (right_hand_side_expression -> right_hand_side_expression + right_hand_side_expression .)
    -               reduce using rule 34 (right_hand_side_expression -> right_hand_side_expression + right_hand_side_expression .)
    +               reduce using rule 34 (right_hand_side_expression -> right_hand_side_expression + right_hand_side_expression .)
    NE              reduce using rule 34 (right_hand_side_expression -> right_hand_side_expression + right_hand_side_expression .)
    EQ              reduce using rule 34 (right_hand_side_expression -> right_hand_side_expression + right_hand_side_expression .)
    GE              reduce using rule 34 (right_hand_side_expression -> right_hand_side_expression + right_hand_side_expression .)
    LE              reduce using rule 34 (right_hand_side_expression -> right_hand_side_expression + right_hand_side_expression .)
    GT              reduce using rule 34 (right_hand_side_expression -> right_hand_side_expression + right_hand_side_expression .)
    LT              reduce using rule 34 (right_hand_side_expression -> right_hand_side_expression + right_hand_side_expression .)
    )               reduce using rule 34 (right_hand_side_expression -> right_hand_side_expression + right_hand_side_expression .)
    ]               reduce using rule 34 (right_hand_side_expression -> right_hand_side_expression + right_hand_side_expression .)
    ,               reduce using rule 34 (right_hand_side_expression -> right_hand_side_expression + right_hand_side_expression .)
    DOTDIVIDE       shift and go to state 60
    DOTTIMES        shift and go to state 61
    /               shift and go to state 64
    *               shift and go to state 65
    '               shift and go to state 68


state 110

    (55) relation_expression -> right_hand_side_expression NE right_hand_side_expression .
    (27) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (28) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (29) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . '
    (55) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (56) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (57) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (58) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (59) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
    ;               reduce using rule 55 (relation_expression -> right_hand_side_expression NE right_hand_side_expression .)
    NE              reduce using rule 55 (relation_expression -> right_hand_side_expression NE right_hand_side_expression .)
    EQ              reduce using rule 55 (relation_expression -> right_hand_side_expression NE right_hand_side_expression .)
    GE              reduce using rule 55 (relation_expression -> right_hand_side_expression NE right_hand_side_expression .)
    LE              reduce using rule 55 (relation_expression -> right_hand_side_expression NE right_hand_side_expression .)
    GT              reduce using rule 55 (relation_expression -> right_hand_side_expression NE right_hand_side_expression .)
    LT              reduce using rule 55 (relation_expression -> right_hand_side_expression NE right_hand_side_expression .)
    )               reduce using rule 55 (relation_expression -> right_hand_side_expression NE right_hand_side_expression .)
    ]               reduce using rule 55 (relation_expression -> right_hand_side_expression NE right_hand_side_expression .)
    ,               reduce using rule 55 (relation_expression -> right_hand_side_expression NE right_hand_side_expression .)
    DOTDIVIDE       shift and go to state 60
    DOTTIMES        shift and go to state 61
    DOTMINUS        shift and go to state 62
    DOTPLUS         shift and go to state 63
    /               shift and go to state 64
    *               shift and go to state 65
    -               shift and go to state 66
    +               shift and go to state 67
    '               shift and go to state 68


state 111

    (56) relation_expression -> right_hand_side_expression EQ right_hand_side_expression .
    (27) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (28) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (29) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . '
    (55) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (56) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (57) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (58) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (59) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
    ;               reduce using rule 56 (relation_expression -> right_hand_side_expression EQ right_hand_side_expression .)
    NE              reduce using rule 56 (relation_expression -> right_hand_side_expression EQ right_hand_side_expression .)
    EQ              reduce using rule 56 (relation_expression -> right_hand_side_expression EQ right_hand_side_expression .)
    GE              reduce using rule 56 (relation_expression -> right_hand_side_expression EQ right_hand_side_expression .)
    LE              reduce using rule 56 (relation_expression -> right_hand_side_expression EQ right_hand_side_expression .)
    GT              reduce using rule 56 (relation_expression -> right_hand_side_expression EQ right_hand_side_expression .)
    LT              reduce using rule 56 (relation_expression -> right_hand_side_expression EQ right_hand_side_expression .)
    )               reduce using rule 56 (relation_expression -> right_hand_side_expression EQ right_hand_side_expression .)
    ]               reduce using rule 56 (relation_expression -> right_hand_side_expression EQ right_hand_side_expression .)
    ,               reduce using rule 56 (relation_expression -> right_hand_side_expression EQ right_hand_side_expression .)
    DOTDIVIDE       shift and go to state 60
    DOTTIMES        shift and go to state 61
    DOTMINUS        shift and go to state 62
    DOTPLUS         shift and go to state 63
    /               shift and go to state 64
    *               shift and go to state 65
    -               shift and go to state 66
    +               shift and go to state 67
    '               shift and go to state 68


state 112

    (57) relation_expression -> right_hand_side_expression GE right_hand_side_expression .
    (27) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (28) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (29) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . '
    (55) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (56) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (57) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (58) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (59) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
    ;               reduce using rule 57 (relation_expression -> right_hand_side_expression GE right_hand_side_expression .)
    NE              reduce using rule 57 (relation_expression -> right_hand_side_expression GE right_hand_side_expression .)
    EQ              reduce using rule 57 (relation_expression -> right_hand_side_expression GE right_hand_side_expression .)
    GE              reduce using rule 57 (relation_expression -> right_hand_side_expression GE right_hand_side_expression .)
    LE              reduce using rule 57 (relation_expression -> right_hand_side_expression GE right_hand_side_expression .)
    GT              reduce using rule 57 (relation_expression -> right_hand_side_expression GE right_hand_side_expression .)
    LT              reduce using rule 57 (relation_expression -> right_hand_side_expression GE right_hand_side_expression .)
    )               reduce using rule 57 (relation_expression -> right_hand_side_expression GE right_hand_side_expression .)
    ]               reduce using rule 57 (relation_expression -> right_hand_side_expression GE right_hand_side_expression .)
    ,               reduce using rule 57 (relation_expression -> right_hand_side_expression GE right_hand_side_expression .)
    DOTDIVIDE       shift and go to state 60
    DOTTIMES        shift and go to state 61
    DOTMINUS        shift and go to state 62
    DOTPLUS         shift and go to state 63
    /               shift and go to state 64
    *               shift and go to state 65
    -               shift and go to state 66
    +               shift and go to state 67
    '               shift and go to state 68


state 113

    (58) relation_expression -> right_hand_side_expression LE right_hand_side_expression .
    (27) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (28) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (29) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . '
    (55) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (56) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (57) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (58) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (59) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
    ;               reduce using rule 58 (relation_expression -> right_hand_side_expression LE right_hand_side_expression .)
    NE              reduce using rule 58 (relation_expression -> right_hand_side_expression LE right_hand_side_expression .)
    EQ              reduce using rule 58 (relation_expression -> right_hand_side_expression LE right_hand_side_expression .)
    GE              reduce using rule 58 (relation_expression -> right_hand_side_expression LE right_hand_side_expression .)
    LE              reduce using rule 58 (relation_expression -> right_hand_side_expression LE right_hand_side_expression .)
    GT              reduce using rule 58 (relation_expression -> right_hand_side_expression LE right_hand_side_expression .)
    LT              reduce using rule 58 (relation_expression -> right_hand_side_expression LE right_hand_side_expression .)
    )               reduce using rule 58 (relation_expression -> right_hand_side_expression LE right_hand_side_expression .)
    ]               reduce using rule 58 (relation_expression -> right_hand_side_expression LE right_hand_side_expression .)
    ,               reduce using rule 58 (relation_expression -> right_hand_side_expression LE right_hand_side_expression .)
    DOTDIVIDE       shift and go to state 60
    DOTTIMES        shift and go to state 61
    DOTMINUS        shift and go to state 62
    DOTPLUS         shift and go to state 63
    /               shift and go to state 64
    *               shift and go to state 65
    -               shift and go to state 66
    +               shift and go to state 67
    '               shift and go to state 68


state 114

    (59) relation_expression -> right_hand_side_expression GT right_hand_side_expression .
    (27) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (28) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (29) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . '
    (55) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (56) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (57) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (58) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (59) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
    ;               reduce using rule 59 (relation_expression -> right_hand_side_expression GT right_hand_side_expression .)
    NE              reduce using rule 59 (relation_expression -> right_hand_side_expression GT right_hand_side_expression .)
    EQ              reduce using rule 59 (relation_expression -> right_hand_side_expression GT right_hand_side_expression .)
    GE              reduce using rule 59 (relation_expression -> right_hand_side_expression GT right_hand_side_expression .)
    LE              reduce using rule 59 (relation_expression -> right_hand_side_expression GT right_hand_side_expression .)
    GT              reduce using rule 59 (relation_expression -> right_hand_side_expression GT right_hand_side_expression .)
    LT              reduce using rule 59 (relation_expression -> right_hand_side_expression GT right_hand_side_expression .)
    )               reduce using rule 59 (relation_expression -> right_hand_side_expression GT right_hand_side_expression .)
    ]               reduce using rule 59 (relation_expression -> right_hand_side_expression GT right_hand_side_expression .)
    ,               reduce using rule 59 (relation_expression -> right_hand_side_expression GT right_hand_side_expression .)
    DOTDIVIDE       shift and go to state 60
    DOTTIMES        shift and go to state 61
    DOTMINUS        shift and go to state 62
    DOTPLUS         shift and go to state 63
    /               shift and go to state 64
    *               shift and go to state 65
    -               shift and go to state 66
    +               shift and go to state 67
    '               shift and go to state 68


state 115

    (60) relation_expression -> right_hand_side_expression LT right_hand_side_expression .
    (27) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (28) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (29) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . '
    (55) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (56) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (57) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (58) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (59) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
    ;               reduce using rule 60 (relation_expression -> right_hand_side_expression LT right_hand_side_expression .)
    NE              reduce using rule 60 (relation_expression -> right_hand_side_expression LT right_hand_side_expression .)
    EQ              reduce using rule 60 (relation_expression -> right_hand_side_expression LT right_hand_side_expression .)
    GE              reduce using rule 60 (relation_expression -> right_hand_side_expression LT right_hand_side_expression .)
    LE              reduce using rule 60 (relation_expression -> right_hand_side_expression LT right_hand_side_expression .)
    GT              reduce using rule 60 (relation_expression -> right_hand_side_expression LT right_hand_side_expression .)
    LT              reduce using rule 60 (relation_expression -> right_hand_side_expression LT right_hand_side_expression .)
    )               reduce using rule 60 (relation_expression -> right_hand_side_expression LT right_hand_side_expression .)
    ]               reduce using rule 60 (relation_expression -> right_hand_side_expression LT right_hand_side_expression .)
    ,               reduce using rule 60 (relation_expression -> right_hand_side_expression LT right_hand_side_expression .)
    DOTDIVIDE       shift and go to state 60
    DOTTIMES        shift and go to state 61
    DOTMINUS        shift and go to state 62
    DOTPLUS         shift and go to state 63
    /               shift and go to state 64
    *               shift and go to state 65
    -               shift and go to state 66
    +               shift and go to state 67
    '               shift and go to state 68


state 116

    (38) right_hand_side_expression -> ( right_hand_side_expression ) .
    ;               reduce using rule 38 (right_hand_side_expression -> ( right_hand_side_expression ) .)
    DOTDIVIDE       reduce using rule 38 (right_hand_side_expression -> ( right_hand_side_expression ) .)
    DOTTIMES        reduce using rule 38 (right_hand_side_expression -> ( right_hand_side_expression ) .)
    DOTMINUS        reduce using rule 38 (right_hand_side_expression -> ( right_hand_side_expression ) .)
    DOTPLUS         reduce using rule 38 (right_hand_side_expression -> ( right_hand_side_expression ) .)
    /               reduce using rule 38 (right_hand_side_expression -> ( right_hand_side_expression ) .)
    *               reduce using rule 38 (right_hand_side_expression -> ( right_hand_side_expression ) .)
    -               reduce using rule 38 (right_hand_side_expression -> ( right_hand_side_expression ) .)
    +               reduce using rule 38 (right_hand_side_expression -> ( right_hand_side_expression ) .)
    '               reduce using rule 38 (right_hand_side_expression -> ( right_hand_side_expression ) .)
    NE              reduce using rule 38 (right_hand_side_expression -> ( right_hand_side_expression ) .)
    EQ              reduce using rule 38 (right_hand_side_expression -> ( right_hand_side_expression ) .)
    GE              reduce using rule 38 (right_hand_side_expression -> ( right_hand_side_expression ) .)
    LE              reduce using rule 38 (right_hand_side_expression -> ( right_hand_side_expression ) .)
    GT              reduce using rule 38 (right_hand_side_expression -> ( right_hand_side_expression ) .)
    LT              reduce using rule 38 (right_hand_side_expression -> ( right_hand_side_expression ) .)
    )               reduce using rule 38 (right_hand_side_expression -> ( right_hand_side_expression ) .)
    ]               reduce using rule 38 (right_hand_side_expression -> ( right_hand_side_expression ) .)
    ,               reduce using rule 38 (right_hand_side_expression -> ( right_hand_side_expression ) .)


state 117

    (65) vector -> [ variables ] .
    ;               reduce using rule 65 (vector -> [ variables ] .)
    DOTDIVIDE       reduce using rule 65 (vector -> [ variables ] .)
    DOTTIMES        reduce using rule 65 (vector -> [ variables ] .)
    DOTMINUS        reduce using rule 65 (vector -> [ variables ] .)
    DOTPLUS         reduce using rule 65 (vector -> [ variables ] .)
    /               reduce using rule 65 (vector -> [ variables ] .)
    *               reduce using rule 65 (vector -> [ variables ] .)
    -               reduce using rule 65 (vector -> [ variables ] .)
    +               reduce using rule 65 (vector -> [ variables ] .)
    '               reduce using rule 65 (vector -> [ variables ] .)
    NE              reduce using rule 65 (vector -> [ variables ] .)
    EQ              reduce using rule 65 (vector -> [ variables ] .)
    GE              reduce using rule 65 (vector -> [ variables ] .)
    LE              reduce using rule 65 (vector -> [ variables ] .)
    GT              reduce using rule 65 (vector -> [ variables ] .)
    LT              reduce using rule 65 (vector -> [ variables ] .)
    )               reduce using rule 65 (vector -> [ variables ] .)
    ]               reduce using rule 65 (vector -> [ variables ] .)
    ,               reduce using rule 65 (vector -> [ variables ] .)


state 118

    (67) variables -> variables , . right_hand_side_expression
    (26) right_hand_side_expression -> . vector
    (27) right_hand_side_expression -> . right_hand_side_expression DOTDIVIDE right_hand_side_expression
    (28) right_hand_side_expression -> . right_hand_side_expression DOTTIMES right_hand_side_expression
    (29) right_hand_side_expression -> . right_hand_side_expression DOTMINUS right_hand_side_expression
    (30) right_hand_side_expression -> . right_hand_side_expression DOTPLUS right_hand_side_expression
    (31) right_hand_side_expression -> . right_hand_side_expression / right_hand_side_expression
    (32) right_hand_side_expression -> . right_hand_side_expression * right_hand_side_expression
    (33) right_hand_side_expression -> . right_hand_side_expression - right_hand_side_expression
    (34) right_hand_side_expression -> . right_hand_side_expression + right_hand_side_expression
    (35) right_hand_side_expression -> . right_hand_side_expression '
    (36) right_hand_side_expression -> . value
    (37) right_hand_side_expression -> . matrix_functions
    (38) right_hand_side_expression -> . ( right_hand_side_expression )
    (39) right_hand_side_expression -> . relation_expression
    (40) right_hand_side_expression -> . unary
    (64) vector -> . [ ]
    (65) vector -> . [ variables ]
    (22) value -> . STRING
    (23) value -> . ID
    (24) value -> . FLOATNUM
    (25) value -> . INTNUM
    (61) matrix_functions -> . EYE ( id_int )
    (62) matrix_functions -> . ONES ( id_int )
    (63) matrix_functions -> . ZEROS ( id_int )
    (55) relation_expression -> . right_hand_side_expression NE right_hand_side_expression
    (56) relation_expression -> . right_hand_side_expression EQ right_hand_side_expression
    (57) relation_expression -> . right_hand_side_expression GE right_hand_side_expression
    (58) relation_expression -> . right_hand_side_expression LE right_hand_side_expression
    (59) relation_expression -> . right_hand_side_expression GT right_hand_side_expression
    (60) relation_expression -> . right_hand_side_expression LT right_hand_side_expression
    (41) unary -> . - right_hand_side_expression
    (               shift and go to state 26
    [               shift and go to state 29
    STRING          shift and go to state 30
    ID              shift and go to state 31
    FLOATNUM        shift and go to state 32
    INTNUM          shift and go to state 33
    EYE             shift and go to state 34
    ONES            shift and go to state 35
    ZEROS           shift and go to state 36
    -               shift and go to state 23

    right_hand_side_expression     shift and go to state 139
    vector                         shift and go to state 22
    value                          shift and go to state 24
    matrix_functions               shift and go to state 25
    relation_expression            shift and go to state 27
    unary                          shift and go to state 28

state 119

    (61) matrix_functions -> EYE ( id_int . )
    )               shift and go to state 140


state 120

    (16) id_int -> ID .
    )               reduce using rule 16 (id_int -> ID .)
    :               reduce using rule 16 (id_int -> ID .)
    RETURN          reduce using rule 16 (id_int -> ID .)
    CONTINUE        reduce using rule 16 (id_int -> ID .)
    BREAK           reduce using rule 16 (id_int -> ID .)
    {               reduce using rule 16 (id_int -> ID .)
    PRINT           reduce using rule 16 (id_int -> ID .)
    (               reduce using rule 16 (id_int -> ID .)
    FOR             reduce using rule 16 (id_int -> ID .)
    WHILE           reduce using rule 16 (id_int -> ID .)
    IF              reduce using rule 16 (id_int -> ID .)
    ID              reduce using rule 16 (id_int -> ID .)


state 121

    (17) id_int -> INTNUM .
    )               reduce using rule 17 (id_int -> INTNUM .)
    :               reduce using rule 17 (id_int -> INTNUM .)
    RETURN          reduce using rule 17 (id_int -> INTNUM .)
    CONTINUE        reduce using rule 17 (id_int -> INTNUM .)
    BREAK           reduce using rule 17 (id_int -> INTNUM .)
    {               reduce using rule 17 (id_int -> INTNUM .)
    PRINT           reduce using rule 17 (id_int -> INTNUM .)
    (               reduce using rule 17 (id_int -> INTNUM .)
    FOR             reduce using rule 17 (id_int -> INTNUM .)
    WHILE           reduce using rule 17 (id_int -> INTNUM .)
    IF              reduce using rule 17 (id_int -> INTNUM .)
    ID              reduce using rule 17 (id_int -> INTNUM .)


state 122

    (62) matrix_functions -> ONES ( id_int . )
    )               shift and go to state 141


state 123

    (63) matrix_functions -> ZEROS ( id_int . )
    )               shift and go to state 142


state 124

    (21) printables -> printables , value .
    ;               reduce using rule 21 (printables -> printables , value .)
    ,               reduce using rule 21 (printables -> printables , value .)


state 125

    (15) for_instruction -> FOR ID = id_int . : id_int instruction
    :               shift and go to state 143


state 126

    (44) assign_instruction -> ID DIVIDEASSIGN right_hand_side_expression ; .
    RETURN          reduce using rule 44 (assign_instruction -> ID DIVIDEASSIGN right_hand_side_expression ; .)
    CONTINUE        reduce using rule 44 (assign_instruction -> ID DIVIDEASSIGN right_hand_side_expression ; .)
    BREAK           reduce using rule 44 (assign_instruction -> ID DIVIDEASSIGN right_hand_side_expression ; .)
    {               reduce using rule 44 (assign_instruction -> ID DIVIDEASSIGN right_hand_side_expression ; .)
    PRINT           reduce using rule 44 (assign_instruction -> ID DIVIDEASSIGN right_hand_side_expression ; .)
    (               reduce using rule 44 (assign_instruction -> ID DIVIDEASSIGN right_hand_side_expression ; .)
    FOR             reduce using rule 44 (assign_instruction -> ID DIVIDEASSIGN right_hand_side_expression ; .)
    WHILE           reduce using rule 44 (assign_instruction -> ID DIVIDEASSIGN right_hand_side_expression ; .)
    IF              reduce using rule 44 (assign_instruction -> ID DIVIDEASSIGN right_hand_side_expression ; .)
    ID              reduce using rule 44 (assign_instruction -> ID DIVIDEASSIGN right_hand_side_expression ; .)
    $end            reduce using rule 44 (assign_instruction -> ID DIVIDEASSIGN right_hand_side_expression ; .)
    }               reduce using rule 44 (assign_instruction -> ID DIVIDEASSIGN right_hand_side_expression ; .)
    )               reduce using rule 44 (assign_instruction -> ID DIVIDEASSIGN right_hand_side_expression ; .)
    ELSE            reduce using rule 44 (assign_instruction -> ID DIVIDEASSIGN right_hand_side_expression ; .)


state 127

    (45) assign_instruction -> ID TIMESASSIGN right_hand_side_expression ; .
    RETURN          reduce using rule 45 (assign_instruction -> ID TIMESASSIGN right_hand_side_expression ; .)
    CONTINUE        reduce using rule 45 (assign_instruction -> ID TIMESASSIGN right_hand_side_expression ; .)
    BREAK           reduce using rule 45 (assign_instruction -> ID TIMESASSIGN right_hand_side_expression ; .)
    {               reduce using rule 45 (assign_instruction -> ID TIMESASSIGN right_hand_side_expression ; .)
    PRINT           reduce using rule 45 (assign_instruction -> ID TIMESASSIGN right_hand_side_expression ; .)
    (               reduce using rule 45 (assign_instruction -> ID TIMESASSIGN right_hand_side_expression ; .)
    FOR             reduce using rule 45 (assign_instruction -> ID TIMESASSIGN right_hand_side_expression ; .)
    WHILE           reduce using rule 45 (assign_instruction -> ID TIMESASSIGN right_hand_side_expression ; .)
    IF              reduce using rule 45 (assign_instruction -> ID TIMESASSIGN right_hand_side_expression ; .)
    ID              reduce using rule 45 (assign_instruction -> ID TIMESASSIGN right_hand_side_expression ; .)
    $end            reduce using rule 45 (assign_instruction -> ID TIMESASSIGN right_hand_side_expression ; .)
    }               reduce using rule 45 (assign_instruction -> ID TIMESASSIGN right_hand_side_expression ; .)
    )               reduce using rule 45 (assign_instruction -> ID TIMESASSIGN right_hand_side_expression ; .)
    ELSE            reduce using rule 45 (assign_instruction -> ID TIMESASSIGN right_hand_side_expression ; .)


state 128

    (46) assign_instruction -> ID MINUSASSIGN right_hand_side_expression ; .
    RETURN          reduce using rule 46 (assign_instruction -> ID MINUSASSIGN right_hand_side_expression ; .)
    CONTINUE        reduce using rule 46 (assign_instruction -> ID MINUSASSIGN right_hand_side_expression ; .)
    BREAK           reduce using rule 46 (assign_instruction -> ID MINUSASSIGN right_hand_side_expression ; .)
    {               reduce using rule 46 (assign_instruction -> ID MINUSASSIGN right_hand_side_expression ; .)
    PRINT           reduce using rule 46 (assign_instruction -> ID MINUSASSIGN right_hand_side_expression ; .)
    (               reduce using rule 46 (assign_instruction -> ID MINUSASSIGN right_hand_side_expression ; .)
    FOR             reduce using rule 46 (assign_instruction -> ID MINUSASSIGN right_hand_side_expression ; .)
    WHILE           reduce using rule 46 (assign_instruction -> ID MINUSASSIGN right_hand_side_expression ; .)
    IF              reduce using rule 46 (assign_instruction -> ID MINUSASSIGN right_hand_side_expression ; .)
    ID              reduce using rule 46 (assign_instruction -> ID MINUSASSIGN right_hand_side_expression ; .)
    $end            reduce using rule 46 (assign_instruction -> ID MINUSASSIGN right_hand_side_expression ; .)
    }               reduce using rule 46 (assign_instruction -> ID MINUSASSIGN right_hand_side_expression ; .)
    )               reduce using rule 46 (assign_instruction -> ID MINUSASSIGN right_hand_side_expression ; .)
    ELSE            reduce using rule 46 (assign_instruction -> ID MINUSASSIGN right_hand_side_expression ; .)


state 129

    (47) assign_instruction -> ID PLUSASSIGN right_hand_side_expression ; .
    RETURN          reduce using rule 47 (assign_instruction -> ID PLUSASSIGN right_hand_side_expression ; .)
    CONTINUE        reduce using rule 47 (assign_instruction -> ID PLUSASSIGN right_hand_side_expression ; .)
    BREAK           reduce using rule 47 (assign_instruction -> ID PLUSASSIGN right_hand_side_expression ; .)
    {               reduce using rule 47 (assign_instruction -> ID PLUSASSIGN right_hand_side_expression ; .)
    PRINT           reduce using rule 47 (assign_instruction -> ID PLUSASSIGN right_hand_side_expression ; .)
    (               reduce using rule 47 (assign_instruction -> ID PLUSASSIGN right_hand_side_expression ; .)
    FOR             reduce using rule 47 (assign_instruction -> ID PLUSASSIGN right_hand_side_expression ; .)
    WHILE           reduce using rule 47 (assign_instruction -> ID PLUSASSIGN right_hand_side_expression ; .)
    IF              reduce using rule 47 (assign_instruction -> ID PLUSASSIGN right_hand_side_expression ; .)
    ID              reduce using rule 47 (assign_instruction -> ID PLUSASSIGN right_hand_side_expression ; .)
    $end            reduce using rule 47 (assign_instruction -> ID PLUSASSIGN right_hand_side_expression ; .)
    }               reduce using rule 47 (assign_instruction -> ID PLUSASSIGN right_hand_side_expression ; .)
    )               reduce using rule 47 (assign_instruction -> ID PLUSASSIGN right_hand_side_expression ; .)
    ELSE            reduce using rule 47 (assign_instruction -> ID PLUSASSIGN right_hand_side_expression ; .)


state 130

    (48) assign_instruction -> ID = right_hand_side_expression ; .
    RETURN          reduce using rule 48 (assign_instruction -> ID = right_hand_side_expression ; .)
    CONTINUE        reduce using rule 48 (assign_instruction -> ID = right_hand_side_expression ; .)
    BREAK           reduce using rule 48 (assign_instruction -> ID = right_hand_side_expression ; .)
    {               reduce using rule 48 (assign_instruction -> ID = right_hand_side_expression ; .)
    PRINT           reduce using rule 48 (assign_instruction -> ID = right_hand_side_expression ; .)
    (               reduce using rule 48 (assign_instruction -> ID = right_hand_side_expression ; .)
    FOR             reduce using rule 48 (assign_instruction -> ID = right_hand_side_expression ; .)
    WHILE           reduce using rule 48 (assign_instruction -> ID = right_hand_side_expression ; .)
    IF              reduce using rule 48 (assign_instruction -> ID = right_hand_side_expression ; .)
    ID              reduce using rule 48 (assign_instruction -> ID = right_hand_side_expression ; .)
    $end            reduce using rule 48 (assign_instruction -> ID = right_hand_side_expression ; .)
    }               reduce using rule 48 (assign_instruction -> ID = right_hand_side_expression ; .)
    )               reduce using rule 48 (assign_instruction -> ID = right_hand_side_expression ; .)
    ELSE            reduce using rule 48 (assign_instruction -> ID = right_hand_side_expression ; .)


state 131

    (54) matrix_ref -> ID [ variables ] .
    DIVIDEASSIGN    reduce using rule 54 (matrix_ref -> ID [ variables ] .)
    TIMESASSIGN     reduce using rule 54 (matrix_ref -> ID [ variables ] .)
    MINUSASSIGN     reduce using rule 54 (matrix_ref -> ID [ variables ] .)
    PLUSASSIGN      reduce using rule 54 (matrix_ref -> ID [ variables ] .)
    =               reduce using rule 54 (matrix_ref -> ID [ variables ] .)
    ;               reduce using rule 54 (matrix_ref -> ID [ variables ] .)
    ,               reduce using rule 54 (matrix_ref -> ID [ variables ] .)


state 132

    (14) while_instruction -> WHILE ( relation_expression ) . instruction
    (3) instruction -> . RETURN right_hand_side_expression ;
    (4) instruction -> . CONTINUE ;
    (5) instruction -> . BREAK ;
    (6) instruction -> . { instructions }
    (7) instruction -> . print_instruction
    (8) instruction -> . full_line_instruction
    (9) instruction -> . for_instruction
    (10) instruction -> . while_instruction
    (11) instruction -> . if_instruction
    (18) print_instruction -> . PRINT printables ;
    (42) full_line_instruction -> . ( full_line_instruction )
    (43) full_line_instruction -> . assign_instruction
    (15) for_instruction -> . FOR ID = id_int : id_int instruction
    (14) while_instruction -> . WHILE ( relation_expression ) instruction
    (12) if_instruction -> . IF ( relation_expression ) instruction
    (13) if_instruction -> . IF ( relation_expression ) instruction ELSE instruction
    (44) assign_instruction -> . ID DIVIDEASSIGN right_hand_side_expression ;
    (45) assign_instruction -> . ID TIMESASSIGN right_hand_side_expression ;
    (46) assign_instruction -> . ID MINUSASSIGN right_hand_side_expression ;
    (47) assign_instruction -> . ID PLUSASSIGN right_hand_side_expression ;
    (48) assign_instruction -> . ID = right_hand_side_expression ;
    (49) assign_instruction -> . matrix_ref DIVIDEASSIGN right_hand_side_expression ;
    (50) assign_instruction -> . matrix_ref TIMESASSIGN right_hand_side_expression ;
    (51) assign_instruction -> . matrix_ref MINUSASSIGN right_hand_side_expression ;
    (52) assign_instruction -> . matrix_ref PLUSASSIGN right_hand_side_expression ;
    (53) assign_instruction -> . matrix_ref = right_hand_side_expression ;
    (54) matrix_ref -> . ID [ variables ]
    RETURN          shift and go to state 3
    CONTINUE        shift and go to state 4
    BREAK           shift and go to state 5
    {               shift and go to state 6
    PRINT           shift and go to state 12
    (               shift and go to state 13
    FOR             shift and go to state 15
    WHILE           shift and go to state 17
    IF              shift and go to state 18
    ID              shift and go to state 16

    instruction                    shift and go to state 144
    print_instruction              shift and go to state 7
    full_line_instruction          shift and go to state 8
    for_instruction                shift and go to state 9
    while_instruction              shift and go to state 10
    if_instruction                 shift and go to state 11
    assign_instruction             shift and go to state 14
    matrix_ref                     shift and go to state 19

state 133

    (12) if_instruction -> IF ( relation_expression ) . instruction
    (13) if_instruction -> IF ( relation_expression ) . instruction ELSE instruction
    (3) instruction -> . RETURN right_hand_side_expression ;
    (4) instruction -> . CONTINUE ;
    (5) instruction -> . BREAK ;
    (6) instruction -> . { instructions }
    (7) instruction -> . print_instruction
    (8) instruction -> . full_line_instruction
    (9) instruction -> . for_instruction
    (10) instruction -> . while_instruction
    (11) instruction -> . if_instruction
    (18) print_instruction -> . PRINT printables ;
    (42) full_line_instruction -> . ( full_line_instruction )
    (43) full_line_instruction -> . assign_instruction
    (15) for_instruction -> . FOR ID = id_int : id_int instruction
    (14) while_instruction -> . WHILE ( relation_expression ) instruction
    (12) if_instruction -> . IF ( relation_expression ) instruction
    (13) if_instruction -> . IF ( relation_expression ) instruction ELSE instruction
    (44) assign_instruction -> . ID DIVIDEASSIGN right_hand_side_expression ;
    (45) assign_instruction -> . ID TIMESASSIGN right_hand_side_expression ;
    (46) assign_instruction -> . ID MINUSASSIGN right_hand_side_expression ;
    (47) assign_instruction -> . ID PLUSASSIGN right_hand_side_expression ;
    (48) assign_instruction -> . ID = right_hand_side_expression ;
    (49) assign_instruction -> . matrix_ref DIVIDEASSIGN right_hand_side_expression ;
    (50) assign_instruction -> . matrix_ref TIMESASSIGN right_hand_side_expression ;
    (51) assign_instruction -> . matrix_ref MINUSASSIGN right_hand_side_expression ;
    (52) assign_instruction -> . matrix_ref PLUSASSIGN right_hand_side_expression ;
    (53) assign_instruction -> . matrix_ref = right_hand_side_expression ;
    (54) matrix_ref -> . ID [ variables ]
    RETURN          shift and go to state 3
    CONTINUE        shift and go to state 4
    BREAK           shift and go to state 5
    {               shift and go to state 6
    PRINT           shift and go to state 12
    (               shift and go to state 13
    FOR             shift and go to state 15
    WHILE           shift and go to state 17
    IF              shift and go to state 18
    ID              shift and go to state 16

    instruction                    shift and go to state 145
    print_instruction              shift and go to state 7
    full_line_instruction          shift and go to state 8
    for_instruction                shift and go to state 9
    while_instruction              shift and go to state 10
    if_instruction                 shift and go to state 11
    assign_instruction             shift and go to state 14
    matrix_ref                     shift and go to state 19

state 134

    (49) assign_instruction -> matrix_ref DIVIDEASSIGN right_hand_side_expression ; .
    RETURN          reduce using rule 49 (assign_instruction -> matrix_ref DIVIDEASSIGN right_hand_side_expression ; .)
    CONTINUE        reduce using rule 49 (assign_instruction -> matrix_ref DIVIDEASSIGN right_hand_side_expression ; .)
    BREAK           reduce using rule 49 (assign_instruction -> matrix_ref DIVIDEASSIGN right_hand_side_expression ; .)
    {               reduce using rule 49 (assign_instruction -> matrix_ref DIVIDEASSIGN right_hand_side_expression ; .)
    PRINT           reduce using rule 49 (assign_instruction -> matrix_ref DIVIDEASSIGN right_hand_side_expression ; .)
    (               reduce using rule 49 (assign_instruction -> matrix_ref DIVIDEASSIGN right_hand_side_expression ; .)
    FOR             reduce using rule 49 (assign_instruction -> matrix_ref DIVIDEASSIGN right_hand_side_expression ; .)
    WHILE           reduce using rule 49 (assign_instruction -> matrix_ref DIVIDEASSIGN right_hand_side_expression ; .)
    IF              reduce using rule 49 (assign_instruction -> matrix_ref DIVIDEASSIGN right_hand_side_expression ; .)
    ID              reduce using rule 49 (assign_instruction -> matrix_ref DIVIDEASSIGN right_hand_side_expression ; .)
    $end            reduce using rule 49 (assign_instruction -> matrix_ref DIVIDEASSIGN right_hand_side_expression ; .)
    }               reduce using rule 49 (assign_instruction -> matrix_ref DIVIDEASSIGN right_hand_side_expression ; .)
    )               reduce using rule 49 (assign_instruction -> matrix_ref DIVIDEASSIGN right_hand_side_expression ; .)
    ELSE            reduce using rule 49 (assign_instruction -> matrix_ref DIVIDEASSIGN right_hand_side_expression ; .)


state 135

    (50) assign_instruction -> matrix_ref TIMESASSIGN right_hand_side_expression ; .
    RETURN          reduce using rule 50 (assign_instruction -> matrix_ref TIMESASSIGN right_hand_side_expression ; .)
    CONTINUE        reduce using rule 50 (assign_instruction -> matrix_ref TIMESASSIGN right_hand_side_expression ; .)
    BREAK           reduce using rule 50 (assign_instruction -> matrix_ref TIMESASSIGN right_hand_side_expression ; .)
    {               reduce using rule 50 (assign_instruction -> matrix_ref TIMESASSIGN right_hand_side_expression ; .)
    PRINT           reduce using rule 50 (assign_instruction -> matrix_ref TIMESASSIGN right_hand_side_expression ; .)
    (               reduce using rule 50 (assign_instruction -> matrix_ref TIMESASSIGN right_hand_side_expression ; .)
    FOR             reduce using rule 50 (assign_instruction -> matrix_ref TIMESASSIGN right_hand_side_expression ; .)
    WHILE           reduce using rule 50 (assign_instruction -> matrix_ref TIMESASSIGN right_hand_side_expression ; .)
    IF              reduce using rule 50 (assign_instruction -> matrix_ref TIMESASSIGN right_hand_side_expression ; .)
    ID              reduce using rule 50 (assign_instruction -> matrix_ref TIMESASSIGN right_hand_side_expression ; .)
    $end            reduce using rule 50 (assign_instruction -> matrix_ref TIMESASSIGN right_hand_side_expression ; .)
    }               reduce using rule 50 (assign_instruction -> matrix_ref TIMESASSIGN right_hand_side_expression ; .)
    )               reduce using rule 50 (assign_instruction -> matrix_ref TIMESASSIGN right_hand_side_expression ; .)
    ELSE            reduce using rule 50 (assign_instruction -> matrix_ref TIMESASSIGN right_hand_side_expression ; .)


state 136

    (51) assign_instruction -> matrix_ref MINUSASSIGN right_hand_side_expression ; .
    RETURN          reduce using rule 51 (assign_instruction -> matrix_ref MINUSASSIGN right_hand_side_expression ; .)
    CONTINUE        reduce using rule 51 (assign_instruction -> matrix_ref MINUSASSIGN right_hand_side_expression ; .)
    BREAK           reduce using rule 51 (assign_instruction -> matrix_ref MINUSASSIGN right_hand_side_expression ; .)
    {               reduce using rule 51 (assign_instruction -> matrix_ref MINUSASSIGN right_hand_side_expression ; .)
    PRINT           reduce using rule 51 (assign_instruction -> matrix_ref MINUSASSIGN right_hand_side_expression ; .)
    (               reduce using rule 51 (assign_instruction -> matrix_ref MINUSASSIGN right_hand_side_expression ; .)
    FOR             reduce using rule 51 (assign_instruction -> matrix_ref MINUSASSIGN right_hand_side_expression ; .)
    WHILE           reduce using rule 51 (assign_instruction -> matrix_ref MINUSASSIGN right_hand_side_expression ; .)
    IF              reduce using rule 51 (assign_instruction -> matrix_ref MINUSASSIGN right_hand_side_expression ; .)
    ID              reduce using rule 51 (assign_instruction -> matrix_ref MINUSASSIGN right_hand_side_expression ; .)
    $end            reduce using rule 51 (assign_instruction -> matrix_ref MINUSASSIGN right_hand_side_expression ; .)
    }               reduce using rule 51 (assign_instruction -> matrix_ref MINUSASSIGN right_hand_side_expression ; .)
    )               reduce using rule 51 (assign_instruction -> matrix_ref MINUSASSIGN right_hand_side_expression ; .)
    ELSE            reduce using rule 51 (assign_instruction -> matrix_ref MINUSASSIGN right_hand_side_expression ; .)


state 137

    (52) assign_instruction -> matrix_ref PLUSASSIGN right_hand_side_expression ; .
    RETURN          reduce using rule 52 (assign_instruction -> matrix_ref PLUSASSIGN right_hand_side_expression ; .)
    CONTINUE        reduce using rule 52 (assign_instruction -> matrix_ref PLUSASSIGN right_hand_side_expression ; .)
    BREAK           reduce using rule 52 (assign_instruction -> matrix_ref PLUSASSIGN right_hand_side_expression ; .)
    {               reduce using rule 52 (assign_instruction -> matrix_ref PLUSASSIGN right_hand_side_expression ; .)
    PRINT           reduce using rule 52 (assign_instruction -> matrix_ref PLUSASSIGN right_hand_side_expression ; .)
    (               reduce using rule 52 (assign_instruction -> matrix_ref PLUSASSIGN right_hand_side_expression ; .)
    FOR             reduce using rule 52 (assign_instruction -> matrix_ref PLUSASSIGN right_hand_side_expression ; .)
    WHILE           reduce using rule 52 (assign_instruction -> matrix_ref PLUSASSIGN right_hand_side_expression ; .)
    IF              reduce using rule 52 (assign_instruction -> matrix_ref PLUSASSIGN right_hand_side_expression ; .)
    ID              reduce using rule 52 (assign_instruction -> matrix_ref PLUSASSIGN right_hand_side_expression ; .)
    $end            reduce using rule 52 (assign_instruction -> matrix_ref PLUSASSIGN right_hand_side_expression ; .)
    }               reduce using rule 52 (assign_instruction -> matrix_ref PLUSASSIGN right_hand_side_expression ; .)
    )               reduce using rule 52 (assign_instruction -> matrix_ref PLUSASSIGN right_hand_side_expression ; .)
    ELSE            reduce using rule 52 (assign_instruction -> matrix_ref PLUSASSIGN right_hand_side_expression ; .)


state 138

    (53) assign_instruction -> matrix_ref = right_hand_side_expression ; .
    RETURN          reduce using rule 53 (assign_instruction -> matrix_ref = right_hand_side_expression ; .)
    CONTINUE        reduce using rule 53 (assign_instruction -> matrix_ref = right_hand_side_expression ; .)
    BREAK           reduce using rule 53 (assign_instruction -> matrix_ref = right_hand_side_expression ; .)
    {               reduce using rule 53 (assign_instruction -> matrix_ref = right_hand_side_expression ; .)
    PRINT           reduce using rule 53 (assign_instruction -> matrix_ref = right_hand_side_expression ; .)
    (               reduce using rule 53 (assign_instruction -> matrix_ref = right_hand_side_expression ; .)
    FOR             reduce using rule 53 (assign_instruction -> matrix_ref = right_hand_side_expression ; .)
    WHILE           reduce using rule 53 (assign_instruction -> matrix_ref = right_hand_side_expression ; .)
    IF              reduce using rule 53 (assign_instruction -> matrix_ref = right_hand_side_expression ; .)
    ID              reduce using rule 53 (assign_instruction -> matrix_ref = right_hand_side_expression ; .)
    $end            reduce using rule 53 (assign_instruction -> matrix_ref = right_hand_side_expression ; .)
    }               reduce using rule 53 (assign_instruction -> matrix_ref = right_hand_side_expression ; .)
    )               reduce using rule 53 (assign_instruction -> matrix_ref = right_hand_side_expression ; .)
    ELSE            reduce using rule 53 (assign_instruction -> matrix_ref = right_hand_side_expression ; .)


state 139

    (67) variables -> variables , right_hand_side_expression .
    (27) right_hand_side_expression -> right_hand_side_expression . DOTDIVIDE right_hand_side_expression
    (28) right_hand_side_expression -> right_hand_side_expression . DOTTIMES right_hand_side_expression
    (29) right_hand_side_expression -> right_hand_side_expression . DOTMINUS right_hand_side_expression
    (30) right_hand_side_expression -> right_hand_side_expression . DOTPLUS right_hand_side_expression
    (31) right_hand_side_expression -> right_hand_side_expression . / right_hand_side_expression
    (32) right_hand_side_expression -> right_hand_side_expression . * right_hand_side_expression
    (33) right_hand_side_expression -> right_hand_side_expression . - right_hand_side_expression
    (34) right_hand_side_expression -> right_hand_side_expression . + right_hand_side_expression
    (35) right_hand_side_expression -> right_hand_side_expression . '
    (55) relation_expression -> right_hand_side_expression . NE right_hand_side_expression
    (56) relation_expression -> right_hand_side_expression . EQ right_hand_side_expression
    (57) relation_expression -> right_hand_side_expression . GE right_hand_side_expression
    (58) relation_expression -> right_hand_side_expression . LE right_hand_side_expression
    (59) relation_expression -> right_hand_side_expression . GT right_hand_side_expression
    (60) relation_expression -> right_hand_side_expression . LT right_hand_side_expression
    ]               reduce using rule 67 (variables -> variables , right_hand_side_expression .)
    ,               reduce using rule 67 (variables -> variables , right_hand_side_expression .)
    DOTDIVIDE       shift and go to state 60
    DOTTIMES        shift and go to state 61
    DOTMINUS        shift and go to state 62
    DOTPLUS         shift and go to state 63
    /               shift and go to state 64
    *               shift and go to state 65
    -               shift and go to state 66
    +               shift and go to state 67
    '               shift and go to state 68
    NE              shift and go to state 69
    EQ              shift and go to state 70
    GE              shift and go to state 71
    LE              shift and go to state 72
    GT              shift and go to state 73
    LT              shift and go to state 74


state 140

    (61) matrix_functions -> EYE ( id_int ) .
    ;               reduce using rule 61 (matrix_functions -> EYE ( id_int ) .)
    DOTDIVIDE       reduce using rule 61 (matrix_functions -> EYE ( id_int ) .)
    DOTTIMES        reduce using rule 61 (matrix_functions -> EYE ( id_int ) .)
    DOTMINUS        reduce using rule 61 (matrix_functions -> EYE ( id_int ) .)
    DOTPLUS         reduce using rule 61 (matrix_functions -> EYE ( id_int ) .)
    /               reduce using rule 61 (matrix_functions -> EYE ( id_int ) .)
    *               reduce using rule 61 (matrix_functions -> EYE ( id_int ) .)
    -               reduce using rule 61 (matrix_functions -> EYE ( id_int ) .)
    +               reduce using rule 61 (matrix_functions -> EYE ( id_int ) .)
    '               reduce using rule 61 (matrix_functions -> EYE ( id_int ) .)
    NE              reduce using rule 61 (matrix_functions -> EYE ( id_int ) .)
    EQ              reduce using rule 61 (matrix_functions -> EYE ( id_int ) .)
    GE              reduce using rule 61 (matrix_functions -> EYE ( id_int ) .)
    LE              reduce using rule 61 (matrix_functions -> EYE ( id_int ) .)
    GT              reduce using rule 61 (matrix_functions -> EYE ( id_int ) .)
    LT              reduce using rule 61 (matrix_functions -> EYE ( id_int ) .)
    )               reduce using rule 61 (matrix_functions -> EYE ( id_int ) .)
    ]               reduce using rule 61 (matrix_functions -> EYE ( id_int ) .)
    ,               reduce using rule 61 (matrix_functions -> EYE ( id_int ) .)


state 141

    (62) matrix_functions -> ONES ( id_int ) .
    ;               reduce using rule 62 (matrix_functions -> ONES ( id_int ) .)
    DOTDIVIDE       reduce using rule 62 (matrix_functions -> ONES ( id_int ) .)
    DOTTIMES        reduce using rule 62 (matrix_functions -> ONES ( id_int ) .)
    DOTMINUS        reduce using rule 62 (matrix_functions -> ONES ( id_int ) .)
    DOTPLUS         reduce using rule 62 (matrix_functions -> ONES ( id_int ) .)
    /               reduce using rule 62 (matrix_functions -> ONES ( id_int ) .)
    *               reduce using rule 62 (matrix_functions -> ONES ( id_int ) .)
    -               reduce using rule 62 (matrix_functions -> ONES ( id_int ) .)
    +               reduce using rule 62 (matrix_functions -> ONES ( id_int ) .)
    '               reduce using rule 62 (matrix_functions -> ONES ( id_int ) .)
    NE              reduce using rule 62 (matrix_functions -> ONES ( id_int ) .)
    EQ              reduce using rule 62 (matrix_functions -> ONES ( id_int ) .)
    GE              reduce using rule 62 (matrix_functions -> ONES ( id_int ) .)
    LE              reduce using rule 62 (matrix_functions -> ONES ( id_int ) .)
    GT              reduce using rule 62 (matrix_functions -> ONES ( id_int ) .)
    LT              reduce using rule 62 (matrix_functions -> ONES ( id_int ) .)
    )               reduce using rule 62 (matrix_functions -> ONES ( id_int ) .)
    ]               reduce using rule 62 (matrix_functions -> ONES ( id_int ) .)
    ,               reduce using rule 62 (matrix_functions -> ONES ( id_int ) .)


state 142

    (63) matrix_functions -> ZEROS ( id_int ) .
    ;               reduce using rule 63 (matrix_functions -> ZEROS ( id_int ) .)
    DOTDIVIDE       reduce using rule 63 (matrix_functions -> ZEROS ( id_int ) .)
    DOTTIMES        reduce using rule 63 (matrix_functions -> ZEROS ( id_int ) .)
    DOTMINUS        reduce using rule 63 (matrix_functions -> ZEROS ( id_int ) .)
    DOTPLUS         reduce using rule 63 (matrix_functions -> ZEROS ( id_int ) .)
    /               reduce using rule 63 (matrix_functions -> ZEROS ( id_int ) .)
    *               reduce using rule 63 (matrix_functions -> ZEROS ( id_int ) .)
    -               reduce using rule 63 (matrix_functions -> ZEROS ( id_int ) .)
    +               reduce using rule 63 (matrix_functions -> ZEROS ( id_int ) .)
    '               reduce using rule 63 (matrix_functions -> ZEROS ( id_int ) .)
    NE              reduce using rule 63 (matrix_functions -> ZEROS ( id_int ) .)
    EQ              reduce using rule 63 (matrix_functions -> ZEROS ( id_int ) .)
    GE              reduce using rule 63 (matrix_functions -> ZEROS ( id_int ) .)
    LE              reduce using rule 63 (matrix_functions -> ZEROS ( id_int ) .)
    GT              reduce using rule 63 (matrix_functions -> ZEROS ( id_int ) .)
    LT              reduce using rule 63 (matrix_functions -> ZEROS ( id_int ) .)
    )               reduce using rule 63 (matrix_functions -> ZEROS ( id_int ) .)
    ]               reduce using rule 63 (matrix_functions -> ZEROS ( id_int ) .)
    ,               reduce using rule 63 (matrix_functions -> ZEROS ( id_int ) .)


state 143

    (15) for_instruction -> FOR ID = id_int : . id_int instruction
    (16) id_int -> . ID
    (17) id_int -> . INTNUM
    ID              shift and go to state 120
    INTNUM          shift and go to state 121

    id_int                         shift and go to state 146

state 144

    (14) while_instruction -> WHILE ( relation_expression ) instruction .
    RETURN          reduce using rule 14 (while_instruction -> WHILE ( relation_expression ) instruction .)
    CONTINUE        reduce using rule 14 (while_instruction -> WHILE ( relation_expression ) instruction .)
    BREAK           reduce using rule 14 (while_instruction -> WHILE ( relation_expression ) instruction .)
    {               reduce using rule 14 (while_instruction -> WHILE ( relation_expression ) instruction .)
    PRINT           reduce using rule 14 (while_instruction -> WHILE ( relation_expression ) instruction .)
    (               reduce using rule 14 (while_instruction -> WHILE ( relation_expression ) instruction .)
    FOR             reduce using rule 14 (while_instruction -> WHILE ( relation_expression ) instruction .)
    WHILE           reduce using rule 14 (while_instruction -> WHILE ( relation_expression ) instruction .)
    IF              reduce using rule 14 (while_instruction -> WHILE ( relation_expression ) instruction .)
    ID              reduce using rule 14 (while_instruction -> WHILE ( relation_expression ) instruction .)
    $end            reduce using rule 14 (while_instruction -> WHILE ( relation_expression ) instruction .)
    }               reduce using rule 14 (while_instruction -> WHILE ( relation_expression ) instruction .)
    ELSE            reduce using rule 14 (while_instruction -> WHILE ( relation_expression ) instruction .)


state 145

    (12) if_instruction -> IF ( relation_expression ) instruction .
    (13) if_instruction -> IF ( relation_expression ) instruction . ELSE instruction
    RETURN          reduce using rule 12 (if_instruction -> IF ( relation_expression ) instruction .)
    CONTINUE        reduce using rule 12 (if_instruction -> IF ( relation_expression ) instruction .)
    BREAK           reduce using rule 12 (if_instruction -> IF ( relation_expression ) instruction .)
    {               reduce using rule 12 (if_instruction -> IF ( relation_expression ) instruction .)
    PRINT           reduce using rule 12 (if_instruction -> IF ( relation_expression ) instruction .)
    (               reduce using rule 12 (if_instruction -> IF ( relation_expression ) instruction .)
    FOR             reduce using rule 12 (if_instruction -> IF ( relation_expression ) instruction .)
    WHILE           reduce using rule 12 (if_instruction -> IF ( relation_expression ) instruction .)
    IF              reduce using rule 12 (if_instruction -> IF ( relation_expression ) instruction .)
    ID              reduce using rule 12 (if_instruction -> IF ( relation_expression ) instruction .)
    $end            reduce using rule 12 (if_instruction -> IF ( relation_expression ) instruction .)
    }               reduce using rule 12 (if_instruction -> IF ( relation_expression ) instruction .)
    ELSE            shift and go to state 147


state 146

    (15) for_instruction -> FOR ID = id_int : id_int . instruction
    (3) instruction -> . RETURN right_hand_side_expression ;
    (4) instruction -> . CONTINUE ;
    (5) instruction -> . BREAK ;
    (6) instruction -> . { instructions }
    (7) instruction -> . print_instruction
    (8) instruction -> . full_line_instruction
    (9) instruction -> . for_instruction
    (10) instruction -> . while_instruction
    (11) instruction -> . if_instruction
    (18) print_instruction -> . PRINT printables ;
    (42) full_line_instruction -> . ( full_line_instruction )
    (43) full_line_instruction -> . assign_instruction
    (15) for_instruction -> . FOR ID = id_int : id_int instruction
    (14) while_instruction -> . WHILE ( relation_expression ) instruction
    (12) if_instruction -> . IF ( relation_expression ) instruction
    (13) if_instruction -> . IF ( relation_expression ) instruction ELSE instruction
    (44) assign_instruction -> . ID DIVIDEASSIGN right_hand_side_expression ;
    (45) assign_instruction -> . ID TIMESASSIGN right_hand_side_expression ;
    (46) assign_instruction -> . ID MINUSASSIGN right_hand_side_expression ;
    (47) assign_instruction -> . ID PLUSASSIGN right_hand_side_expression ;
    (48) assign_instruction -> . ID = right_hand_side_expression ;
    (49) assign_instruction -> . matrix_ref DIVIDEASSIGN right_hand_side_expression ;
    (50) assign_instruction -> . matrix_ref TIMESASSIGN right_hand_side_expression ;
    (51) assign_instruction -> . matrix_ref MINUSASSIGN right_hand_side_expression ;
    (52) assign_instruction -> . matrix_ref PLUSASSIGN right_hand_side_expression ;
    (53) assign_instruction -> . matrix_ref = right_hand_side_expression ;
    (54) matrix_ref -> . ID [ variables ]
    RETURN          shift and go to state 3
    CONTINUE        shift and go to state 4
    BREAK           shift and go to state 5
    {               shift and go to state 6
    PRINT           shift and go to state 12
    (               shift and go to state 13
    FOR             shift and go to state 15
    WHILE           shift and go to state 17
    IF              shift and go to state 18
    ID              shift and go to state 16

    instruction                    shift and go to state 148
    print_instruction              shift and go to state 7
    full_line_instruction          shift and go to state 8
    for_instruction                shift and go to state 9
    while_instruction              shift and go to state 10
    if_instruction                 shift and go to state 11
    assign_instruction             shift and go to state 14
    matrix_ref                     shift and go to state 19

state 147

    (13) if_instruction -> IF ( relation_expression ) instruction ELSE . instruction
    (3) instruction -> . RETURN right_hand_side_expression ;
    (4) instruction -> . CONTINUE ;
    (5) instruction -> . BREAK ;
    (6) instruction -> . { instructions }
    (7) instruction -> . print_instruction
    (8) instruction -> . full_line_instruction
    (9) instruction -> . for_instruction
    (10) instruction -> . while_instruction
    (11) instruction -> . if_instruction
    (18) print_instruction -> . PRINT printables ;
    (42) full_line_instruction -> . ( full_line_instruction )
    (43) full_line_instruction -> . assign_instruction
    (15) for_instruction -> . FOR ID = id_int : id_int instruction
    (14) while_instruction -> . WHILE ( relation_expression ) instruction
    (12) if_instruction -> . IF ( relation_expression ) instruction
    (13) if_instruction -> . IF ( relation_expression ) instruction ELSE instruction
    (44) assign_instruction -> . ID DIVIDEASSIGN right_hand_side_expression ;
    (45) assign_instruction -> . ID TIMESASSIGN right_hand_side_expression ;
    (46) assign_instruction -> . ID MINUSASSIGN right_hand_side_expression ;
    (47) assign_instruction -> . ID PLUSASSIGN right_hand_side_expression ;
    (48) assign_instruction -> . ID = right_hand_side_expression ;
    (49) assign_instruction -> . matrix_ref DIVIDEASSIGN right_hand_side_expression ;
    (50) assign_instruction -> . matrix_ref TIMESASSIGN right_hand_side_expression ;
    (51) assign_instruction -> . matrix_ref MINUSASSIGN right_hand_side_expression ;
    (52) assign_instruction -> . matrix_ref PLUSASSIGN right_hand_side_expression ;
    (53) assign_instruction -> . matrix_ref = right_hand_side_expression ;
    (54) matrix_ref -> . ID [ variables ]
    RETURN          shift and go to state 3
    CONTINUE        shift and go to state 4
    BREAK           shift and go to state 5
    {               shift and go to state 6
    PRINT           shift and go to state 12
    (               shift and go to state 13
    FOR             shift and go to state 15
    WHILE           shift and go to state 17
    IF              shift and go to state 18
    ID              shift and go to state 16

    instruction                    shift and go to state 149
    print_instruction              shift and go to state 7
    full_line_instruction          shift and go to state 8
    for_instruction                shift and go to state 9
    while_instruction              shift and go to state 10
    if_instruction                 shift and go to state 11
    assign_instruction             shift and go to state 14
    matrix_ref                     shift and go to state 19

state 148

    (15) for_instruction -> FOR ID = id_int : id_int instruction .
    RETURN          reduce using rule 15 (for_instruction -> FOR ID = id_int : id_int instruction .)
    CONTINUE        reduce using rule 15 (for_instruction -> FOR ID = id_int : id_int instruction .)
    BREAK           reduce using rule 15 (for_instruction -> FOR ID = id_int : id_int instruction .)
    {               reduce using rule 15 (for_instruction -> FOR ID = id_int : id_int instruction .)
    PRINT           reduce using rule 15 (for_instruction -> FOR ID = id_int : id_int instruction .)
    (               reduce using rule 15 (for_instruction -> FOR ID = id_int : id_int instruction .)
    FOR             reduce using rule 15 (for_instruction -> FOR ID = id_int : id_int instruction .)
    WHILE           reduce using rule 15 (for_instruction -> FOR ID = id_int : id_int instruction .)
    IF              reduce using rule 15 (for_instruction -> FOR ID = id_int : id_int instruction .)
    ID              reduce using rule 15 (for_instruction -> FOR ID = id_int : id_int instruction .)
    $end            reduce using rule 15 (for_instruction -> FOR ID = id_int : id_int instruction .)
    }               reduce using rule 15 (for_instruction -> FOR ID = id_int : id_int instruction .)
    ELSE            reduce using rule 15 (for_instruction -> FOR ID = id_int : id_int instruction .)


state 149

    (13) if_instruction -> IF ( relation_expression ) instruction ELSE instruction .
    RETURN          reduce using rule 13 (if_instruction -> IF ( relation_expression ) instruction ELSE instruction .)
    CONTINUE        reduce using rule 13 (if_instruction -> IF ( relation_expression ) instruction ELSE instruction .)
    BREAK           reduce using rule 13 (if_instruction -> IF ( relation_expression ) instruction ELSE instruction .)
    {               reduce using rule 13 (if_instruction -> IF ( relation_expression ) instruction ELSE instruction .)
    PRINT           reduce using rule 13 (if_instruction -> IF ( relation_expression ) instruction ELSE instruction .)
    (               reduce using rule 13 (if_instruction -> IF ( relation_expression ) instruction ELSE instruction .)
    FOR             reduce using rule 13 (if_instruction -> IF ( relation_expression ) instruction ELSE instruction .)
    WHILE           reduce using rule 13 (if_instruction -> IF ( relation_expression ) instruction ELSE instruction .)
    IF              reduce using rule 13 (if_instruction -> IF ( relation_expression ) instruction ELSE instruction .)
    ID              reduce using rule 13 (if_instruction -> IF ( relation_expression ) instruction ELSE instruction .)
    $end            reduce using rule 13 (if_instruction -> IF ( relation_expression ) instruction ELSE instruction .)
    }               reduce using rule 13 (if_instruction -> IF ( relation_expression ) instruction ELSE instruction .)
    ELSE            reduce using rule 13 (if_instruction -> IF ( relation_expression ) instruction ELSE instruction .)
